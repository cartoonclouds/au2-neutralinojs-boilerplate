if("undefined"!=typeof define)throw new Error('Global var "define" is occupied!');!function(){"use strict";function e(){return(e=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e}).apply(this,arguments)}var n=[".sass",".scss",".less",".styl"],r=[".md",".pug",".haml",".jade",".slim",".slm"],t=[".css"].concat(n,[".html"],r,[".js",".ts",".mjs",".cjs",".json",".json5",".svg",".txt",".wasm",".wasi",".xml",".yml",".yaml"]),i=/^(\S+?!)?(\S+?)\/?$/,o=/^((?:https?:)?\/\/)(.+)/;function a(e){void 0===e&&(e="");var n=e.trim();return n.length&&"/"===n[n.length-1]&&(n=n.slice(0,-1)),n}function u(e){void 0===e&&(e="");var n=a(e).split("/").pop(),r=n.lastIndexOf(".");if(-1!==r){var i=n.slice(r).toLowerCase();if(-1!==t.indexOf(i))return i}return""}function c(e){void 0===e&&(e="");var n=e.trim().match(i);if(!n)throw new Error('not a vaid module id: "'+e+'"');var r,t=n[1]||"",a=n[2],c=a.match(o);c&&(r=c[1].slice(0,-1),a=c[2]);var f=u(a);".json"===f&&"json!"===t&&(t="");var s=a.split("/").filter((function(e,n){return e||0===n}));if(r)s.unshift(r);else if(s.length>1&&s[0].length&&"@"===s[0][0]){var d=s.shift();s[0]=d+"/"+s[0]}for(var l=[],p=0,h=s.length;p<h;p++)0!=p&&"."===s[p]||l.push(s[p]);for(var v=[],m=0,y=l.length;m<y;m++){var w=l[m];if(0===m||".."!==w)v.push(w);else{var b=v.pop();".."===b?(v.push(b),v.push(w)):"."!==b&&void 0!==b||v.push(w)}}return{prefix:t,bareId:a=(s=v).join("/"),parts:s,ext:f,cleanId:t+a}}function f(e,n){var r=c(e),t=c(n);if("."!==t.bareId[0])return t.cleanId;var i=r.parts;return i.pop(),t.parts.forEach((function(e){".."===e?0===i.length?i.push(".."):i.pop():"."!==e&&i.push(e)})),c(t.prefix+i.join("/")).cleanId}function s(e){var t=c(e),i=[t.cleanId],o=t.ext;return".js"!==o&&".ts"!==o&&".mjs"!==o&&".cjs"!==o||i.push(t.cleanId.slice(0,-o.length)),-1!==n.indexOf(o)&&i.push(t.cleanId.slice(0,-o.length)+".css"),-1!==r.indexOf(o)&&i.push(t.cleanId.slice(0,-o.length)+".html"),i.push(t.cleanId+".js"),i.push(t.cleanId+".json"),i.push(t.cleanId+".mjs"),i.push(t.cleanId+".cjs"),i.push(t.cleanId+"/index"),i.push(t.cleanId+"/index.js"),i.push(t.cleanId+"/index.json"),i.push(t.cleanId+"/index.mjs"),i.push(t.cleanId+"/index.cjs"),i}function d(e,n){void 0===n&&(n={});for(var r=c(e),t=r.bareId,i=Object.keys(n).sort((function(e,n){return n.length-e.length})),o=0,a=i.length;o<a;o++){var u=i[o],f=c(u);if(r.parts.length>=f.parts.length&&r.parts.slice(0,f.parts.length).join("/")===u){t=n[u]+t.slice(u.length),""===n[u]&&(t=t.slice(1));break}}return""===t&&(t="index"),r.prefix?d(r.prefix.slice(0,-1),n)+"!"+t:t}function l(e){return e&&"function"==typeof e.then&&(e.__dr_async=!0),e}function p(e){return e&&"function"==typeof e.then&&e.__dr_async}function h(e,n){var r=0,t=e.length;return l(function i(o){if(r<t){var a=n(e[r]);return r+=1,p(a)?a.then((function(e){return i([].concat(o,[e]))})):i([].concat(o,[a]))}return o}([]))}var v=/\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/gm,m=/[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g;function y(e,n){return n||""}var w="require",b="exports",g="module";function x(e){var n={},r=null,t={},i={},o=Object.create(null);function a(e){for(var r=s(e),t=0,i=r.length;t<i;t++){var o=x(r[t]);if(n.hasOwnProperty(o))return n[o]}}function d(e){for(var n=s(e),r=0,i=n.length;r<i;r++){var o=x(n[r]);if(t.hasOwnProperty(o))return t[o]}}function x(e){return o[e]||e}function I(r){var i=[];Object.keys(t).forEach((function(n){var o=t[n],a=o.id;o.deps.some((function(n){var t=f(a,n);return x(e.mappedId(t))===r}))&&i.push(n)})),i.forEach((function(e){I(e);var r=t[e],i=r.deps,o=r.cb;delete t[e],n[e]={id:e,deps:i,cb:o}}))}return{ids:function(){return[].concat(Object.keys(n),Object.keys(t),Object.keys(o)).sort()},has:function(e){return a(e)||d(e)},registered:a,defined:d,definedValues:function(){var e={};return Object.keys(t).forEach((function(n){e[n]=t[n].val})),e},define:function(e,i,o){if("string"!=typeof e&&(o=i,i=e,e=null),Array.isArray(i)||(o=i,i=null),!e||!n.hasOwnProperty(e)&&!t.hasOwnProperty(e))if(i||(i=[],"function"==typeof o&&o.length&&(o.toString().replace(v,y).replace(m,(function(e,n){return i.push(n)})),i=(1===o.length?[w]:[w,b,g]).concat(i))),e){var a=c(e);n[a.cleanId]={id:a.cleanId,deps:i,cb:o}}else r={deps:i,cb:o}},alias:function(e,n){o[e]=n},nameAnonymous:function(e){if(r){var t=r,i=t.deps,o=t.cb;r=null,n[e]={id:e,deps:i,cb:o}}},req:function r(o){if(o===w||o===b||o===g)throw new Error('cannot require reserved keyword "'+o+'"');var c=d(o=x(o));if(c)return c.val;var s=a(o);if(!s)return e.req(o);var v=s.id,m=s.deps,y=s.cb;if(i.hasOwnProperty(v))return i[v].exports;var I=u(v),j={exports:{},id:v,uri:v+(I?"":".js")},O=!1;i[v]=j;var k=function(n){var t,o=f(v,n),u=x(e.mappedId(o)),c=d(u);if(c)return c.val;if(i.hasOwnProperty(u))return i[u].exports;if(p(t=a(u)?r(u):e.req(u)))throw t.then((function(){}),(function(){})),new Error('module "'+u+'" cannot be resolved synchronously.');return t};k.toUrl=e.toUrl;var E,P=function(r){var o;try{o="function"==typeof y?y.apply(e.global,r):y}catch(e){throw delete i[v],e}return void 0===o&&O&&(o=j.exports),delete i[v],delete n[v],t[v]={id:v,deps:m,cb:y,val:o},o};try{E=h(m,(function(n){if(n===w)return k;if(n===g)return O=!0,j;if(n===b)return O=!0,j.exports;var t=f(v,n),i=x(e.mappedId(t)),o=d(i);return o?o.val:function(n,r){var t=Object.create(null);return function n(i){var o=a(i);if(o){var u=o.id,c=o.deps;if(r&&(t[i]=!0,r===u))return!0;for(var s=0,d=c.length;s<d;s++){var l=c[s];if(l!==w&&l!==b&&l!==g){var p=f(u,l),h=x(e.mappedId(p));if(!t[h]&&n(h))return!0}}}}(n)}(i,v)?void 0:r(i)}))}catch(e){throw delete i[v],e}return p(E)?l(E.then(P,(function(e){throw delete i[v],e}))):P(E)},undef:function(e){var r=d(e);if(r)return I(r.id),void delete t[r.id];var i=a(e);i&&delete n[i.id]},purge:function(){n={},r=null,t={},o=Object.create(null)}}}var I="undefined"!=typeof self?self:"undefined"!=typeof global?global:new Function("return this")();function j(e,n){var r=c(e),t=r.prefix.slice(0,-1);if(t){if("text"!==t&&"raw"!==t)return l(new Promise((function(i,o){var a=function(e,n,r){return G(e,n,(function(e){if(r)try{r(e)}catch(e){}o(e)}))};try{var u=function(r){n.define(e,[],(function(){return r})),i(n.req(e))};u.error=function(e){return o(e)},G([t],(function(e){e.load(r.bareId,a,u,{})}))}catch(e){o(e)}})))}else if(r.ext&&".js"!==r.ext){var i="ext:"+r.ext.slice(1);if(O.has(i)||k.has(i))return l(new Promise((function(t,o){var a=function(e,n,r){return G(e,n,(function(e){if(r)try{r(e)}catch(e){}o(e)}))};try{var u=function(r){n.define(e,[],(function(){return r})),t(n.req(e))};u.error=function(e){return o(e)},G([i],(function(e){e.load(r.cleanId,a,u,{})}))}catch(e){o(e)}})));if(n===O||n.has("text!"+r.cleanId))return l(new Promise((function(t){n.alias(r.cleanId,"text!"+r.cleanId),t(n.req(e))})))}}var O=x({global:I,mappedId:T,toUrl:F,req:function(e){var n=function(e){var n=s(e),r=Object.keys(L).find((function(e){var r=L[e],t=r.nameSpace,i=r.user;return n.some((function(e){if(t){var n=c(e);n.bareId.slice(0,t.length+1)===t+"/"&&(e=n.prefix+n.bareId.slice(t.length+1))}if(i.hasOwnProperty(e))return!0;var r=c(e);return r.prefix?i.hasOwnProperty(r.bareId):void 0}))}));if(r)return l(R(r).then((function(){if(O.has(e))return O.req(e);var n=j(e,O);if(n)return n;throw new Error('module "'+e+'" is missing from bundle "'+r+'"')})))}(e);if(n)return n;try{return k.req(e)}catch(n){if(n&&n.__unkown===e){var r=j(e,O);return r||function(e){var n=c(e);return l(function(e){return B(F(e))}(n.cleanId).then((function(e){N.switchToUserSpace();for(var r=0,t=V.length;r<t;r++){var i=l(V[r](n,e));if(p(i))return i}throw new Error("no runtime translator to handle "+n.cleanId)})).then((function(){if(O.has(n.cleanId))return O.req(n.cleanId);throw new Error('module "'+n.cleanId+'" is missing from url "'+F(e)+'"')})).catch((function(e){throw console.error('could not load module "'+n.cleanId+'" from remote'),e})))}(e)}throw n}}}),k=x({global:I,mappedId:T,toUrl:F,req:function(e){try{return function(e){var n=s(e),r=Object.keys(L).find((function(e){return n.some((function(n){var r=L[e].package;if(r.hasOwnProperty(n))return!0;var t=c(n);return t.prefix?r.hasOwnProperty(t.bareId):void 0}))}));if(r)return l(R(r).then((function(){if(k.has(e))return k.req(e);var n=j(e,k);if(n)return n;throw new Error('module "'+e+'" is missing from bundle "'+r+'"')})));var t=new Error('no bundle for module "'+e+'"');throw t.__unkown=e,t}(e)}catch(r){if(r&&r.__unkown===e){var n=j(e,k);if(n)return n}throw r}}}),E=O;function P(){E=O}function q(){E=k}var S="",_={},A={},U={};function T(e){return d(e,A)}function F(e){var n=d(c(e).bareId,U);return"/"===n[0]||n.match(/^https?:\/\//)||(n=c(S+n).cleanId),u(n)||(n+=".js"),n}var L={},V=[function(e,n){if("json!"===e.prefix)return n.json().then((function(n){O.define(e.cleanId,[],n),".json"===e.ext&&O.define(e.bareId,[],n)}))},function(e,n){if("text!"===e.prefix)return n.text().then((function(n){O.define(e.cleanId,n)}))},function(e,n){if("raw!"===e.prefix)return O.define(e.cleanId,(function(){return n})),Promise.resolve()},function(e,n){if(!(e.prefix||e.ext&&".js"!==e.ext))return n.text().then((function(n){P(),new Function(n).call(I),O.nameAnonymous(e.cleanId)}))}],B=function(e){if(void 0===I.fetch)return Promise.reject(new Error('fetch API is not available, cannot fetch "'+e+'"'));var n=e.match(/^(?:https?:)?\/\//)?{mode:"cors"}:{credentials:"include"};return I.fetch(e,n).then((function(n){if(n.ok)return n;throw new Error("URL: "+e+"\nResponse: "+n.status+" "+n.statusText)}))};var C={};function R(e){if(!C[e]){var n,r=F(e),t=(L[e]||{}).nameSpace;N.__skip_script_load_test||!D||t&&!("currentScript"in I.document)||(n=new Promise((function(e,n){var i=document.createElement("script");t&&i.setAttribute("data-namespace",t),i.type="text/javascript",i.charset="utf-8",i.async=!0,i.addEventListener("load",e),i.addEventListener("error",n),i.src=r,10===document.documentMode?setTimeout((function(){document.head.appendChild(i)})):document.head.appendChild(i)}))),n||(n=B(r).then((function(e){return e.text()})).then((function(e){if(P(),t){var n=function(e,n,r){$(t,e,n,r)};n.amd=N.amd,n.switchToUserSpace=P,n.switchToPackageSpace=q,new Function("define",e).call(I,n)}else new Function(e).call(I)}))),C[e]=n}return C[e]}function M(e){var n=T(e);return O.defined(n)||k.defined(n)}function N(e,n,r){if(D&&I.document.currentScript){var t=I.document.currentScript.getAttribute("data-namespace");if(t)return $(t,e,n,r)}E.define(e,n,r)}function $(e,n,r,t){if(E===O&&"ext:"!==n.slice(0,4)){var i=c(n);O.define(i.prefix+e+"/"+i.bareId,r,t)}else E.define(n,r,t)}function G(e,n,r){if(!Array.isArray(e))throw new Error("missing deps array");if(n&&"function"!=typeof n)throw new Error("callback is not a function");if(r&&"function"!=typeof r)throw new Error("errback is not a function");var t,i=function(e){return n?n.apply(I,e):e};function o(){if("string"==typeof arguments[0]){var e=arguments[0],n=M(e);if(n)return n.val;throw new Error('commonjs dependency "'+e+'" is not prepared.')}return G.apply(null,arguments)}o.toUrl=F;try{t=h(e,(function(e){return"require"===e?o:e instanceof RegExp?h([].concat(O.ids(),k.ids()).filter((function(n){return s(n).some((function(n){return n.match(e)}))})),(function(e){return O.req(e)})):O.req(T(e))}))}catch(e){return r?r(e):Promise.reject(e)}return p(t)?t.then(i,(function(e){if(r)return r(e);console.error(e)})):new Promise((function(e){e(i(t))}))}function J(e,n,r){n(["raw!"+e],(function(e){e.arrayBuffer().then((function(e){return WebAssembly.instantiate(e)})).then((function(e){r(e.instance.exports)}),r.error)}))}function Q(e,n,r){n(["text!"+e],(function(e){var n;try{n=JSON.parse(e)}catch(e){return void r.error(e)}r(n)}))}function W(){S="",_={},A={},U={},L={},C={},O.purge(),k.purge(),q(),N("json",{load:Q}),N("ext:json",{load:Q}),N("ext:wasm",{load:J}),P()}function z(e){var n={};return e.forEach((function(e){return n[e]=1})),n}N.alias=function(e,n){E.alias(e,n)};var D=!(void 0===I.navigator||void 0===I.document);if(N.switchToUserSpace=P,N.switchToPackageSpace=q,N.currentSpace=function(){return E===O?"user":"package"},N.nameAnonymous=function(e){var n=c(e);E.nameAnonymous(n.cleanId)},N.reset=W,G.config=function(e){if(e){e.baseUrl&&(S=c(e.baseUrl).bareId+"/"),e.paths&&Object.keys(e.paths).forEach((function(n){var r=e.paths[n];_[a(n)]=a(r)})),e.bundles&&Object.keys(e.bundles).forEach((function(n){var r=e.bundles[n];Array.isArray(r)?L[n]={user:z(r),package:z([])}:L[n]={nameSpace:r.nameSpace||null,user:z(r.user||[]),package:z(r.package||[])}}));var n={},r={};Object.keys(_).forEach((function(e){L.hasOwnProperty(e)||_[e].match(/^(?:https?:)?\//)?r[e]=_[e]:n[e]=_[e]})),A=n,U=r}},G.definedValues=function(){return e({},k.definedValues(),O.definedValues())},N.amd={jQuery:!0},G.defined=M,G.specified=function(e){var n=T(e);return O.has(n)||k.has(n)},G.isBrowser=D,G.version="1.2.0",G.undef=function(e){O.undef(e)},G.toUrl=function(e){return F(T(e))},G.resolveModuleId=f,D)for(var H=I.document.getElementsByTagName("script"),K=function(e){var n=H[e].getAttribute("data-main");if(n)return setTimeout((function(){return G([T(n)])})),"break"},X=H.length-1;X>=0;X--){if("break"===K(X))break}W(),I.define=N,I.requirejs=G}(),"undefined"==typeof require&&(require=requirejs);
define.switchToPackageSpace();
/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur as it's already being fired
		// in leverageNative.
		_default: function() {
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

define('@aurelia/fetch-client/dist/esm/index.js',['require','exports','module','@aurelia/kernel'],function (require, exports, module) {
"use strict";

exports.__esModule = true;
exports.RetryInterceptor = exports.IHttpClient = exports.HttpClientConfiguration = exports.HttpClient = void 0;
exports.json = e;
exports.retryStrategy = void 0;

var _kernel = require("@aurelia/kernel");

function e(t, e) {
  return JSON.stringify(void 0 !== t ? t : {}, e);
}

const r = {
  fixed: 0,
  incremental: 1,
  exponential: 2,
  random: 3
};
exports.retryStrategy = r;
const n = {
  maxRetries: 3,
  interval: 1e3,
  strategy: r.fixed
};

class RetryInterceptor {
  constructor(t) {
    this.retryConfig = { ...n,
      ...(void 0 !== t ? t : {})
    };
    if (this.retryConfig.strategy === r.exponential && this.retryConfig.interval <= 1e3) throw new Error("An interval less than or equal to 1 second is not allowed when using the exponential retry strategy");
  }

  request(t) {
    if (!t.retryConfig) {
      t.retryConfig = { ...this.retryConfig
      };
      t.retryConfig.counter = 0;
    }

    t.retryConfig.requestClone = t.clone();
    return t;
  }

  response(t, e) {
    Reflect.deleteProperty(e, "retryConfig");
    return t;
  }

  responseError(t, e, r) {
    const {
      retryConfig: n
    } = e;
    const {
      requestClone: i
    } = n;
    return Promise.resolve().then(() => {
      if (n.counter < n.maxRetries) {
        const o = void 0 !== n.doRetry ? n.doRetry(t, e) : true;
        return Promise.resolve(o).then(o => {
          if (o) {
            n.counter++;
            const t = s(n);
            return new Promise(e => setTimeout(e, !isNaN(t) ? t : 0)).then(() => {
              const t = i.clone();
              if ("function" === typeof n.beforeRetry) return n.beforeRetry(t, r);
              return t;
            }).then(t => {
              const e = { ...t,
                retryConfig: n
              };
              return r.fetch(e);
            });
          }

          Reflect.deleteProperty(e, "retryConfig");
          throw t;
        });
      }

      Reflect.deleteProperty(e, "retryConfig");
      throw t;
    });
  }

}

exports.RetryInterceptor = RetryInterceptor;

function s(t) {
  const {
    interval: e,
    strategy: n,
    minRandomInterval: s,
    maxRandomInterval: o,
    counter: c
  } = t;
  if ("function" === typeof n) return t.strategy(c);

  switch (n) {
    case r.fixed:
      return i[r.fixed](e);

    case r.incremental:
      return i[r.incremental](c, e);

    case r.exponential:
      return i[r.exponential](c, e);

    case r.random:
      return i[r.random](c, e, s, o);

    default:
      throw new Error("Unrecognized retry strategy");
  }
}

const i = [t => t, (t, e) => e * t, (t, e) => 1 === t ? e : e ** t / 1e3, (t, e, r = 0, n = 6e4) => Math.random() * (n - r) + r];

class HttpClientConfiguration {
  constructor() {
    this.baseUrl = "";
    this.defaults = {};
    this.interceptors = [];
    this.dispatcher = null;
  }

  withBaseUrl(t) {
    this.baseUrl = t;
    return this;
  }

  withDefaults(t) {
    this.defaults = t;
    return this;
  }

  withInterceptor(t) {
    this.interceptors.push(t);
    return this;
  }

  useStandardConfiguration() {
    const t = {
      credentials: "same-origin"
    };
    Object.assign(this.defaults, t, this.defaults);
    return this.rejectErrorResponses();
  }

  rejectErrorResponses() {
    return this.withInterceptor({
      response: o
    });
  }

  withRetry(t) {
    const e = new RetryInterceptor(t);
    return this.withInterceptor(e);
  }

  withDispatcher(t) {
    this.dispatcher = t;
    return this;
  }

}

exports.HttpClientConfiguration = HttpClientConfiguration;

function o(t) {
  if (!t.ok) throw t;
  return t;
}

const c = /^([a-z][a-z0-9+\-.]*:)?\/\//i;

const u = _kernel.DI.createInterface("IHttpClient", t => t.singleton(HttpClient));

exports.IHttpClient = u;

class HttpClient {
  constructor() {
    this.dispatcher = null;
    this.activeRequestCount = 0;
    this.isRequesting = false;
    this.isConfigured = false;
    this.baseUrl = "";
    this.defaults = null;
    this.interceptors = [];
  }

  configure(t) {
    let e;

    if ("object" === typeof t) {
      const r = {
        defaults: t
      };
      e = r;
    } else if ("function" === typeof t) {
      e = new HttpClientConfiguration();
      e.baseUrl = this.baseUrl;
      e.defaults = { ...this.defaults
      };
      e.interceptors = this.interceptors;
      e.dispatcher = this.dispatcher;
      const r = t(e);
      if (Object.prototype.isPrototypeOf.call(HttpClientConfiguration.prototype, r)) e = r;
    } else throw new Error("invalid config");

    const r = e.defaults;
    if (void 0 !== r && Object.prototype.isPrototypeOf.call(Headers.prototype, r.headers)) throw new Error("Default headers must be a plain object.");
    const n = e.interceptors;

    if (void 0 !== n && n.length) {
      if (n.filter(t => Object.prototype.isPrototypeOf.call(RetryInterceptor.prototype, t)).length > 1) throw new Error("Only one RetryInterceptor is allowed.");
      const t = n.findIndex(t => Object.prototype.isPrototypeOf.call(RetryInterceptor.prototype, t));
      if (t >= 0 && t !== n.length - 1) throw new Error("The retry interceptor must be the last interceptor defined.");
    }

    this.baseUrl = e.baseUrl;
    this.defaults = r;
    this.interceptors = void 0 !== e.interceptors ? e.interceptors : [];
    this.dispatcher = e.dispatcher;
    this.isConfigured = true;
    return this;
  }

  fetch(t, e) {
    this.trackRequestStart();
    let r = this.buildRequest(t, e);
    return this.processRequest(r, this.interceptors).then(t => {
      let e;
      if (Object.prototype.isPrototypeOf.call(Response.prototype, t)) e = Promise.resolve(t);else if (Object.prototype.isPrototypeOf.call(Request.prototype, t)) {
        r = t;
        e = fetch(r);
      } else throw new Error(`An invalid result was returned by the interceptor chain. Expected a Request or Response instance, but got [${t}]`);
      return this.processResponse(e, this.interceptors, r);
    }).then(t => {
      if (Object.prototype.isPrototypeOf.call(Request.prototype, t)) return this.fetch(t);
      return t;
    }).then(t => {
      this.trackRequestEnd();
      return t;
    }, t => {
      this.trackRequestEnd();
      throw t;
    });
  }

  buildRequest(t, e) {
    const r = null !== this.defaults ? this.defaults : {};
    let n;
    let s;
    let i;
    const o = h(r.headers);

    if (Object.prototype.isPrototypeOf.call(Request.prototype, t)) {
      n = t;
      i = new Headers(n.headers).get("Content-Type");
    } else {
      if (!e) e = {};
      s = e.body;
      const o = void 0 !== s ? {
        body: s
      } : null;
      const c = { ...r,
        headers: {},
        ...e,
        ...o
      };
      i = new Headers(c.headers).get("Content-Type");
      n = new Request(l(this.baseUrl, t), c);
    }

    if (!i) if (new Headers(o).has("content-type")) n.headers.set("Content-Type", new Headers(o).get("content-type"));else if (void 0 !== s && f(s)) n.headers.set("Content-Type", "application/json");
    a(n.headers, o);
    if (void 0 !== s && Object.prototype.isPrototypeOf.call(Blob.prototype, s) && s.type) n.headers.set("Content-Type", s.type);
    return n;
  }

  get(t, e) {
    return this.fetch(t, e);
  }

  post(t, e, r) {
    return this.callFetch(t, e, r, "POST");
  }

  put(t, e, r) {
    return this.callFetch(t, e, r, "PUT");
  }

  patch(t, e, r) {
    return this.callFetch(t, e, r, "PATCH");
  }

  delete(t, e, r) {
    return this.callFetch(t, e, r, "DELETE");
  }

  trackRequestStart() {
    this.isRequesting = !!++this.activeRequestCount;

    if (this.isRequesting && null !== this.dispatcher) {
      const t = new this.dispatcher.ownerDocument.defaultView.CustomEvent("aurelia-fetch-client-request-started", {
        bubbles: true,
        cancelable: true
      });
      setTimeout(() => {
        this.dispatcher.dispatchEvent(t);
      }, 1);
    }
  }

  trackRequestEnd() {
    this.isRequesting = !! --this.activeRequestCount;

    if (!this.isRequesting && null !== this.dispatcher) {
      const t = new this.dispatcher.ownerDocument.defaultView.CustomEvent("aurelia-fetch-client-requests-drained", {
        bubbles: true,
        cancelable: true
      });
      setTimeout(() => {
        this.dispatcher.dispatchEvent(t);
      }, 1);
    }
  }

  processRequest(t, e) {
    return this.applyInterceptors(t, e, "request", "requestError", this);
  }

  processResponse(t, e, r) {
    return this.applyInterceptors(t, e, "response", "responseError", r, this);
  }

  applyInterceptors(t, e, r, n, ...s) {
    return (void 0 !== e ? e : []).reduce((t, e) => {
      const i = e[r];
      const o = e[n];
      return t.then(i ? t => i.call(e, t, ...s) : p, o ? t => o.call(e, t, ...s) : d);
    }, Promise.resolve(t));
  }

  callFetch(t, e, r, n) {
    if (!r) r = {};
    r.method = n;
    if (e) r.body = e;
    return this.fetch(t, r);
  }

}

exports.HttpClient = HttpClient;

function h(t) {
  const e = {};
  const r = void 0 !== t ? t : {};

  for (const t in r) if (Object.prototype.hasOwnProperty.call(r, t)) e[t] = "function" === typeof r[t] ? r[t]() : r[t];

  return e;
}

function l(t, e) {
  if (c.test(e)) return e;
  return (void 0 !== t ? t : "") + e;
}

function a(t, e) {
  const r = void 0 !== e ? e : {};

  for (const e in r) if (Object.prototype.hasOwnProperty.call(r, e) && !t.has(e)) t.set(e, r[e]);
}

function f(t) {
  try {
    JSON.parse(t);
  } catch (t) {
    return false;
  }

  return true;
}

function p(t) {
  return t;
}

function d(t) {
  throw t;
}
});

;define.alias('@aurelia/fetch-client','@aurelia/fetch-client/dist/esm/index.js');
define('@aurelia/kernel/dist/esm/index.js',['require','exports','module','@aurelia/metadata','@aurelia/platform'],function (require, exports, module) {
"use strict";

exports.__esModule = true;
exports.applyMetadataPolyfill = exports.all = exports.TaskStatus = exports.TaskQueuePriority = exports.TaskQueue = exports.TaskAbortError = exports.Task = exports.Registration = exports.Protocol = exports.Platform = exports.ModuleItem = exports.Metadata = exports.LoggerConfiguration = exports.LogLevel = exports.LogConfig = exports.InstanceProvider = exports.ISink = exports.IServiceLocator = exports.IPlatform = exports.IModuleLoader = exports.ILogger = exports.ILogEventFactory = exports.ILogConfig = exports.IEventAggregator = exports.IContainer = exports.EventAggregator = exports.DefaultResolver = exports.DefaultLogger = exports.DefaultLogEventFactory = exports.DefaultLogEvent = exports.DI = exports.ContainerConfiguration = exports.ConsoleSink = exports.ColorOptions = exports.AnalyzedModule = void 0;
exports.bound = m;
exports.camelCase = void 0;
exports.compareNumber = w;
exports.factory = exports.emptyObject = exports.emptyArray = void 0;
exports.firstDefined = R;
exports.format = void 0;
exports.fromAnnotationOrDefinitionOrTypeOrDefault = W;
exports.fromAnnotationOrTypeOrDefault = B;
exports.fromDefinitionOrDefault = Q;
exports.getPrototypeChain = void 0;
exports.ignore = st;
exports.inject = void 0;
exports.isArrayIndex = i;
exports.isNullOrUndefined = exports.isNativeFunction = void 0;
exports.isNumberOrBigInt = s;
exports.isObject = void 0;
exports.isStringOrDate = o;
exports.lazy = exports.kebabCase = void 0;
exports.mergeArrays = p;
exports.mergeDistinct = g;
exports.mergeObjects = y;
exports.newInstanceOf = exports.newInstanceForScope = exports.metadata = void 0;
exports.nextId = d;
exports.noop = It;
exports.onResolve = E;
exports.pascalCase = exports.optional = void 0;
exports.resetId = v;
exports.resolveAll = A;
exports.singleton = tt;
exports.sink = Qt;
exports.toArray = a;
exports.transient = Y;

var _metadata = require("@aurelia/metadata");

exports.Metadata = _metadata.Metadata;
exports.applyMetadataPolyfill = _metadata.applyMetadataPolyfill;
exports.isNullOrUndefined = _metadata.isNullOrUndefined;
exports.isObject = _metadata.isObject;
exports.metadata = _metadata.metadata;

var _platform = require("@aurelia/platform");

exports.Platform = _platform.Platform;
exports.Task = _platform.Task;
exports.TaskAbortError = _platform.TaskAbortError;
exports.TaskQueue = _platform.TaskQueue;
exports.TaskQueuePriority = _platform.TaskQueuePriority;
exports.TaskStatus = _platform.TaskStatus;
const r = {};

function i(t) {
  switch (typeof t) {
    case "number":
      return t >= 0 && (0 | t) === t;

    case "string":
      {
        const e = r[t];
        if (void 0 !== e) return e;
        const n = t.length;
        if (0 === n) return r[t] = false;
        let i = 0;
        let s = 0;

        for (; s < n; ++s) {
          i = t.charCodeAt(s);
          if (0 === s && 48 === i && n > 1 || i < 48 || i > 57) return r[t] = false;
        }

        return r[t] = true;
      }

    default:
      return false;
  }
}

function s(t) {
  switch (typeof t) {
    case "number":
    case "bigint":
      return true;

    default:
      return false;
  }
}

function o(t) {
  switch (typeof t) {
    case "string":
      return true;

    case "object":
      return t instanceof Date;

    default:
      return false;
  }
}

const u = function () {
  let t;

  (function (t) {
    t[t["none"] = 0] = "none";
    t[t["digit"] = 1] = "digit";
    t[t["upper"] = 2] = "upper";
    t[t["lower"] = 3] = "lower";
  })(t || (t = {}));

  const e = Object.assign(Object.create(null), {
    0: true,
    1: true,
    2: true,
    3: true,
    4: true,
    5: true,
    6: true,
    7: true,
    8: true,
    9: true
  });

  function n(t) {
    if ("" === t) return 0;
    if (t !== t.toUpperCase()) return 3;
    if (t !== t.toLowerCase()) return 2;
    if (true === e[t]) return 1;
    return 0;
  }

  return function (t, e) {
    const r = t.length;
    if (0 === r) return t;
    let i = false;
    let s = "";
    let o;
    let u = "";
    let l = 0;
    let c = t.charAt(0);
    let f = n(c);
    let a = 0;

    for (; a < r; ++a) {
      o = l;
      u = c;
      l = f;
      c = t.charAt(a + 1);
      f = n(c);

      if (0 === l) {
        if (s.length > 0) i = true;
      } else {
        if (!i && s.length > 0 && 2 === l) i = 3 === o || 3 === f;
        s += e(u, i);
        i = false;
      }
    }

    return s;
  };
}();

const l = function () {
  const t = Object.create(null);

  function e(t, e) {
    return e ? t.toUpperCase() : t.toLowerCase();
  }

  return function (n) {
    let r = t[n];
    if (void 0 === r) r = t[n] = u(n, e);
    return r;
  };
}();

exports.camelCase = l;

const c = function () {
  const t = Object.create(null);
  return function (e) {
    let n = t[e];

    if (void 0 === n) {
      n = l(e);
      if (n.length > 0) n = n[0].toUpperCase() + n.slice(1);
      t[e] = n;
    }

    return n;
  };
}();

exports.pascalCase = c;

const f = function () {
  const t = Object.create(null);

  function e(t, e) {
    return e ? `-${t.toLowerCase()}` : t.toLowerCase();
  }

  return function (n) {
    let r = t[n];
    if (void 0 === r) r = t[n] = u(n, e);
    return r;
  };
}();

exports.kebabCase = f;

function a(t) {
  const {
    length: e
  } = t;
  const n = Array(e);
  let r = 0;

  for (; r < e; ++r) n[r] = t[r];

  return n;
}

const h = {};

function d(t) {
  if (void 0 === h[t]) h[t] = 0;
  return ++h[t];
}

function v(t) {
  h[t] = 0;
}

function w(t, e) {
  return t - e;
}

function g(t, e, n) {
  if (void 0 === t || null === t || t === Ot) {
    if (void 0 === e || null === e || e === Ot) return Ot;else return n ? e.slice(0) : e;
  } else if (void 0 === e || null === e || e === Ot) return n ? t.slice(0) : t;
  const r = {};
  const i = n ? t.slice(0) : t;
  let s = t.length;
  let o = e.length;

  while (s-- > 0) r[t[s]] = true;

  let u;

  while (o-- > 0) {
    u = e[o];

    if (void 0 === r[u]) {
      i.push(u);
      r[u] = true;
    }
  }

  return i;
}

function m(t, e, n) {
  return {
    configurable: true,
    enumerable: n.enumerable,

    get() {
      const t = n.value.bind(this);
      Reflect.defineProperty(this, e, {
        value: t,
        writable: true,
        configurable: true,
        enumerable: n.enumerable
      });
      return t;
    }

  };
}

function p(...t) {
  const e = [];
  let n = 0;
  const r = t.length;
  let i = 0;
  let s;
  let o = 0;

  for (; o < r; ++o) {
    s = t[o];

    if (void 0 !== s) {
      i = s.length;
      let t = 0;

      for (; t < i; ++t) e[n++] = s[t];
    }
  }

  return e;
}

function y(...t) {
  const e = {};
  const n = t.length;
  let r;
  let i;
  let s = 0;

  for (; n > s; ++s) {
    r = t[s];
    if (void 0 !== r) for (i in r) e[i] = r[i];
  }

  return e;
}

function R(...t) {
  const e = t.length;
  let n;
  let r = 0;

  for (; e > r; ++r) {
    n = t[r];
    if (void 0 !== n) return n;
  }

  throw new Error(`No default value found`);
}

const b = function () {
  const t = Function.prototype;
  const e = Object.getPrototypeOf;
  const n = new WeakMap();
  let r = t;
  let i = 0;
  let s;
  return function (o) {
    s = n.get(o);

    if (void 0 === s) {
      n.set(o, s = [r = o]);
      i = 0;

      while ((r = e(r)) !== t) s[++i] = r;
    }

    return s;
  };
}();

exports.getPrototypeChain = b;

function C(...t) {
  return Object.assign(Object.create(null), ...t);
}

const $ = function () {
  const t = new WeakMap();
  let e = false;
  let n = "";
  let r = 0;
  return function (i) {
    e = t.get(i);

    if (void 0 === e) {
      n = i.toString();
      r = n.length;
      e = r >= 29 && r <= 100 && 125 === n.charCodeAt(r - 1) && n.charCodeAt(r - 2) <= 32 && 93 === n.charCodeAt(r - 3) && 101 === n.charCodeAt(r - 4) && 100 === n.charCodeAt(r - 5) && 111 === n.charCodeAt(r - 6) && 99 === n.charCodeAt(r - 7) && 32 === n.charCodeAt(r - 8) && 101 === n.charCodeAt(r - 9) && 118 === n.charCodeAt(r - 10) && 105 === n.charCodeAt(r - 11) && 116 === n.charCodeAt(r - 12) && 97 === n.charCodeAt(r - 13) && 110 === n.charCodeAt(r - 14) && 88 === n.charCodeAt(r - 15);
      t.set(i, e);
    }

    return e;
  };
}();

exports.isNativeFunction = $;

function E(t, e) {
  if (t instanceof Promise) return t.then(e);
  return e(t);
}

function A(...t) {
  let e;
  let n;
  let r;
  let i = 0;
  let s = t.length;

  for (; i < s; ++i) {
    e = t[i];
    if ((e = t[i]) instanceof Promise) if (void 0 === n) n = e;else if (void 0 === r) r = [n, e];else r.push(e);
  }

  if (void 0 === r) return n;
  return Promise.all(r);
}

const j = _metadata.Metadata.getOwn;
const O = _metadata.Metadata.hasOwn;
const k = _metadata.Metadata.define;

const I = t => "function" === typeof t;

const M = t => "string" === typeof t;

const T = "au:annotation";

const F = (t, e) => {
  if (void 0 === e) return `${T}:${t}`;
  return `${T}:${t}:${e}`;
};

const U = (t, e) => {
  const n = j(T, t);
  if (void 0 === n) k(T, [e], t);else n.push(e);
};

const L = Object.freeze({
  name: "au:annotation",
  appendTo: U,

  set(t, e, n) {
    k(F(e), n, t);
  },

  get: (t, e) => j(F(e), t),

  getKeys(t) {
    let e = j(T, t);
    if (void 0 === e) k(T, e = [], t);
    return e;
  },

  isKey: t => t.startsWith(T),
  keyFor: F
});
const P = "au:resource";
const D = Object.freeze({
  name: P,

  appendTo(t, e) {
    const n = j(P, t);
    if (void 0 === n) k(P, [e], t);else n.push(e);
  },

  has: t => O(P, t),

  getAll(t) {
    const e = j(P, t);
    if (void 0 === e) return Ot;else return e.map(e => j(e, t));
  },

  getKeys(t) {
    let e = j(P, t);
    if (void 0 === e) k(P, e = [], t);
    return e;
  },

  isKey: t => t.startsWith(P),

  keyFor(t, e) {
    if (void 0 === e) return `${P}:${t}`;
    return `${P}:${t}:${e}`;
  }

});
const S = {
  annotation: L,
  resource: D
};
exports.Protocol = S;
const N = Object.prototype.hasOwnProperty;

function W(t, e, n, r) {
  let i = j(F(t), n);

  if (void 0 === i) {
    i = e[t];

    if (void 0 === i) {
      i = n[t];
      if (void 0 === i || !N.call(n, t)) return r();
      return i;
    }

    return i;
  }

  return i;
}

function B(t, e, n) {
  let r = j(F(t), e);

  if (void 0 === r) {
    r = e[t];
    if (void 0 === r || !N.call(e, t)) return n();
    return r;
  }

  return r;
}

function Q(t, e, n) {
  const r = e[t];
  if (void 0 === r) return n();
  return r;
}

(0, _metadata.applyMetadataPolyfill)(Reflect, false, false);

class ResolverBuilder {
  constructor(t, e) {
    this.container = t;
    this.key = e;
  }

  instance(t) {
    return this.registerResolver(0, t);
  }

  singleton(t) {
    return this.registerResolver(1, t);
  }

  transient(t) {
    return this.registerResolver(2, t);
  }

  callback(t) {
    return this.registerResolver(3, t);
  }

  cachedCallback(t) {
    return this.registerResolver(3, Ct(t));
  }

  aliasTo(t) {
    return this.registerResolver(5, t);
  }

  registerResolver(t, e) {
    const {
      container: n,
      key: r
    } = this;
    this.container = this.key = void 0;
    return n.registerResolver(r, new Resolver(r, t, e));
  }

}

function x(t) {
  const e = t.slice();
  const n = Object.keys(t);
  const r = n.length;
  let s;

  for (let o = 0; o < r; ++o) {
    s = n[o];
    if (!i(s)) e[s] = t[s];
  }

  return e;
}

const z = {
  none(t) {
    throw Error(`AUR0002:${t.toString()}`);
  },

  singleton(t) {
    return new Resolver(t, 1, t);
  },

  transient(t) {
    return new Resolver(t, 2, t);
  }

};
exports.DefaultResolver = z;

class ContainerConfiguration {
  constructor(t, e) {
    this.inheritParentResources = t;
    this.defaultResolver = e;
  }

  static from(t) {
    var e, n;
    if (void 0 === t || t === ContainerConfiguration.DEFAULT) return ContainerConfiguration.DEFAULT;
    return new ContainerConfiguration(null !== (e = t.inheritParentResources) && void 0 !== e ? e : false, null !== (n = t.defaultResolver) && void 0 !== n ? n : z.singleton);
  }

}

exports.ContainerConfiguration = ContainerConfiguration;
ContainerConfiguration.DEFAULT = ContainerConfiguration.from({});
const G = {
  createContainer(t) {
    return new Container(null, ContainerConfiguration.from(t));
  },

  getDesignParamtypes(t) {
    return j("design:paramtypes", t);
  },

  getAnnotationParamtypes(t) {
    const e = F("di:paramtypes");
    return j(e, t);
  },

  getOrCreateAnnotationParamTypes: _,
  getDependencies: K,

  createInterface(t, e) {
    const n = I(t) ? t : e;
    const r = M(t) ? t : void 0;

    const i = function (t, e, n) {
      if (null == t || void 0 !== new.target) throw new Error(`AUR0001:${i.friendlyName}`);

      const r = _(t);

      r[n] = i;
    };

    i.$isInterface = true;
    i.friendlyName = null == r ? "(anonymous)" : r;
    if (null != n) i.register = function (t, e) {
      return n(new ResolverBuilder(t, null !== e && void 0 !== e ? e : i));
    };

    i.toString = function t() {
      return `InterfaceSymbol<${i.friendlyName}>`;
    };

    return i;
  },

  inject(...t) {
    return function (e, n, r) {
      if ("number" === typeof r) {
        const n = _(e);

        const i = t[0];
        if (void 0 !== i) n[r] = i;
      } else if (n) {
        const r = _(e.constructor);

        const i = t[0];
        if (void 0 !== i) r[n] = i;
      } else if (r) {
        const e = r.value;

        const n = _(e);

        let i;

        for (let e = 0; e < t.length; ++e) {
          i = t[e];
          if (void 0 !== i) n[e] = i;
        }
      } else {
        const n = _(e);

        let r;

        for (let e = 0; e < t.length; ++e) {
          r = t[e];
          if (void 0 !== r) n[e] = r;
        }
      }
    };
  },

  transient(t) {
    t.register = function e(n) {
      const r = $t.transient(t, t);
      return r.register(n, t);
    };

    t.registerInRequestor = false;
    return t;
  },

  singleton(t, e = Z) {
    t.register = function e(n) {
      const r = $t.singleton(t, t);
      return r.register(n, t);
    };

    t.registerInRequestor = e.scoped;
    return t;
  }

};
exports.DI = G;

function K(t) {
  const e = F("di:dependencies");
  let n = j(e, t);

  if (void 0 === n) {
    const r = t.inject;

    if (void 0 === r) {
      const e = G.getDesignParamtypes(t);
      const r = G.getAnnotationParamtypes(t);
      if (void 0 === e) {
        if (void 0 === r) {
          const e = Object.getPrototypeOf(t);
          if (I(e) && e !== Function.prototype) n = x(K(e));else n = [];
        } else n = x(r);
      } else if (void 0 === r) n = x(e);else {
        n = x(e);
        let t = r.length;
        let s;
        let o = 0;

        for (; o < t; ++o) {
          s = r[o];
          if (void 0 !== s) n[o] = s;
        }

        const u = Object.keys(r);
        let l;
        o = 0;
        t = u.length;

        for (o = 0; o < t; ++o) {
          l = u[o];
          if (!i(l)) n[l] = r[l];
        }
      }
    } else n = x(r);

    k(e, n, t);
    U(t, e);
  }

  return n;
}

function _(t) {
  const e = F("di:paramtypes");
  let n = j(e, t);

  if (void 0 === n) {
    k(e, n = [], t);
    U(t, e);
  }

  return n;
}

const H = G.createInterface("IContainer");
exports.IContainer = H;
const V = H;
exports.IServiceLocator = V;

function q(t) {
  return function (e) {
    const n = function (t, e, r) {
      G.inject(n)(t, e, r);
    };

    n.$isResolver = true;

    n.resolve = function (n, r) {
      return t(e, n, r);
    };

    return n;
  };
}

const J = G.inject;
exports.inject = J;

function X(t) {
  return G.transient(t);
}

function Y(t) {
  return null == t ? X : X(t);
}

const Z = {
  scoped: false
};

function tt(t) {
  if (I(t)) return G.singleton(t);
  return function (e) {
    return G.singleton(e, t);
  };
}

function et(t) {
  return function (e, n) {
    n = !!n;

    const r = function (t, e, n) {
      G.inject(r)(t, e, n);
    };

    r.$isResolver = true;

    r.resolve = function (r, i) {
      return t(e, r, i, n);
    };

    return r;
  };
}

const nt = et((t, e, n, r) => n.getAll(t, r));
exports.all = nt;
const rt = q((t, e, n) => () => n.get(t));
exports.lazy = rt;
const it = q((t, e, n) => {
  if (n.has(t, true)) return n.get(t);else return;
});
exports.optional = it;

function st(t, e, n) {
  G.inject(st)(t, e, n);
}

st.$isResolver = true;

st.resolve = () => {};

const ot = q((t, e, n) => (...r) => e.getFactory(t).construct(n, r));
exports.factory = ot;
const ut = q((t, e, n) => {
  const r = ct(t, e, n);
  const i = new InstanceProvider(String(t), r);
  n.registerResolver(t, i, true);
  return r;
});
exports.newInstanceForScope = ut;
const lt = q((t, e, n) => ct(t, e, n));
exports.newInstanceOf = lt;

function ct(t, e, n) {
  return e.getFactory(t).construct(n);
}

var ft;

(function (t) {
  t[t["instance"] = 0] = "instance";
  t[t["singleton"] = 1] = "singleton";
  t[t["transient"] = 2] = "transient";
  t[t["callback"] = 3] = "callback";
  t[t["array"] = 4] = "array";
  t[t["alias"] = 5] = "alias";
})(ft || (ft = {}));

class Resolver {
  constructor(t, e, n) {
    this.key = t;
    this.strategy = e;
    this.state = n;
    this.resolving = false;
  }

  get $isResolver() {
    return true;
  }

  register(t, e) {
    return t.registerResolver(e || this.key, this);
  }

  resolve(t, e) {
    switch (this.strategy) {
      case 0:
        return this.state;

      case 1:
        if (this.resolving) throw new Error(`AUR0003:${this.state.name}`);
        this.resolving = true;
        this.state = t.getFactory(this.state).construct(e);
        this.strategy = 0;
        this.resolving = false;
        return this.state;

      case 2:
        {
          const n = t.getFactory(this.state);
          if (null === n) throw new Error(`AUR0004:${String(this.key)}`);
          return n.construct(e);
        }

      case 3:
        return this.state(t, e, this);

      case 4:
        return this.state[0].resolve(t, e);

      case 5:
        return e.get(this.state);

      default:
        throw new Error(`AUR0005:${this.strategy}`);
    }
  }

  getFactory(t) {
    var e, n, r;

    switch (this.strategy) {
      case 1:
      case 2:
        return t.getFactory(this.state);

      case 5:
        return null !== (r = null === (n = null === (e = t.getResolver(this.state)) || void 0 === e ? void 0 : e.getFactory) || void 0 === n ? void 0 : n.call(e, t)) && void 0 !== r ? r : null;

      default:
        return null;
    }
  }

}

function at(t) {
  return this.get(t);
}

function ht(t, e) {
  return e(t);
}

class Factory {
  constructor(t, e) {
    this.Type = t;
    this.dependencies = e;
    this.transformers = null;
  }

  construct(t, e) {
    let n;
    if (void 0 === e) n = new this.Type(...this.dependencies.map(at, t));else n = new this.Type(...this.dependencies.map(at, t), ...e);
    if (null == this.transformers) return n;
    return this.transformers.reduce(ht, n);
  }

  registerTransformer(t) {
    var e;
    (null !== (e = this.transformers) && void 0 !== e ? e : this.transformers = []).push(t);
  }

}

const dt = {
  $isResolver: true,

  resolve(t, e) {
    return e;
  }

};

function vt(t) {
  return I(t.register);
}

function wt(t) {
  return vt(t) && "boolean" === typeof t.registerInRequestor;
}

function gt(t) {
  return wt(t) && t.registerInRequestor;
}

function mt(t) {
  return void 0 !== t.prototype;
}

function pt(t) {
  return M(t) && t.indexOf(":") > 0;
}

const yt = new Set(["Array", "ArrayBuffer", "Boolean", "DataView", "Date", "Error", "EvalError", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Number", "Object", "Promise", "RangeError", "ReferenceError", "RegExp", "Set", "SharedArrayBuffer", "String", "SyntaxError", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "URIError", "WeakMap", "WeakSet"]);
let Rt = 0;

class Container {
  constructor(t, e) {
    this.parent = t;
    this.config = e;
    this.id = ++Rt;
    this.t = 0;
    this.i = new Map();

    if (null === t) {
      this.root = this;
      this.u = new Map();
      this.h = new Map();
      this.res = Object.create(null);
    } else {
      this.root = t.root;
      this.u = new Map();
      this.h = t.h;
      if (e.inheritParentResources) this.res = Object.assign(Object.create(null), t.res, this.root.res);else this.res = Object.create(null);
    }

    this.u.set(H, dt);
  }

  get depth() {
    return null === this.parent ? 0 : this.parent.depth + 1;
  }

  register(...t) {
    if (100 === ++this.t) throw new Error(`AUR0006:${t.map(String)}`);
    let e;
    let r;
    let i;
    let s;
    let o;
    let u = 0;
    let l = t.length;

    for (; u < l; ++u) {
      e = t[u];
      if (!(0, _metadata.isObject)(e)) continue;
      if (vt(e)) e.register(this);else if (S.resource.has(e)) {
        const t = S.resource.getAll(e);
        if (1 === t.length) t[0].register(this);else {
          s = 0;
          o = t.length;

          while (o > s) {
            t[s].register(this);
            ++s;
          }
        }
      } else if (mt(e)) $t.singleton(e, e).register(this);else {
        r = Object.keys(e);
        s = 0;
        o = r.length;

        for (; s < o; ++s) {
          i = e[r[s]];
          if (!(0, _metadata.isObject)(i)) continue;
          if (vt(i)) i.register(this);else this.register(i);
        }
      }
    }

    --this.t;
    return this;
  }

  registerResolver(t, e, n = false) {
    Et(t);
    const r = this.u;
    const i = r.get(t);

    if (null == i) {
      r.set(t, e);

      if (pt(t)) {
        if (void 0 !== this.res[t]) throw new Error(`AUR0007:${t}`);
        this.res[t] = e;
      }
    } else if (i instanceof Resolver && 4 === i.strategy) i.state.push(e);else r.set(t, new Resolver(t, 4, [i, e]));

    if (n) this.i.set(t, e);
    return e;
  }

  registerTransformer(t, e) {
    const n = this.getResolver(t);
    if (null == n) return false;

    if (n.getFactory) {
      const t = n.getFactory(this);
      if (null == t) return false;
      t.registerTransformer(e);
      return true;
    }

    return false;
  }

  getResolver(t, e = true) {
    Et(t);
    if (void 0 !== t.resolve) return t;
    let n = this;
    let r;

    while (null != n) {
      r = n.u.get(t);

      if (null == r) {
        if (null == n.parent) {
          const r = gt(t) ? this : n;
          return e ? this.R(t, r) : null;
        }

        n = n.parent;
      } else return r;
    }

    return null;
  }

  has(t, e = false) {
    return this.u.has(t) ? true : e && null != this.parent ? this.parent.has(t, true) : false;
  }

  get(t) {
    Et(t);
    if (t.$isResolver) return t.resolve(this, this);
    let e = this;
    let n;

    while (null != e) {
      n = e.u.get(t);

      if (null == n) {
        if (null == e.parent) {
          const r = gt(t) ? this : e;
          n = this.R(t, r);
          return n.resolve(e, this);
        }

        e = e.parent;
      } else return n.resolve(e, this);
    }

    throw new Error(`AUR0008:${t}`);
  }

  getAll(t, e = false) {
    Et(t);
    const n = this;
    let r = n;
    let i;

    if (e) {
      let e = Ot;

      while (null != r) {
        i = r.u.get(t);
        if (null != i) e = e.concat(At(i, r, n));
        r = r.parent;
      }

      return e;
    } else while (null != r) {
      i = r.u.get(t);

      if (null == i) {
        r = r.parent;
        if (null == r) return Ot;
      } else return At(i, r, n);
    }

    return Ot;
  }

  invoke(t, e) {
    if ($(t)) throw jt(t);
    if (void 0 === e) return new t(...K(t).map(at, this));else return new t(...K(t).map(at, this), ...e);
  }

  getFactory(t) {
    let e = this.h.get(t);

    if (void 0 === e) {
      if ($(t)) throw jt(t);
      this.h.set(t, e = new Factory(t, K(t)));
    }

    return e;
  }

  registerFactory(t, e) {
    this.h.set(t, e);
  }

  createChild(t) {
    if (void 0 === t && this.config.inheritParentResources) {
      if (this.config === ContainerConfiguration.DEFAULT) return new Container(this, this.config);
      return new Container(this, ContainerConfiguration.from({ ...this.config,
        inheritParentResources: false
      }));
    }

    return new Container(this, ContainerConfiguration.from(null !== t && void 0 !== t ? t : this.config));
  }

  disposeResolvers() {
    const t = this.u;
    const e = this.i;
    let n;
    let r;

    for ([r, n] of e.entries()) {
      n.dispose();
      t.delete(r);
    }

    e.clear();
  }

  find(t, e) {
    const n = t.keyFrom(e);
    let r = this.res[n];

    if (void 0 === r) {
      r = this.root.res[n];
      if (void 0 === r) return null;
    }

    if (null === r) return null;

    if (I(r.getFactory)) {
      const e = r.getFactory(this);
      if (null === e || void 0 === e) return null;
      const n = j(t.name, e.Type);
      if (void 0 === n) return null;
      return n;
    }

    return null;
  }

  create(t, e) {
    var n, r;
    const i = t.keyFrom(e);
    let s = this.res[i];

    if (void 0 === s) {
      s = this.root.res[i];
      if (void 0 === s) return null;
      return null !== (n = s.resolve(this.root, this)) && void 0 !== n ? n : null;
    }

    return null !== (r = s.resolve(this, this)) && void 0 !== r ? r : null;
  }

  dispose() {
    if (this.i.size > 0) this.disposeResolvers();
    this.u.clear();
  }

  R(t, e) {
    if (!I(t)) throw new Error(`AUR0009:${t}`);
    if (yt.has(t.name)) throw new Error(`AUR0010:${t.name}`);

    if (vt(t)) {
      const n = t.register(e, t);

      if (!(n instanceof Object) || null == n.resolve) {
        const n = e.u.get(t);
        if (void 0 != n) return n;
        throw new Error(`AUR0011`);
      }

      return n;
    } else if (S.resource.has(t)) {
      const n = S.resource.getAll(t);
      if (1 === n.length) n[0].register(e);else {
        const t = n.length;

        for (let r = 0; r < t; ++r) n[r].register(e);
      }
      const r = e.u.get(t);
      if (void 0 != r) return r;
      throw new Error(`AUR0011`);
    } else if (t.$isInterface) throw new Error(`AUR0012:${t.friendlyName}`);else {
      const n = this.config.defaultResolver(t, e);
      e.u.set(t, n);
      return n;
    }
  }

}

class ParameterizedRegistry {
  constructor(t, e) {
    this.key = t;
    this.params = e;
  }

  register(t) {
    if (t.has(this.key, true)) {
      const e = t.get(this.key);
      e.register(t, ...this.params);
    } else t.register(...this.params.filter(t => "object" === typeof t));
  }

}

const bt = new WeakMap();

function Ct(t) {
  return function (e, n, r) {
    let i = bt.get(e);
    if (void 0 === i) bt.set(e, i = new WeakMap());
    if (i.has(r)) return i.get(r);
    const s = t(e, n, r);
    i.set(r, s);
    return s;
  };
}

const $t = {
  instance(t, e) {
    return new Resolver(t, 0, e);
  },

  singleton(t, e) {
    return new Resolver(t, 1, e);
  },

  transient(t, e) {
    return new Resolver(t, 2, e);
  },

  callback(t, e) {
    return new Resolver(t, 3, e);
  },

  cachedCallback(t, e) {
    return new Resolver(t, 3, Ct(e));
  },

  aliasTo(t, e) {
    return new Resolver(e, 5, t);
  },

  defer(t, ...e) {
    return new ParameterizedRegistry(t, e);
  }

};
exports.Registration = $t;

class InstanceProvider {
  constructor(t, e) {
    this.C = null;
    this.$ = t;
    if (void 0 !== e) this.C = e;
  }

  get friendlyName() {
    return this.$;
  }

  prepare(t) {
    this.C = t;
  }

  get $isResolver() {
    return true;
  }

  resolve() {
    if (null == this.C) throw new Error(`AUR0013:${this.$}`);
    return this.C;
  }

  dispose() {
    this.C = null;
  }

}

exports.InstanceProvider = InstanceProvider;

function Et(t) {
  if (null === t || void 0 === t) throw new Error(`AUR0014`);
}

function At(t, e, n) {
  if (t instanceof Resolver && 4 === t.strategy) {
    const r = t.state;
    let i = r.length;
    const s = new Array(i);

    while (i--) s[i] = r[i].resolve(e, n);

    return s;
  }

  return [t.resolve(e, n)];
}

function jt(t) {
  return new Error(`AUR0015:${t.name}`);
}

const Ot = Object.freeze([]);
exports.emptyArray = Ot;
const kt = Object.freeze({});
exports.emptyObject = kt;

function It() {}

const Mt = G.createInterface("IPlatform");
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

exports.IPlatform = Mt;

function Tt(t, e, n, r) {
  var i = arguments.length,
      s = i < 3 ? e : null === r ? r = Object.getOwnPropertyDescriptor(e, n) : r,
      o;
  if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) s = Reflect.decorate(t, e, n, r);else for (var u = t.length - 1; u >= 0; u--) if (o = t[u]) s = (i < 3 ? o(s) : i > 3 ? o(e, n, s) : o(e, n)) || s;
  return i > 3 && s && Object.defineProperty(e, n, s), s;
}

function Ft(t, e) {
  return function (n, r) {
    e(n, r, t);
  };
}

var Ut;
exports.LogLevel = Ut;

(function (t) {
  t[t["trace"] = 0] = "trace";
  t[t["debug"] = 1] = "debug";
  t[t["info"] = 2] = "info";
  t[t["warn"] = 3] = "warn";
  t[t["error"] = 4] = "error";
  t[t["fatal"] = 5] = "fatal";
  t[t["none"] = 6] = "none";
})(Ut || (exports.LogLevel = Ut = {}));

var Lt;
exports.ColorOptions = Lt;

(function (t) {
  t[t["noColors"] = 0] = "noColors";
  t[t["colors"] = 1] = "colors";
})(Lt || (exports.ColorOptions = Lt = {}));

const Pt = G.createInterface("ILogConfig", t => t.instance(new LogConfig(0, 3)));
exports.ILogConfig = Pt;
const Dt = G.createInterface("ISink");
exports.ISink = Dt;
const St = G.createInterface("ILogEventFactory", t => t.singleton(_t));
exports.ILogEventFactory = St;
const Nt = G.createInterface("ILogger", t => t.singleton(Vt));
exports.ILogger = Nt;
const Wt = G.createInterface("ILogScope");
const Bt = Object.freeze({
  key: F("logger-sink-handles"),

  define(t, e) {
    k(this.key, e.handles, t.prototype);
    return t;
  },

  getHandles(e) {
    return _metadata.Metadata.get(this.key, e);
  }

});

function Qt(t) {
  return function (e) {
    return Bt.define(e, t);
  };
}

const xt = C({
  red(t) {
    return `[31m${t}[39m`;
  },

  green(t) {
    return `[32m${t}[39m`;
  },

  yellow(t) {
    return `[33m${t}[39m`;
  },

  blue(t) {
    return `[34m${t}[39m`;
  },

  magenta(t) {
    return `[35m${t}[39m`;
  },

  cyan(t) {
    return `[36m${t}[39m`;
  },

  white(t) {
    return `[37m${t}[39m`;
  },

  grey(t) {
    return `[90m${t}[39m`;
  }

});
exports.format = xt;

class LogConfig {
  constructor(t, e) {
    this.colorOptions = t;
    this.level = e;
  }

}

exports.LogConfig = LogConfig;

const zt = function () {
  const t = [C({
    TRC: "TRC",
    DBG: "DBG",
    INF: "INF",
    WRN: "WRN",
    ERR: "ERR",
    FTL: "FTL",
    QQQ: "???"
  }), C({
    TRC: xt.grey("TRC"),
    DBG: xt.grey("DBG"),
    INF: xt.white("INF"),
    WRN: xt.yellow("WRN"),
    ERR: xt.red("ERR"),
    FTL: xt.red("FTL"),
    QQQ: xt.grey("???")
  })];
  return function (e, n) {
    if (e <= 0) return t[n].TRC;
    if (e <= 1) return t[n].DBG;
    if (e <= 2) return t[n].INF;
    if (e <= 3) return t[n].WRN;
    if (e <= 4) return t[n].ERR;
    if (e <= 5) return t[n].FTL;
    return t[n].QQQ;
  };
}();

function Gt(t, e) {
  if (0 === e) return t.join(".");
  return t.map(xt.cyan).join(".");
}

function Kt(t, e) {
  if (0 === e) return new Date(t).toISOString();
  return xt.grey(new Date(t).toISOString());
}

class DefaultLogEvent {
  constructor(t, e, n, r, i, s) {
    this.severity = t;
    this.message = e;
    this.optionalParams = n;
    this.scope = r;
    this.colorOptions = i;
    this.timestamp = s;
  }

  toString() {
    const {
      severity: t,
      message: e,
      scope: n,
      colorOptions: r,
      timestamp: i
    } = this;
    if (0 === n.length) return `${Kt(i, r)} [${zt(t, r)}] ${e}`;
    return `${Kt(i, r)} [${zt(t, r)} ${Gt(n, r)}] ${e}`;
  }

}

exports.DefaultLogEvent = DefaultLogEvent;

let _t = class DefaultLogEventFactory {
  constructor(t) {
    this.config = t;
  }

  createLogEvent(t, e, n, r) {
    return new DefaultLogEvent(e, n, r, t.scope, this.config.colorOptions, Date.now());
  }

};

exports.DefaultLogEventFactory = _t;
exports.DefaultLogEventFactory = _t = Tt([Ft(0, Pt)], _t);
let Ht = class ConsoleSink {
  constructor(t) {
    const e = t.console;

    this.handleEvent = function t(n) {
      const r = n.optionalParams;

      if (void 0 === r || 0 === r.length) {
        const t = n.toString();

        switch (n.severity) {
          case 0:
          case 1:
            return e.debug(t);

          case 2:
            return e.info(t);

          case 3:
            return e.warn(t);

          case 4:
          case 5:
            return e.error(t);
        }
      } else {
        let t = n.toString();
        let i = 0;

        while (t.includes("%s")) t = t.replace("%s", String(r[i++]));

        switch (n.severity) {
          case 0:
          case 1:
            return e.debug(t, ...r.slice(i));

          case 2:
            return e.info(t, ...r.slice(i));

          case 3:
            return e.warn(t, ...r.slice(i));

          case 4:
          case 5:
            return e.error(t, ...r.slice(i));
        }
      }
    };
  }

  static register(t) {
    $t.singleton(Dt, ConsoleSink).register(t);
  }

};
exports.ConsoleSink = Ht;
exports.ConsoleSink = Ht = Tt([Ft(0, Mt)], Ht);
let Vt = class DefaultLogger {
  constructor(t, e, n, r = [], i = null) {
    var s, o, u, l, c, f;
    this.config = t;
    this.factory = e;
    this.scope = r;
    this.scopedLoggers = Object.create(null);
    let a;
    let h;
    let d;
    let v;
    let w;
    let g;

    if (null === i) {
      this.root = this;
      this.parent = this;
      a = this.traceSinks = [];
      h = this.debugSinks = [];
      d = this.infoSinks = [];
      v = this.warnSinks = [];
      w = this.errorSinks = [];
      g = this.fatalSinks = [];

      for (const t of n) {
        const e = Bt.getHandles(t);
        if (null !== (s = null === e || void 0 === e ? void 0 : e.includes(0)) && void 0 !== s ? s : true) a.push(t);
        if (null !== (o = null === e || void 0 === e ? void 0 : e.includes(1)) && void 0 !== o ? o : true) h.push(t);
        if (null !== (u = null === e || void 0 === e ? void 0 : e.includes(2)) && void 0 !== u ? u : true) d.push(t);
        if (null !== (l = null === e || void 0 === e ? void 0 : e.includes(3)) && void 0 !== l ? l : true) v.push(t);
        if (null !== (c = null === e || void 0 === e ? void 0 : e.includes(4)) && void 0 !== c ? c : true) w.push(t);
        if (null !== (f = null === e || void 0 === e ? void 0 : e.includes(5)) && void 0 !== f ? f : true) g.push(t);
      }
    } else {
      this.root = i.root;
      this.parent = i;
      a = this.traceSinks = i.traceSinks;
      h = this.debugSinks = i.debugSinks;
      d = this.infoSinks = i.infoSinks;
      v = this.warnSinks = i.warnSinks;
      w = this.errorSinks = i.errorSinks;
      g = this.fatalSinks = i.fatalSinks;
    }
  }

  trace(t, ...e) {
    if (this.config.level <= 0) this.emit(this.traceSinks, 0, t, e);
  }

  debug(t, ...e) {
    if (this.config.level <= 1) this.emit(this.debugSinks, 1, t, e);
  }

  info(t, ...e) {
    if (this.config.level <= 2) this.emit(this.infoSinks, 2, t, e);
  }

  warn(t, ...e) {
    if (this.config.level <= 3) this.emit(this.warnSinks, 3, t, e);
  }

  error(t, ...e) {
    if (this.config.level <= 4) this.emit(this.errorSinks, 4, t, e);
  }

  fatal(t, ...e) {
    if (this.config.level <= 5) this.emit(this.fatalSinks, 5, t, e);
  }

  scopeTo(t) {
    const e = this.scopedLoggers;
    let n = e[t];
    if (void 0 === n) n = e[t] = new DefaultLogger(this.config, this.factory, void 0, this.scope.concat(t), this);
    return n;
  }

  emit(t, e, n, r) {
    const i = I(n) ? n() : n;
    const s = this.factory.createLogEvent(this, e, i, r);

    for (let e = 0, n = t.length; e < n; ++e) t[e].handleEvent(s);
  }

};
exports.DefaultLogger = Vt;
Tt([m], Vt.prototype, "trace", null);
Tt([m], Vt.prototype, "debug", null);
Tt([m], Vt.prototype, "info", null);
Tt([m], Vt.prototype, "warn", null);
Tt([m], Vt.prototype, "error", null);
Tt([m], Vt.prototype, "fatal", null);
exports.DefaultLogger = Vt = Tt([Ft(0, Pt), Ft(1, St), Ft(2, nt(Dt)), Ft(3, it(Wt)), Ft(4, st)], Vt);
const qt = C({
  create({
    level: t = 3,
    colorOptions: e = 0,
    sinks: n = []
  } = {}) {
    return C({
      register(r) {
        r.register($t.instance(Pt, new LogConfig(e, t)));

        for (const t of n) if (I(t)) r.register($t.singleton(Dt, t));else r.register(t);

        return r;
      }

    });
  }

});
exports.LoggerConfiguration = qt;
const Jt = G.createInterface(t => t.singleton(ModuleLoader));
exports.IModuleLoader = Jt;

function Xt(t) {
  return t;
}

class ModuleTransformer {
  constructor(t) {
    this.$transform = t;
    this.A = new Map();
    this.j = new Map();
  }

  transform(t) {
    if (t instanceof Promise) return this.O(t);else if ("object" === typeof t && null !== t) return this.I(t);else throw new Error(`Invalid input: ${String(t)}. Expected Promise or Object.`);
  }

  O(t) {
    if (this.A.has(t)) return this.A.get(t);
    const e = t.then(t => this.I(t));
    this.A.set(t, e);
    void e.then(e => {
      this.A.set(t, e);
    });
    return e;
  }

  I(t) {
    if (this.j.has(t)) return this.j.get(t);
    const e = this.$transform(this.M(t));
    this.j.set(t, e);
    if (e instanceof Promise) void e.then(e => {
      this.j.set(t, e);
    });
    return e;
  }

  M(t) {
    let e;
    let n;
    let r;
    let i;
    const s = [];

    for (const o in t) {
      switch (typeof (e = t[o])) {
        case "object":
          if (null === e) continue;
          n = I(e.register);
          r = false;
          i = Ot;
          break;

        case "function":
          n = I(e.register);
          r = void 0 !== e.prototype;
          i = S.resource.getAll(e);
          break;

        default:
          continue;
      }

      s.push(new ModuleItem(o, e, n, r, i));
    }

    return new AnalyzedModule(t, s);
  }

}

class ModuleLoader {
  constructor() {
    this.transformers = new Map();
  }

  load(t, e = Xt) {
    const n = this.transformers;
    let r = n.get(e);
    if (void 0 === r) n.set(e, r = new ModuleTransformer(e));
    return r.transform(t);
  }

  dispose() {
    this.transformers.clear();
  }

}

class AnalyzedModule {
  constructor(t, e) {
    this.raw = t;
    this.items = e;
  }

}

exports.AnalyzedModule = AnalyzedModule;

class ModuleItem {
  constructor(t, e, n, r, i) {
    this.key = t;
    this.value = e;
    this.isRegistry = n;
    this.isConstructable = r;
    this.definitions = i;
  }

}

exports.ModuleItem = ModuleItem;

class Handler {
  constructor(t, e) {
    this.messageType = t;
    this.callback = e;
  }

  handle(t) {
    if (t instanceof this.messageType) this.callback.call(null, t);
  }

}

const Yt = G.createInterface("IEventAggregator", t => t.singleton(EventAggregator));
exports.IEventAggregator = Yt;

class EventAggregator {
  constructor() {
    this.eventLookup = {};
    this.messageHandlers = [];
  }

  publish(t, e) {
    if (!t) throw new Error(`Invalid channel name or instance: ${t}.`);

    if (M(t)) {
      let n = this.eventLookup[t];

      if (void 0 !== n) {
        n = n.slice();
        let r = n.length;

        while (r-- > 0) n[r](e, t);
      }
    } else {
      const e = this.messageHandlers.slice();
      let n = e.length;

      while (n-- > 0) e[n].handle(t);
    }
  }

  subscribe(t, e) {
    if (!t) throw new Error(`Invalid channel name or type: ${t}.`);
    let n;
    let r;

    if (M(t)) {
      if (void 0 === this.eventLookup[t]) this.eventLookup[t] = [];
      n = e;
      r = this.eventLookup[t];
    } else {
      n = new Handler(t, e);
      r = this.messageHandlers;
    }

    r.push(n);
    return {
      dispose() {
        const t = r.indexOf(n);
        if (-1 !== t) r.splice(t, 1);
      }

    };
  }

  subscribeOnce(t, e) {
    const n = this.subscribe(t, function (t, r) {
      n.dispose();
      e(t, r);
    });
    return n;
  }

}

exports.EventAggregator = EventAggregator;
});

;define.alias('@aurelia/kernel','@aurelia/kernel/dist/esm/index.js');
define('@aurelia/metadata/dist/esm/index.js',['require','exports','module'],function (require, exports, module) {
"use strict";

exports.__esModule = true;
exports.Metadata = void 0;
exports.applyMetadataPolyfill = S;
exports.isNullOrUndefined = e;
exports.isObject = t;
exports.metadata = g;

function t(t) {
  return "object" === typeof t && null !== t || "function" === typeof t;
}

function e(t) {
  return null === t || void 0 === t;
}

const n = new WeakMap();

function r(t, e, n, r, a) {
  return new TypeError(`${t}(${e.map(String).join(",")}) - Expected '${n}' to be of type ${a}, but got: ${Object.prototype.toString.call(r)} (${String(r)})`);
}

function a(t) {
  switch (typeof t) {
    case "undefined":
    case "string":
    case "symbol":
      return t;

    default:
      return `${t}`;
  }
}

function o(t) {
  switch (typeof t) {
    case "string":
    case "symbol":
      return t;

    default:
      return `${t}`;
  }
}

function i(t) {
  switch (typeof t) {
    case "undefined":
    case "string":
    case "symbol":
      return t;

    default:
      throw new TypeError(`Invalid metadata propertyKey: ${t}.`);
  }
}

function u(t, e, r) {
  let a = n.get(t);

  if (void 0 === a) {
    if (!r) return;
    a = new Map();
    n.set(t, a);
  }

  let o = a.get(e);

  if (void 0 === o) {
    if (!r) return;
    o = new Map();
    a.set(e, o);
  }

  return o;
}

function c(t, e, n) {
  const r = u(e, n, false);
  if (void 0 === r) return false;
  return r.has(t);
}

function f(t, e, n) {
  if (c(t, e, n)) return true;
  const r = Object.getPrototypeOf(e);
  if (null !== r) return f(t, r, n);
  return false;
}

function s(t, e, n) {
  const r = u(e, n, false);
  if (void 0 === r) return;
  return r.get(t);
}

function l(t, e, n) {
  if (c(t, e, n)) return s(t, e, n);
  const r = Object.getPrototypeOf(e);
  if (null !== r) return l(t, r, n);
  return;
}

function d(t, e, n, r) {
  const a = u(n, r, true);
  a.set(t, e);
}

function w(t, e) {
  const n = [];
  const r = u(t, e, false);
  if (void 0 === r) return n;
  const a = r.keys();
  let o = 0;

  for (const t of a) {
    n[o] = t;
    ++o;
  }

  return n;
}

function y(t, e) {
  const n = w(t, e);
  const r = Object.getPrototypeOf(t);
  if (null === r) return n;
  const a = y(r, e);
  const o = n.length;
  if (0 === o) return a;
  const i = a.length;
  if (0 === i) return n;
  const u = new Set();
  const c = [];
  let f = 0;
  let s;

  for (let t = 0; t < o; ++t) {
    s = n[t];

    if (!u.has(s)) {
      u.add(s);
      c[f] = s;
      ++f;
    }
  }

  for (let t = 0; t < i; ++t) {
    s = a[t];

    if (!u.has(s)) {
      u.add(s);
      c[f] = s;
      ++f;
    }
  }

  return c;
}

function h(t, e, n) {
  const r = u(t, n, false);
  if (void 0 === r) return false;
  return r.delete(e);
}

function g(e, n) {
  function a(a, o) {
    if (!t(a)) throw r("@metadata", [e, n, a, o], "target", a, "Object or Function");
    d(e, n, a, i(o));
  }

  return a;
}

function p(n, a, i, u) {
  if (void 0 !== i) {
    if (!Array.isArray(n)) throw r("Metadata.decorate", [n, a, i, u], "decorators", n, "Array");
    if (!t(a)) throw r("Metadata.decorate", [n, a, i, u], "target", a, "Object or Function");
    if (!t(u) && !e(u)) throw r("Metadata.decorate", [n, a, i, u], "attributes", u, "Object, Function, null, or undefined");
    if (null === u) u = void 0;
    i = o(i);
    return b(n, a, i, u);
  } else {
    if (!Array.isArray(n)) throw r("Metadata.decorate", [n, a, i, u], "decorators", n, "Array");
    if ("function" !== typeof a) throw r("Metadata.decorate", [n, a, i, u], "target", a, "Function");
    return M(n, a);
  }
}

function M(t, n) {
  for (let a = t.length - 1; a >= 0; --a) {
    const o = t[a];
    const i = o(n);

    if (!e(i)) {
      if ("function" !== typeof i) throw r("DecorateConstructor", [t, n], "decorated", i, "Function, null, or undefined");
      n = i;
    }
  }

  return n;
}

function b(n, a, o, i) {
  for (let u = n.length - 1; u >= 0; --u) {
    const c = n[u];
    const f = c(a, o, i);

    if (!e(f)) {
      if (!t(f)) throw r("DecorateProperty", [n, a, o, i], "decorated", f, "Object, Function, null, or undefined");
      i = f;
    }
  }

  return i;
}

function O(e, n, o, i) {
  if (!t(o)) throw r("Metadata.define", [e, n, o, i], "target", o, "Object or Function");
  return d(e, n, o, a(i));
}

function m(e, n, o) {
  if (!t(n)) throw r("Metadata.has", [e, n, o], "target", n, "Object or Function");
  return f(e, n, a(o));
}

function j(e, n, o) {
  if (!t(n)) throw r("Metadata.hasOwn", [e, n, o], "target", n, "Object or Function");
  return c(e, n, a(o));
}

function v(e, n, o) {
  if (!t(n)) throw r("Metadata.get", [e, n, o], "target", n, "Object or Function");
  return l(e, n, a(o));
}

function $(e, n, o) {
  if (!t(n)) throw r("Metadata.getOwn", [e, n, o], "target", n, "Object or Function");
  return s(e, n, a(o));
}

function F(e, n) {
  if (!t(e)) throw r("Metadata.getKeys", [e, n], "target", e, "Object or Function");
  return y(e, a(n));
}

function K(e, n) {
  if (!t(e)) throw r("Metadata.getOwnKeys", [e, n], "target", e, "Object or Function");
  return w(e, a(n));
}

function E(e, n, o) {
  if (!t(n)) throw r("Metadata.delete", [e, n, o], "target", n, "Object or Function");
  return h(n, e, a(o));
}

const A = {
  define: O,
  has: m,
  hasOwn: j,
  get: v,
  getOwn: $,
  getKeys: F,
  getOwnKeys: K,
  delete: E
};
exports.Metadata = A;

function k(t, e, n, r, a) {
  if (!Reflect.defineProperty(t, e, {
    writable: r,
    enumerable: false,
    configurable: a,
    value: n
  })) throw new Error(`Unable to apply metadata polyfill: could not add property '${e}' to the global Reflect object`);
}

const R = "[[$au]]";

function C(t) {
  return R in t;
}

function I(t, e, r) {
  k(t, R, n, e, r);
  k(t, "metadata", g, e, r);
  k(t, "decorate", p, e, r);
  k(t, "defineMetadata", O, e, r);
  k(t, "hasMetadata", m, e, r);
  k(t, "hasOwnMetadata", j, e, r);
  k(t, "getMetadata", v, e, r);
  k(t, "getOwnMetadata", $, e, r);
  k(t, "getMetadataKeys", F, e, r);
  k(t, "getOwnMetadataKeys", K, e, r);
  k(t, "deleteMetadata", E, e, r);
}

function S(t, e = true, r = false, a = true, o = true) {
  if (C(t)) {
    if (t[R] === n) return;
    throw new Error(`Conflicting @aurelia/metadata module import detected. Please make sure you have the same version of all Aurelia packages in your dependency tree.`);
  }

  const i = ["metadata", "decorate", "defineMetadata", "hasMetadata", "hasOwnMetadata", "getMetadata", "getOwnMetadata", "getMetadataKeys", "getOwnMetadataKeys", "deleteMetadata"].filter(function (t) {
    return t in Reflect;
  });

  if (i.length > 0) {
    if (e) {
      const t = i.map(function (t) {
        const e = `${Reflect[t].toString().slice(0, 100)}...`;
        return `${t}:\n${e}`;
      }).join("\n\n");
      throw new Error(`Conflicting reflect.metadata polyfill found. If you have 'reflect-metadata' or any other reflect polyfill imported, please remove it, if not (or if you must use a specific polyfill) please file an issue at https://github.com/aurelia/aurelia/issues so that we can look into compatibility options for this scenario. Implementation summary:\n\n${t}`);
    } else if (r) I(t, a, o);
  } else I(t, a, o);
}
});

;define.alias('@aurelia/metadata','@aurelia/metadata/dist/esm/index.js');
define('@aurelia/platform-browser/dist/esm/index.js',['require','exports','module','@aurelia/platform'],function (require, exports, module) {
"use strict";

exports.__esModule = true;
exports.BrowserPlatform = void 0;

var _platform = require("@aurelia/platform");

const s = new Map();

function e(t) {
  return function i() {
    throw new Error(`The PLATFORM did not receive a valid reference to the global function '${t}'.`);
  };
}

class BrowserPlatform extends _platform.Platform {
  constructor(t, s = {}) {
    super(t, s);
    this.t = false;
    this.i = -1;
    this.h = false;
    this.u = -1;
    ("Node,Element,HTMLElement,CustomEvent,CSSStyleSheet,ShadowRoot,MutationObserver," + "window,document,location,history,navigator,customElements").split(",").forEach(i => {
      this[i] = i in s ? s[i] : t[i];
    });
    "fetch,requestAnimationFrame,cancelAnimationFrame".split(",").forEach(i => {
      var h, r;
      this[i] = i in s ? s[i] : null !== (r = null === (h = t[i]) || void 0 === h ? void 0 : h.bind(t)) && void 0 !== r ? r : e(i);
    });
    this.flushDomRead = this.flushDomRead.bind(this);
    this.flushDomWrite = this.flushDomWrite.bind(this);
    this.domReadQueue = new _platform.TaskQueue(this, this.requestDomRead.bind(this), this.cancelDomRead.bind(this));
    this.domWriteQueue = new _platform.TaskQueue(this, this.requestDomWrite.bind(this), this.cancelDomWrite.bind(this));
  }

  static getOrCreate(t, i = {}) {
    let e = s.get(t);
    if (void 0 === e) s.set(t, e = new BrowserPlatform(t, i));
    return e;
  }

  static set(t, i) {
    s.set(t, i);
  }

  requestDomRead() {
    this.t = true;
    if (-1 === this.u) this.u = this.requestAnimationFrame(this.flushDomWrite);
  }

  cancelDomRead() {
    this.t = false;

    if (this.i > -1) {
      this.clearTimeout(this.i);
      this.i = -1;
    }

    if (false === this.h && this.u > -1) {
      this.cancelAnimationFrame(this.u);
      this.u = -1;
    }
  }

  flushDomRead() {
    this.i = -1;

    if (true === this.t) {
      this.t = false;
      this.domReadQueue.flush();
    }
  }

  requestDomWrite() {
    this.h = true;
    if (-1 === this.u) this.u = this.requestAnimationFrame(this.flushDomWrite);
  }

  cancelDomWrite() {
    this.h = false;

    if (this.u > -1 && (false === this.t || this.i > -1)) {
      this.cancelAnimationFrame(this.u);
      this.u = -1;
    }
  }

  flushDomWrite() {
    this.u = -1;

    if (true === this.h) {
      this.h = false;
      this.domWriteQueue.flush();
    }

    if (true === this.t && -1 === this.i) this.i = this.setTimeout(this.flushDomRead, 0);
  }

}

exports.BrowserPlatform = BrowserPlatform;
});

;define.alias('@aurelia/platform-browser','@aurelia/platform-browser/dist/esm/index.js');
define('@aurelia/platform/dist/esm/index.js',['require','exports','module'],function (require, exports, module) {
"use strict";

exports.__esModule = true;
exports.TaskStatus = exports.TaskQueuePriority = exports.TaskQueue = exports.TaskAbortError = exports.Task = exports.Platform = void 0;
const t = new Map();

function s(t) {
  return function s() {
    throw new Error(`The PLATFORM did not receive a valid reference to the global function '${t}'.`);
  };
}

class Platform {
  constructor(t, i = {}) {
    var e, h, r, n, o, a, l, c, u, f, d, v, w;
    this.macroTaskRequested = false;
    this.macroTaskHandle = -1;
    this.globalThis = t;
    this.decodeURI = "decodeURI" in i ? i.decodeURI : t.decodeURI;
    this.decodeURIComponent = "decodeURIComponent" in i ? i.decodeURIComponent : t.decodeURIComponent;
    this.encodeURI = "encodeURI" in i ? i.encodeURI : t.encodeURI;
    this.encodeURIComponent = "encodeURIComponent" in i ? i.encodeURIComponent : t.encodeURIComponent;
    this.Date = "Date" in i ? i.Date : t.Date;
    this.Reflect = "Reflect" in i ? i.Reflect : t.Reflect;
    this.clearInterval = "clearInterval" in i ? i.clearInterval : null !== (h = null === (e = t.clearInterval) || void 0 === e ? void 0 : e.bind(t)) && void 0 !== h ? h : s("clearInterval");
    this.clearTimeout = "clearTimeout" in i ? i.clearTimeout : null !== (n = null === (r = t.clearTimeout) || void 0 === r ? void 0 : r.bind(t)) && void 0 !== n ? n : s("clearTimeout");
    this.queueMicrotask = "queueMicrotask" in i ? i.queueMicrotask : null !== (a = null === (o = t.queueMicrotask) || void 0 === o ? void 0 : o.bind(t)) && void 0 !== a ? a : s("queueMicrotask");
    this.setInterval = "setInterval" in i ? i.setInterval : null !== (c = null === (l = t.setInterval) || void 0 === l ? void 0 : l.bind(t)) && void 0 !== c ? c : s("setInterval");
    this.setTimeout = "setTimeout" in i ? i.setTimeout : null !== (f = null === (u = t.setTimeout) || void 0 === u ? void 0 : u.bind(t)) && void 0 !== f ? f : s("setTimeout");
    this.console = "console" in i ? i.console : t.console;
    this.performanceNow = "performanceNow" in i ? i.performanceNow : null !== (w = null === (v = null === (d = t.performance) || void 0 === d ? void 0 : d.now) || void 0 === v ? void 0 : v.bind(t.performance)) && void 0 !== w ? w : s("performance.now");
    this.flushMacroTask = this.flushMacroTask.bind(this);
    this.taskQueue = new TaskQueue(this, this.requestMacroTask.bind(this), this.cancelMacroTask.bind(this));
  }

  static getOrCreate(s, i = {}) {
    let e = t.get(s);
    if (void 0 === e) t.set(s, e = new Platform(s, i));
    return e;
  }

  static set(s, i) {
    t.set(s, i);
  }

  requestMacroTask() {
    this.macroTaskRequested = true;
    if (-1 === this.macroTaskHandle) this.macroTaskHandle = this.setTimeout(this.flushMacroTask, 0);
  }

  cancelMacroTask() {
    this.macroTaskRequested = false;

    if (this.macroTaskHandle > -1) {
      this.clearTimeout(this.macroTaskHandle);
      this.macroTaskHandle = -1;
    }
  }

  flushMacroTask() {
    this.macroTaskHandle = -1;

    if (true === this.macroTaskRequested) {
      this.macroTaskRequested = false;
      this.taskQueue.flush();
    }
  }

}

exports.Platform = Platform;

function i(t) {
  return t.persistent;
}

class TaskQueue {
  constructor(t, s, i) {
    this.platform = t;
    this.$request = s;
    this.$cancel = i;
    this.t = void 0;
    this.i = 0;
    this.processing = [];
    this.pending = [];
    this.delayed = [];
    this.flushRequested = false;
    this.h = void 0;
    this.taskPool = [];
    this.u = 0;
    this.T = 0;
    this.$ = 0;

    this.I = () => {
      if (!this.flushRequested) {
        this.flushRequested = true;
        this.T = this.platform.performanceNow();
        this.$request();
      }
    };

    this.M = new Tracer(t.console);
  }

  get isEmpty() {
    return 0 === this.i && 0 === this.processing.length && 0 === this.pending.length && 0 === this.delayed.length;
  }

  get P() {
    return 0 === this.i && this.processing.every(i) && this.pending.every(i) && this.delayed.every(i);
  }

  flush(t = this.platform.performanceNow()) {
    this.flushRequested = false;
    this.$ = t;

    if (void 0 === this.t) {
      if (this.pending.length > 0) {
        this.processing.push(...this.pending);
        this.pending.length = 0;
      }

      if (this.delayed.length > 0) {
        let s = -1;

        while (++s < this.delayed.length && this.delayed[s].queueTime <= t);

        this.processing.push(...this.delayed.splice(0, s));
      }

      let s;

      while (this.processing.length > 0) {
        (s = this.processing.shift()).run();
        if (1 === s.status) if (true === s.suspend) {
          this.t = s;
          this.I();
          return;
        } else ++this.i;
      }

      if (this.pending.length > 0) {
        this.processing.push(...this.pending);
        this.pending.length = 0;
      }

      if (this.delayed.length > 0) {
        let s = -1;

        while (++s < this.delayed.length && this.delayed[s].queueTime <= t);

        this.processing.push(...this.delayed.splice(0, s));
      }

      if (this.processing.length > 0 || this.delayed.length > 0 || this.i > 0) this.I();

      if (void 0 !== this.h && this.P) {
        const t = this.h;
        this.h = void 0;
        t.resolve();
      }
    } else this.I();
  }

  cancel() {
    if (this.flushRequested) {
      this.$cancel();
      this.flushRequested = false;
    }
  }

  async yield() {
    if (this.isEmpty) ;else {
      if (void 0 === this.h) this.h = u();
      await this.h;
    }
  }

  queueTask(t, s) {
    const {
      delay: i,
      preempt: e,
      persistent: h,
      reusable: r,
      suspend: n
    } = { ...o,
      ...s
    };

    if (e) {
      if (i > 0) throw new Error(`Invalid arguments: preempt cannot be combined with a greater-than-zero delay`);
      if (h) throw new Error(`Invalid arguments: preempt cannot be combined with persistent`);
    }

    if (0 === this.processing.length) this.I();
    const a = this.platform.performanceNow();
    let l;

    if (r) {
      const s = this.taskPool;
      const o = this.u - 1;

      if (o >= 0) {
        l = s[o];
        s[o] = void 0;
        this.u = o;
        l.reuse(a, i, e, h, n, t);
      } else l = new Task(this.M, this, a, a + i, e, h, n, r, t);
    } else l = new Task(this.M, this, a, a + i, e, h, n, r, t);

    if (e) this.processing[this.processing.length] = l;else if (0 === i) this.pending[this.pending.length] = l;else this.delayed[this.delayed.length] = l;
    return l;
  }

  remove(t) {
    let s = this.processing.indexOf(t);

    if (s > -1) {
      this.processing.splice(s, 1);
      return;
    }

    s = this.pending.indexOf(t);

    if (s > -1) {
      this.pending.splice(s, 1);
      return;
    }

    s = this.delayed.indexOf(t);

    if (s > -1) {
      this.delayed.splice(s, 1);
      return;
    }

    throw new Error(`Task #${t.id} could not be found`);
  }

  returnToPool(t) {
    this.taskPool[this.u++] = t;
  }

  resetPersistentTask(t) {
    t.reset(this.platform.performanceNow());
    if (t.createdTime === t.queueTime) this.pending[this.pending.length] = t;else this.delayed[this.delayed.length] = t;
  }

  completeAsyncTask(t) {
    var s;

    if (true === t.suspend) {
      if (this.t !== t) throw new Error(`Async task completion mismatch: suspenderTask=${null === (s = this.t) || void 0 === s ? void 0 : s.id}, task=${t.id}`);
      this.t = void 0;
    } else --this.i;

    if (void 0 !== this.h && this.P) {
      const t = this.h;
      this.h = void 0;
      t.resolve();
    }

    if (this.isEmpty) this.cancel();
  }

}

exports.TaskQueue = TaskQueue;

class TaskAbortError extends Error {
  constructor(t) {
    super("Task was canceled.");
    this.task = t;
  }

}

exports.TaskAbortError = TaskAbortError;
let e = 0;
var h;
exports.TaskStatus = h;

(function (t) {
  t[t["pending"] = 0] = "pending";
  t[t["running"] = 1] = "running";
  t[t["completed"] = 2] = "completed";
  t[t["canceled"] = 3] = "canceled";
})(h || (exports.TaskStatus = h = {}));

class Task {
  constructor(t, s, i, h, r, n, o, a, l) {
    this.taskQueue = s;
    this.createdTime = i;
    this.queueTime = h;
    this.preempt = r;
    this.persistent = n;
    this.suspend = o;
    this.reusable = a;
    this.callback = l;
    this.id = ++e;
    this.R = void 0;
    this.A = void 0;
    this.q = void 0;
    this.C = 0;
    this.M = t;
  }

  get result() {
    const t = this.q;
    if (void 0 === t) switch (this.C) {
      case 0:
        {
          const t = this.q = u();
          this.R = t.resolve;
          this.A = t.reject;
          return t;
        }

      case 1:
        throw new Error("Trying to await task from within task will cause a deadlock.");

      case 2:
        return this.q = Promise.resolve();

      case 3:
        return this.q = Promise.reject(new TaskAbortError(this));
    }
    return t;
  }

  get status() {
    return this.C;
  }

  run(t = this.taskQueue.platform.performanceNow()) {
    if (0 !== this.C) throw new Error(`Cannot run task in ${this.C} state`);
    const {
      persistent: s,
      reusable: i,
      taskQueue: e,
      callback: h,
      R: r,
      A: n,
      createdTime: o
    } = this;
    let a;
    this.C = 1;

    try {
      a = h(t - o);
      if (a instanceof Promise) a.then(t => {
        if (this.persistent) e["resetPersistentTask"](this);else {
          if (s) this.C = 3;else this.C = 2;
          this.dispose();
        }
        e["completeAsyncTask"](this);
        if (false && this.M.enabled) ;
        if (void 0 !== r) r(t);
        if (!this.persistent && i) e["returnToPool"](this);
      }).catch(t => {
        if (!this.persistent) this.dispose();
        e["completeAsyncTask"](this);
        if (false && this.M.enabled) ;
        if (void 0 !== n) n(t);else throw t;
      });else {
        if (this.persistent) e["resetPersistentTask"](this);else {
          if (s) this.C = 3;else this.C = 2;
          this.dispose();
        }
        if (false && this.M.enabled) ;
        if (void 0 !== r) r(a);
        if (!this.persistent && i) e["returnToPool"](this);
      }
    } catch (t) {
      if (!this.persistent) this.dispose();
      if (void 0 !== n) n(t);else throw t;
    }
  }

  cancel() {
    if (0 === this.C) {
      const t = this.taskQueue;
      const s = this.reusable;
      const i = this.A;
      t.remove(this);
      if (t.isEmpty) t.cancel();
      this.C = 3;
      this.dispose();
      if (s) t["returnToPool"](this);
      if (void 0 !== i) i(new TaskAbortError(this));
      return true;
    } else if (1 === this.C && this.persistent) {
      this.persistent = false;
      return true;
    }

    return false;
  }

  reset(t) {
    const s = this.queueTime - this.createdTime;
    this.createdTime = t;
    this.queueTime = t + s;
    this.C = 0;
    this.R = void 0;
    this.A = void 0;
    this.q = void 0;
  }

  reuse(t, s, i, e, h, r) {
    this.createdTime = t;
    this.queueTime = t + s;
    this.preempt = i;
    this.persistent = e;
    this.suspend = h;
    this.callback = r;
    this.C = 0;
  }

  dispose() {
    this.callback = void 0;
    this.R = void 0;
    this.A = void 0;
    this.q = void 0;
  }

}

exports.Task = Task;

function r(t) {
  switch (t) {
    case 0:
      return "pending";

    case 1:
      return "running";

    case 3:
      return "canceled";

    case 2:
      return "completed";
  }
}

class Tracer {
  constructor(t) {
    this.console = t;
    this.enabled = false;
    this.depth = 0;
  }

  enter(t, s) {
    this.log(`${"  ".repeat(this.depth++)}> `, t, s);
  }

  leave(t, s) {
    this.log(`${"  ".repeat(--this.depth)}< `, t, s);
  }

  trace(t, s) {
    this.log(`${"  ".repeat(this.depth)}- `, t, s);
  }

  log(t, s, i) {
    if (s instanceof TaskQueue) {
      const e = s["processing"].length;
      const h = s["pending"].length;
      const r = s["delayed"].length;
      const n = s["flushRequested"];
      const o = !!s.t;
      const a = `processing=${e} pending=${h} delayed=${r} flushReq=${n} susTask=${o}`;
      this.console.log(`${t}[Q.${i}] ${a}`);
    } else {
      const e = s["id"];
      const h = Math.round(10 * s["createdTime"]) / 10;
      const n = Math.round(10 * s["queueTime"]) / 10;
      const o = s["preempt"];
      const a = s["reusable"];
      const l = s["persistent"];
      const c = s["suspend"];
      const u = r(s["C"]);
      const f = `id=${e} created=${h} queue=${n} preempt=${o} persistent=${l} reusable=${a} status=${u} suspend=${c}`;
      this.console.log(`${t}[T.${i}] ${f}`);
    }
  }

}

var n;
exports.TaskQueuePriority = n;

(function (t) {
  t[t["render"] = 0] = "render";
  t[t["macroTask"] = 1] = "macroTask";
  t[t["postRender"] = 2] = "postRender";
})(n || (exports.TaskQueuePriority = n = {}));

const o = {
  delay: 0,
  preempt: false,
  persistent: false,
  reusable: true,
  suspend: false
};
let a;
let l;

function c(t, s) {
  a = t;
  l = s;
}

function u() {
  const t = new Promise(c);
  t.resolve = a;
  t.reject = l;
  return t;
}
});

;define.alias('@aurelia/platform','@aurelia/platform/dist/esm/index.js');
define('@aurelia/route-recognizer/dist/esm/index.js',['require','exports','module'],function (require, exports, module) {
"use strict";

exports.__esModule = true;
exports.RouteRecognizer = exports.RecognizedRoute = exports.Endpoint = exports.ConfigurableRoute = void 0;

class ConfigurableRoute {
  constructor(t, s, n) {
    this.path = t;
    this.caseSensitive = s;
    this.handler = n;
  }

}

exports.ConfigurableRoute = ConfigurableRoute;

class Endpoint {
  constructor(t, s) {
    this.route = t;
    this.paramNames = s;
  }

}

exports.Endpoint = Endpoint;

class RecognizedRoute {
  constructor(t, s) {
    this.endpoint = t;
    this.params = s;
  }

}

exports.RecognizedRoute = RecognizedRoute;

class Candidate {
  constructor(t, s, n, e) {
    var i;
    this.chars = t;
    this.states = s;
    this.skippedStates = n;
    this.result = e;
    this.head = s[s.length - 1];
    this.endpoint = null === (i = this.head) || void 0 === i ? void 0 : i.endpoint;
  }

  advance(t) {
    const {
      chars: s,
      states: n,
      skippedStates: e,
      result: i
    } = this;
    let o = null;
    let r = 0;
    const l = n[n.length - 1];

    function u(c, h) {
      if (c.isMatch(t)) if (1 === ++r) o = c;else i.add(new Candidate(s.concat(t), n.concat(c), null === h ? e : e.concat(h), i));

      if (null === l.segment && c.isOptional && null !== c.nextStates) {
        if (c.nextStates.length > 1) throw new Error(`${c.nextStates.length} nextStates`);
        const t = c.nextStates[0];
        if (!t.isSeparator) throw new Error(`Not a separator`);
        if (null !== t.nextStates) for (const s of t.nextStates) u(s, c);
      }
    }

    if (l.isDynamic) u(l, null);
    if (null !== l.nextStates) for (const t of l.nextStates) u(t, null);

    if (null !== o) {
      n.push(this.head = o);
      s.push(t);
      if (null !== o.endpoint) this.endpoint = o.endpoint;
    }

    if (0 === r) i.remove(this);
  }

  finalize() {
    function t(s, n) {
      const e = n.nextStates;
      if (null !== e) if (1 === e.length && null === e[0].segment) t(s, e[0]);else for (const n of e) if (n.isOptional && null !== n.endpoint) {
        s.push(n);
        if (null !== n.nextStates) for (const e of n.nextStates) t(s, e);
        break;
      }
    }

    t(this.skippedStates, this.head);
  }

  getParams() {
    const {
      states: t,
      chars: s,
      endpoint: n
    } = this;
    const e = {};

    for (const t of n.paramNames) e[t] = void 0;

    for (let n = 0, i = t.length; n < i; ++n) {
      const i = t[n];

      if (i.isDynamic) {
        const t = i.segment.name;
        if (void 0 === e[t]) e[t] = s[n];else e[t] += s[n];
      }
    }

    return e;
  }

  compareTo(t) {
    const s = this.states;
    const n = t.states;

    for (let t = 0, e = 0, i = Math.max(s.length, n.length); t < i; ++t) {
      let i = s[t];
      if (void 0 === i) return 1;
      let o = n[e];
      if (void 0 === o) return -1;
      let r = i.segment;
      let l = o.segment;

      if (null === r) {
        if (null === l) {
          ++e;
          continue;
        }

        if (void 0 === (i = s[++t])) return 1;
        r = i.segment;
      } else if (null === l) {
        if (void 0 === (o = n[++e])) return -1;
        l = o.segment;
      }

      if (r.kind < l.kind) return 1;
      if (r.kind > l.kind) return -1;
      ++e;
    }

    const e = this.skippedStates;
    const i = t.skippedStates;
    const o = e.length;
    const r = i.length;
    if (o < r) return 1;
    if (o > r) return -1;

    for (let t = 0; t < o; ++t) {
      const s = e[t];
      const n = i[t];
      if (s.length < n.length) return 1;
      if (s.length > n.length) return -1;
    }

    return 0;
  }

}

function t(t) {
  return null !== t.head.endpoint;
}

function s(t, s) {
  return t.compareTo(s);
}

class RecognizeResult {
  constructor(t) {
    this.candidates = [];
    this.candidates = [new Candidate([""], [t], [], this)];
  }

  get isEmpty() {
    return 0 === this.candidates.length;
  }

  getSolution() {
    const n = this.candidates.filter(t);
    if (0 === n.length) return null;

    for (const t of n) t.finalize();

    n.sort(s);
    return n[0];
  }

  add(t) {
    this.candidates.push(t);
  }

  remove(t) {
    this.candidates.splice(this.candidates.indexOf(t), 1);
  }

  advance(t) {
    const s = this.candidates.slice();

    for (const n of s) n.advance(t);
  }

}

class RouteRecognizer {
  constructor() {
    this.rootState = new State(null, null, "");
    this.cache = new Map();
  }

  add(t) {
    if (t instanceof Array) for (const s of t) this.$add(s);else this.$add(t);
    this.cache.clear();
  }

  $add(t) {
    const s = t.path;
    const e = new ConfigurableRoute(t.path, true === t.caseSensitive, t.handler);
    const i = "" === s ? [""] : s.split("/").filter(n);
    const o = [];
    let r = this.rootState;

    for (const t of i) {
      r = r.append(null, "/");

      switch (t.charAt(0)) {
        case ":":
          {
            const s = t.endsWith("?");
            const n = s ? t.slice(1, -1) : t.slice(1);
            o.push(n);
            r = new DynamicSegment(n, s).appendTo(r);
            break;
          }

        case "*":
          {
            const s = t.slice(1);
            o.push(s);
            r = new StarSegment(s).appendTo(r);
            break;
          }

        default:
          r = new StaticSegment(t, e.caseSensitive).appendTo(r);
          break;
      }
    }

    const l = new Endpoint(e, o);
    r.setEndpoint(l);
  }

  recognize(t) {
    let s = this.cache.get(t);
    if (void 0 === s) this.cache.set(t, s = this.$recognize(t));
    return s;
  }

  $recognize(t) {
    t = decodeURI(t);
    if (!t.startsWith("/")) t = `/${t}`;
    if (t.length > 1 && t.endsWith("/")) t = t.slice(0, -1);
    const s = new RecognizeResult(this.rootState);

    for (let n = 0, e = t.length; n < e; ++n) {
      const e = t.charAt(n);
      s.advance(e);
      if (s.isEmpty) return null;
    }

    const n = s.getSolution();
    if (null === n) return null;
    const {
      endpoint: e
    } = n;
    const i = n.getParams();
    return new RecognizedRoute(e, i);
  }

}

exports.RouteRecognizer = RouteRecognizer;

class State {
  constructor(t, s, n) {
    this.prevState = t;
    this.segment = s;
    this.value = n;
    this.nextStates = null;
    this.endpoint = null;

    switch (null === s || void 0 === s ? void 0 : s.kind) {
      case 2:
        this.length = t.length + 1;
        this.isSeparator = false;
        this.isDynamic = true;
        this.isOptional = s.optional;
        break;

      case 1:
        this.length = t.length + 1;
        this.isSeparator = false;
        this.isDynamic = true;
        this.isOptional = false;
        break;

      case 3:
        this.length = t.length + 1;
        this.isSeparator = false;
        this.isDynamic = false;
        this.isOptional = false;
        break;

      case void 0:
        this.length = null === t ? 0 : t.length;
        this.isSeparator = true;
        this.isDynamic = false;
        this.isOptional = false;
        break;
    }
  }

  append(t, s) {
    let n;
    let e = this.nextStates;

    if (null === e) {
      n = void 0;
      e = this.nextStates = [];
    } else if (null === t) n = e.find(t => t.value === s);else n = e.find(s => {
      var n;
      return null === (n = s.segment) || void 0 === n ? void 0 : n.equals(t);
    });

    if (void 0 === n) e.push(n = new State(this, t, s));
    return n;
  }

  setEndpoint(t) {
    if (null !== this.endpoint) throw new Error(`Cannot add ambiguous route. The pattern '${t.route.path}' clashes with '${this.endpoint.route.path}'`);
    this.endpoint = t;

    if (this.isOptional) {
      this.prevState.setEndpoint(t);
      if (this.prevState.isSeparator && null !== this.prevState.prevState) this.prevState.prevState.setEndpoint(t);
    }
  }

  isMatch(t) {
    const s = this.segment;

    switch (null === s || void 0 === s ? void 0 : s.kind) {
      case 2:
        return !this.value.includes(t);

      case 1:
        return true;

      case 3:
      case void 0:
        return this.value.includes(t);
    }
  }

}

function n(t) {
  return t.length > 0;
}

var e;

(function (t) {
  t[t["star"] = 1] = "star";
  t[t["dynamic"] = 2] = "dynamic";
  t[t["static"] = 3] = "static";
})(e || (e = {}));

class StaticSegment {
  constructor(t, s) {
    this.value = t;
    this.caseSensitive = s;
  }

  get kind() {
    return 3;
  }

  appendTo(t) {
    const {
      value: s,
      value: {
        length: n
      }
    } = this;
    if (this.caseSensitive) for (let e = 0; e < n; ++e) t = t.append(this, s.charAt(e));else for (let e = 0; e < n; ++e) {
      const n = s.charAt(e);
      t = t.append(this, n.toUpperCase() + n.toLowerCase());
    }
    return t;
  }

  equals(t) {
    return 3 === t.kind && t.caseSensitive === this.caseSensitive && t.value === this.value;
  }

}

class DynamicSegment {
  constructor(t, s) {
    this.name = t;
    this.optional = s;
  }

  get kind() {
    return 2;
  }

  appendTo(t) {
    t = t.append(this, "/");
    return t;
  }

  equals(t) {
    return 2 === t.kind && t.optional === this.optional && t.name === this.name;
  }

}

class StarSegment {
  constructor(t) {
    this.name = t;
  }

  get kind() {
    return 1;
  }

  appendTo(t) {
    t = t.append(this, "");
    return t;
  }

  equals(t) {
    return 1 === t.kind && t.name === this.name;
  }

}
});

;define.alias('@aurelia/route-recognizer','@aurelia/route-recognizer/dist/esm/index.js');
define('@aurelia/router/dist/esm/index.js',['require','exports','module','@aurelia/kernel','@aurelia/runtime-html','@aurelia/route-recognizer'],function (require, exports, module) {
"use strict";

exports.__esModule = true;
exports.ViewportExpression = exports.ViewportCustomElementRegistration = exports.ViewportCustomElement = exports.ViewportAgent = exports.Transition = exports.SegmentGroupExpression = exports.SegmentExpression = exports.ScopedSegmentExpression = exports.RouterRegistration = exports.RouterOptions = exports.RouterConfiguration = exports.Router = exports.RouteTree = exports.RouteNode = exports.RouteExpression = exports.RouteDefinition = exports.RouteContext = exports.RouteConfig = exports.Route = exports.ParameterListExpression = exports.ParameterExpression = exports.NavigationStartEvent = exports.NavigationOptions = exports.NavigationErrorEvent = exports.NavigationEndEvent = exports.NavigationCancelEvent = exports.Navigation = exports.LocationChangeEvent = exports.LoadCustomAttributeRegistration = exports.LoadCustomAttribute = exports.IViewportInstruction = exports.IStateManager = exports.IRouterEvents = exports.IRouter = exports.IRouteContext = exports.ILocationManager = exports.IBaseHrefProvider = exports.HrefCustomAttributeRegistration = exports.HrefCustomAttribute = exports.ExpressionKind = exports.DefaultResources = exports.DefaultComponents = exports.CompositeSegmentExpression = exports.ComponentExpression = exports.ComponentAgent = exports.ChildRouteConfig = exports.AuNavId = exports.ActionExpression = exports.AST = void 0;
exports.isManagedState = At;
exports.route = zt;
exports.toManagedState = Pt;

var _kernel = require("@aurelia/kernel");

var _runtimeHtml = require("@aurelia/runtime-html");

var _routeRecognizer = require("@aurelia/route-recognizer");

class Batch {
  constructor(t, e, i) {
    this.stack = t;
    this.cb = e;
    this.done = false;
    this.next = null;
    this.head = null !== i && void 0 !== i ? i : this;
  }

  static start(t) {
    return new Batch(0, t, null);
  }

  push() {
    let t = this;

    do {
      ++t.stack;
      t = t.next;
    } while (null !== t);
  }

  pop() {
    let t = this;

    do {
      if (0 === --t.stack) t.invoke();
      t = t.next;
    } while (null !== t);
  }

  invoke() {
    const t = this.cb;

    if (null !== t) {
      this.cb = null;
      t(this);
      this.done = true;
    }
  }

  continueWith(t) {
    if (null === this.next) return this.next = new Batch(this.stack, t, this.head);else return this.next.continueWith(t);
  }

  start() {
    this.head.push();
    this.head.pop();
    return this;
  }

}

function B(t, e) {
  t = t.slice();
  e = e.slice();
  const i = [];

  while (t.length > 0) {
    const s = t.shift();

    if (i.every(t => t.context.vpa !== s.context.vpa)) {
      const t = e.findIndex(t => t.context.vpa === s.context.vpa);
      if (t >= 0) i.push(...e.splice(0, t + 1));else i.push(s);
    }
  }

  i.push(...e);
  return i;
}

function D(t) {
  try {
    return JSON.stringify(t);
  } catch (e) {
    return Object.prototype.toString.call(t);
  }
}

function M(t) {
  return "string" === typeof t ? [t] : t;
}

function q(t) {
  return "string" === typeof t ? t : t[0];
}

function H(t) {
  return "object" === typeof t && null !== t && !(0, _runtimeHtml.isCustomElementViewModel)(t);
}

function F(t) {
  return H(t) && true === Object.prototype.hasOwnProperty.call(t, "name");
}

function z(t) {
  return H(t) && true === Object.prototype.hasOwnProperty.call(t, "component");
}

function W(t) {
  return H(t) && true === Object.prototype.hasOwnProperty.call(t, "redirectTo");
}

function G(t) {
  return H(t) && true === Object.prototype.hasOwnProperty.call(t, "component");
}

function Y(t, e, i) {
  throw new Error(`Invalid route config property: "${e}". Expected ${t}, but got ${D(i)}.`);
}

function _(t, e) {
  if (null === t || void 0 === t) throw new Error(`Invalid route config: expected an object or string, but got: ${String(t)}.`);
  const i = Object.keys(t);

  for (const s of i) {
    const i = t[s];
    const n = [e, s].join(".");

    switch (s) {
      case "id":
      case "viewport":
      case "redirectTo":
        if ("string" !== typeof i) Y("string", n, i);
        break;

      case "caseSensitive":
        if ("boolean" !== typeof i) Y("boolean", n, i);
        break;

      case "data":
        if ("object" !== typeof i || null === i) Y("object", n, i);
        break;

      case "title":
        switch (typeof i) {
          case "string":
          case "function":
            break;

          default:
            Y("string or function", n, i);
        }

        break;

      case "path":
        if (i instanceof Array) {
          for (let t = 0; t < i.length; ++t) if ("string" !== typeof i[t]) Y("string", `${n}[${t}]`, i[t]);
        } else if ("string" !== typeof i) Y("string or Array of strings", n, i);

        break;

      case "component":
        Z(i, n);
        break;

      case "routes":
        if (!(i instanceof Array)) Y("Array", n, i);

        for (const t of i) {
          const e = `${n}[${i.indexOf(t)}]`;
          Z(t, e);
        }

        break;

      case "transitionPlan":
        switch (typeof i) {
          case "string":
            switch (i) {
              case "none":
              case "replace":
              case "invoke-lifecycles":
                break;

              default:
                Y("string('none'|'replace'|'invoke-lifecycles') or function", n, i);
            }

            break;

          case "function":
            break;

          default:
            Y("string('none'|'replace'|'invoke-lifecycles') or function", n, i);
        }

        break;

      default:
        throw new Error(`Unknown route config property: "${e}.${s}". Please specify known properties only.`);
    }
  }
}

function J(t, e) {
  if (null === t || void 0 === t) throw new Error(`Invalid route config: expected an object or string, but got: ${String(t)}.`);
  const i = Object.keys(t);

  for (const s of i) {
    const i = t[s];
    const n = [e, s].join(".");

    switch (s) {
      case "path":
      case "redirectTo":
        if ("string" !== typeof i) Y("string", n, i);
        break;

      default:
        throw new Error(`Unknown redirect config property: "${e}.${s}". Only 'path' and 'redirectTo' should be specified for redirects.`);
    }
  }
}

function Z(t, e) {
  switch (typeof t) {
    case "function":
      break;

    case "object":
      if (t instanceof Promise) break;

      if (W(t)) {
        J(t, e);
        break;
      }

      if (z(t)) {
        _(t, e);

        break;
      }

      if (!(0, _runtimeHtml.isCustomElementViewModel)(t) && !F(t)) Y(`an object with at least a 'component' property (see Routeable)`, e, t);
      break;

    case "string":
      break;

    default:
      Y("function, object or string (see Routeable)", e, t);
  }
}

function Q(t, e) {
  if (t === e) return true;
  if (typeof t !== typeof e) return false;
  if (null === t || null === e) return false;
  if (Object.getPrototypeOf(t) !== Object.getPrototypeOf(e)) return false;
  const i = Object.keys(t);
  const s = Object.keys(e);
  if (i.length !== s.length) return false;

  for (let n = 0, o = i.length; n < o; ++n) {
    const o = i[n];
    if (o !== s[n]) return false;
    if (t[o] !== e[o]) return false;
  }

  return true;
}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */


function K(t, e, i, s) {
  var n = arguments.length,
      o = n < 3 ? e : null === s ? s = Object.getOwnPropertyDescriptor(e, i) : s,
      r;
  if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) o = Reflect.decorate(t, e, i, s);else for (var a = t.length - 1; a >= 0; a--) if (r = t[a]) o = (n < 3 ? r(o) : n > 3 ? r(e, i, o) : r(e, i)) || o;
  return n > 3 && o && Object.defineProperty(e, i, o), o;
}

function X(t, e) {
  return function (i, s) {
    e(i, s, t);
  };
}

class Subscription {
  constructor(t, e, i) {
    this.events = t;
    this.serial = e;
    this.inner = i;
    this.disposed = false;
  }

  dispose() {
    if (!this.disposed) {
      this.disposed = true;
      this.inner.dispose();
      const t = this.events["subscriptions"];
      t.splice(t.indexOf(this), 1);
    }
  }

}

const tt = _kernel.DI.createInterface("IRouterEvents", t => t.singleton(et));

exports.IRouterEvents = tt;
let et = class RouterEvents {
  constructor(t, e) {
    this.ea = t;
    this.logger = e;
    this.subscriptionSerial = 0;
    this.subscriptions = [];
    this.logger = e.scopeTo("RouterEvents");
  }

  publish(t) {
    this.logger.trace(`publishing %s`, t);
    this.ea.publish(t.name, t);
  }

  subscribe(t, e) {
    const i = new Subscription(this, ++this.subscriptionSerial, this.ea.subscribe(t, s => {
      this.logger.trace(`handling %s for subscription #${i.serial}`, t);
      e(s);
    }));
    this.subscriptions.push(i);
    return i;
  }

};
et = K([X(0, _kernel.IEventAggregator), X(1, _kernel.ILogger)], et);

class LocationChangeEvent {
  constructor(t, e, i, s) {
    this.id = t;
    this.url = e;
    this.trigger = i;
    this.state = s;
  }

  get name() {
    return "au:router:location-change";
  }

  toString() {
    return `LocationChangeEvent(id:${this.id},url:'${this.url}',trigger:'${this.trigger}')`;
  }

}

exports.LocationChangeEvent = LocationChangeEvent;

class NavigationStartEvent {
  constructor(t, e, i, s) {
    this.id = t;
    this.instructions = e;
    this.trigger = i;
    this.managedState = s;
  }

  get name() {
    return "au:router:navigation-start";
  }

  toString() {
    return `NavigationStartEvent(id:${this.id},instructions:'${this.instructions}',trigger:'${this.trigger}')`;
  }

}

exports.NavigationStartEvent = NavigationStartEvent;

class NavigationEndEvent {
  constructor(t, e, i) {
    this.id = t;
    this.instructions = e;
    this.finalInstructions = i;
  }

  get name() {
    return "au:router:navigation-end";
  }

  toString() {
    return `NavigationEndEvent(id:${this.id},instructions:'${this.instructions}',finalInstructions:'${this.finalInstructions}')`;
  }

}

exports.NavigationEndEvent = NavigationEndEvent;

class NavigationCancelEvent {
  constructor(t, e, i) {
    this.id = t;
    this.instructions = e;
    this.reason = i;
  }

  get name() {
    return "au:router:navigation-cancel";
  }

  toString() {
    return `NavigationCancelEvent(id:${this.id},instructions:'${this.instructions}',reason:${String(this.reason)})`;
  }

}

exports.NavigationCancelEvent = NavigationCancelEvent;

class NavigationErrorEvent {
  constructor(t, e, i) {
    this.id = t;
    this.instructions = e;
    this.error = i;
  }

  get name() {
    return "au:router:navigation-error";
  }

  toString() {
    return `NavigationErrorEvent(id:${this.id},instructions:'${this.instructions}',error:${String(this.error)})`;
  }

}

exports.NavigationErrorEvent = NavigationErrorEvent;

const it = _kernel.DI.createInterface("IBaseHrefProvider", t => t.singleton(st));

exports.IBaseHrefProvider = it;

class BaseHref {
  constructor(t, e) {
    this.path = t;
    this.rootedPath = e;
  }

}

let st = class BrowserBaseHrefProvider {
  constructor(t) {
    this.window = t;
  }

  getBaseHref() {
    var t;
    const e = this.window.document.head.querySelector("base");
    if (null === e) return null;
    const i = rt(e.href);
    const s = rt(null !== (t = e.getAttribute("href")) && void 0 !== t ? t : "");
    return new BaseHref(s, i);
  }

};
st = K([X(0, _runtimeHtml.IWindow)], st);

const nt = _kernel.DI.createInterface("ILocationManager", t => t.singleton(ot));

exports.ILocationManager = nt;
let ot = class BrowserLocationManager {
  constructor(t, e, i, s, n, o) {
    var r;
    this.logger = t;
    this.events = e;
    this.history = i;
    this.location = s;
    this.window = n;
    this.baseHrefProvider = o;
    this.eventId = 0;
    this.logger = t.root.scopeTo("LocationManager");
    const a = o.getBaseHref();

    if (null === a) {
      const t = null !== (r = s.origin) && void 0 !== r ? r : "";
      const e = this.baseHref = new BaseHref("", rt(t));
      this.logger.warn(`no baseHref provided, defaulting to origin '${e.rootedPath}' (normalized from '${t}')`);
    } else {
      this.baseHref = a;
      this.logger.debug(`baseHref set to path: '${a.path}', rootedPath: '${a.rootedPath}'`);
    }
  }

  startListening() {
    this.logger.trace(`startListening()`);
    this.window.addEventListener("popstate", this.onPopState, false);
    this.window.addEventListener("hashchange", this.onHashChange, false);
  }

  stopListening() {
    this.logger.trace(`stopListening()`);
    this.window.removeEventListener("popstate", this.onPopState, false);
    this.window.removeEventListener("hashchange", this.onHashChange, false);
  }

  onPopState(t) {
    this.logger.trace(`onPopState()`);
    this.events.publish(new LocationChangeEvent(++this.eventId, this.getPath(), "popstate", t.state));
  }

  onHashChange(t) {
    this.logger.trace(`onHashChange()`);
    this.events.publish(new LocationChangeEvent(++this.eventId, this.getPath(), "hashchange", null));
  }

  pushState(t, e, i) {
    i = this.addBaseHref(i);

    try {
      const s = JSON.stringify(t);
      this.logger.trace(`pushState(state:${s},title:'${e}',url:'${i}')`);
    } catch (t) {
      this.logger.warn(`pushState(state:NOT_SERIALIZABLE,title:'${e}',url:'${i}')`);
    }

    this.history.pushState(t, e, i);
  }

  replaceState(t, e, i) {
    i = this.addBaseHref(i);

    try {
      const s = JSON.stringify(t);
      this.logger.trace(`replaceState(state:${s},title:'${e}',url:'${i}')`);
    } catch (t) {
      this.logger.warn(`replaceState(state:NOT_SERIALIZABLE,title:'${e}',url:'${i}')`);
    }

    this.history.replaceState(t, e, i);
  }

  getPath() {
    const {
      pathname: t,
      search: e,
      hash: i
    } = this.location;
    const s = this.removeBaseHref(`${t}${at(e)}${i}`);
    this.logger.trace(`getPath() -> '${s}'`);
    return s;
  }

  currentPathEquals(t) {
    const e = this.getPath() === this.removeBaseHref(t);
    this.logger.trace(`currentPathEquals(path:'${t}') -> ${e}`);
    return e;
  }

  addBaseHref(t) {
    const e = t;
    let i;
    let s = this.baseHref.rootedPath;
    if (s.endsWith("/")) s = s.slice(0, -1);
    if (0 === s.length) i = t;else {
      if (t.startsWith("/")) t = t.slice(1);
      i = `${s}/${t}`;
    }
    this.logger.trace(`addBaseHref(path:'${e}') -> '${i}'`);
    return i;
  }

  removeBaseHref(t) {
    const e = t;
    if (t.startsWith(this.baseHref.path)) t = t.slice(this.baseHref.path.length);
    t = rt(t);
    this.logger.trace(`removeBaseHref(path:'${e}') -> '${t}'`);
    return t;
  }

};
K([_kernel.bound], ot.prototype, "onPopState", null);
K([_kernel.bound], ot.prototype, "onHashChange", null);
ot = K([X(0, _kernel.ILogger), X(1, tt), X(2, _runtimeHtml.IHistory), X(3, _runtimeHtml.ILocation), X(4, _runtimeHtml.IWindow), X(5, it)], ot);

function rt(t) {
  let e;
  let i;
  let s;

  if ((s = t.indexOf("?")) >= 0 || (s = t.indexOf("#")) >= 0) {
    e = t.slice(0, s);
    i = t.slice(s);
  } else {
    e = t;
    i = "";
  }

  if (e.endsWith("/")) e = e.slice(0, -1);else if (e.endsWith("/index.html")) e = e.slice(0, -11);
  return `${e}${i}`;
}

function at(t) {
  return t.length > 0 && !t.startsWith("?") ? `?${t}` : t;
}

class ViewportRequest {
  constructor(t, e, i, s) {
    this.viewportName = t;
    this.componentName = e;
    this.resolution = i;
    this.append = s;
  }

  static create(t) {
    return new ViewportRequest(t.viewportName, t.componentName, t.resolution, t.append);
  }

  toString() {
    return `VR(viewport:'${this.viewportName}',component:'${this.componentName}',resolution:'${this.resolution}',append:${this.append})`;
  }

}

const ht = new WeakMap();

class ViewportAgent {
  constructor(t, e, s) {
    this.viewport = t;
    this.hostController = e;
    this.ctx = s;
    this.isActive = false;
    this.curCA = null;
    this.nextCA = null;
    this.state = 8256;
    this.$resolution = "dynamic";
    this.$plan = "replace";
    this.currNode = null;
    this.nextNode = null;
    this.currTransition = null;
    this.prevTransition = null;
    this.logger = s.container.get(_kernel.ILogger).scopeTo(`ViewportAgent<${s.friendlyPath}>`);
    this.logger.trace(`constructor()`);
  }

  get $state() {
    return ft(this.state);
  }

  get currState() {
    return 16256 & this.state;
  }

  set currState(t) {
    this.state = 127 & this.state | t;
  }

  get nextState() {
    return 127 & this.state;
  }

  set nextState(t) {
    this.state = 16256 & this.state | t;
  }

  static for(t, e) {
    let i = ht.get(t);

    if (void 0 === i) {
      const s = _runtimeHtml.Controller.getCachedOrThrow(t);

      ht.set(t, i = new ViewportAgent(t, s, e));
    }

    return i;
  }

  activateFromViewport(t, e, i) {
    const s = this.currTransition;
    if (null !== s) ut(s);
    this.isActive = true;

    switch (this.nextState) {
      case 64:
        switch (this.currState) {
          case 8192:
            this.logger.trace(`activateFromViewport() - nothing to activate at %s`, this);
            return;

          case 4096:
            this.logger.trace(`activateFromViewport() - activating existing componentAgent at %s`, this);
            return this.curCA.activate(t, e, i);

          default:
            this.unexpectedState("activateFromViewport 1");
        }

      case 2:
        {
          if (null === this.currTransition) throw new Error(`Unexpected viewport activation outside of a transition context at ${this}`);
          if ("static" !== this.$resolution) throw new Error(`Unexpected viewport activation at ${this}`);
          this.logger.trace(`activateFromViewport() - running ordinary activate at %s`, this);
          const e = Batch.start(e => {
            this.activate(t, this.currTransition, e);
          });
          const i = new Promise(t => {
            e.continueWith(() => {
              t();
            });
          });
          return e.start().done ? void 0 : i;
        }

      default:
        this.unexpectedState("activateFromViewport 2");
    }
  }

  deactivateFromViewport(t, e, i) {
    const s = this.currTransition;
    if (null !== s) ut(s);
    this.isActive = false;

    switch (this.currState) {
      case 8192:
        this.logger.trace(`deactivateFromViewport() - nothing to deactivate at %s`, this);
        return;

      case 4096:
        this.logger.trace(`deactivateFromViewport() - deactivating existing componentAgent at %s`, this);
        return this.curCA.deactivate(t, e, i);

      case 128:
        this.logger.trace(`deactivateFromViewport() - already deactivating at %s`, this);
        return;

      default:
        {
          if (null === this.currTransition) throw new Error(`Unexpected viewport deactivation outside of a transition context at ${this}`);
          this.logger.trace(`deactivateFromViewport() - running ordinary deactivate at %s`, this);
          const e = Batch.start(e => {
            this.deactivate(t, this.currTransition, e);
          });
          const i = new Promise(t => {
            e.continueWith(() => {
              t();
            });
          });
          return e.start().done ? void 0 : i;
        }
    }
  }

  handles(t) {
    if (!this.isAvailable(t.resolution)) return false;

    if (t.append && 4096 === this.currState) {
      this.logger.trace(`handles(req:%s) -> false (append mode, viewport already has content %s)`, t, this.curCA);
      return false;
    }

    if (t.viewportName.length > 0 && this.viewport.name !== t.viewportName) {
      this.logger.trace(`handles(req:%s) -> false (names don't match)`, t);
      return false;
    }

    if (this.viewport.usedBy.length > 0 && !this.viewport.usedBy.split(",").includes(t.componentName)) {
      this.logger.trace(`handles(req:%s) -> false (componentName not included in usedBy)`, t);
      return false;
    }

    this.logger.trace(`handles(req:%s) -> true`, t);
    return true;
  }

  isAvailable(t) {
    if ("dynamic" === t && !this.isActive) {
      this.logger.trace(`isAvailable(resolution:%s) -> false (viewport is not active and we're in dynamic resolution resolution)`, t);
      return false;
    }

    if (64 !== this.nextState) {
      this.logger.trace(`isAvailable(resolution:%s) -> false (update already scheduled for %s)`, t, this.nextNode);
      return false;
    }

    return true;
  }

  canUnload(t, e) {
    if (null === this.currTransition) this.currTransition = t;
    ut(t);
    if (true !== t.guardsResult) return;
    e.push();
    Batch.start(e => {
      this.logger.trace(`canUnload() - invoking on children at %s`, this);

      for (const i of this.currNode.children) i.context.vpa.canUnload(t, e);
    }).continueWith(e => {
      switch (this.currState) {
        case 4096:
          this.logger.trace(`canUnload() - invoking on existing component at %s`, this);

          switch (this.$plan) {
            case "none":
              this.currState = 1024;
              return;

            case "invoke-lifecycles":
            case "replace":
              this.currState = 2048;
              e.push();
              Batch.start(e => {
                this.logger.trace(`canUnload() - finished invoking on children, now invoking on own component at %s`, this);
                this.curCA.canUnload(t, this.nextNode, e);
              }).continueWith(() => {
                this.logger.trace(`canUnload() - finished at %s`, this);
                this.currState = 1024;
                e.pop();
              }).start();
              return;
          }

        case 8192:
          this.logger.trace(`canUnload() - nothing to unload at %s`, this);
          return;

        default:
          t.handleError(new Error(`Unexpected state at canUnload of ${this}`));
      }
    }).continueWith(() => {
      e.pop();
    }).start();
  }

  canLoad(t, e) {
    if (null === this.currTransition) this.currTransition = t;
    ut(t);
    if (true !== t.guardsResult) return;
    e.push();
    Batch.start(e => {
      switch (this.nextState) {
        case 32:
          this.logger.trace(`canLoad() - invoking on new component at %s`, this);
          this.nextState = 16;

          switch (this.$plan) {
            case "none":
              return;

            case "invoke-lifecycles":
              return this.curCA.canLoad(t, this.nextNode, e);

            case "replace":
              this.nextCA = this.nextNode.context.createComponentAgent(this.hostController, this.nextNode);
              return this.nextCA.canLoad(t, this.nextNode, e);
          }

        case 64:
          this.logger.trace(`canLoad() - nothing to load at %s`, this);
          return;

        default:
          this.unexpectedState("canLoad");
      }
    }).continueWith(t => {
      const e = this.nextNode;

      switch (this.$plan) {
        case "none":
        case "invoke-lifecycles":
          this.logger.trace(`canLoad(next:%s) - plan set to '%s', compiling residue`, e, this.$plan);
          t.push();
          void (0, _kernel.onResolve)(bt(e), () => {
            t.pop();
          });
          return;

        case "replace":
          switch (this.$resolution) {
            case "dynamic":
              this.logger.trace(`canLoad(next:%s) - (resolution: 'dynamic'), delaying residue compilation until activate`, e, this.$plan);
              return;

            case "static":
              this.logger.trace(`canLoad(next:%s) - (resolution: '${this.$resolution}'), creating nextCA and compiling residue`, e, this.$plan);
              t.push();
              void (0, _kernel.onResolve)(bt(e), () => {
                t.pop();
              });
              return;
          }

      }
    }).continueWith(e => {
      switch (this.nextState) {
        case 16:
          this.logger.trace(`canLoad() - finished own component, now invoking on children at %s`, this);
          this.nextState = 8;

          for (const i of this.nextNode.children) i.context.vpa.canLoad(t, e);

          return;

        case 64:
          return;

        default:
          this.unexpectedState("canLoad");
      }
    }).continueWith(() => {
      this.logger.trace(`canLoad() - finished at %s`, this);
      e.pop();
    }).start();
  }

  unload(t, e) {
    ut(t);
    ct(this, t);
    e.push();
    Batch.start(e => {
      this.logger.trace(`unload() - invoking on children at %s`, this);

      for (const i of this.currNode.children) i.context.vpa.unload(t, e);
    }).continueWith(i => {
      switch (this.currState) {
        case 1024:
          this.logger.trace(`unload() - invoking on existing component at %s`, this);

          switch (this.$plan) {
            case "none":
              this.currState = 256;
              return;

            case "invoke-lifecycles":
            case "replace":
              this.currState = 512;
              i.push();
              Batch.start(e => {
                this.logger.trace(`unload() - finished invoking on children, now invoking on own component at %s`, this);
                this.curCA.unload(t, this.nextNode, e);
              }).continueWith(() => {
                this.logger.trace(`unload() - finished at %s`, this);
                this.currState = 256;
                i.pop();
              }).start();
              return;
          }

        case 8192:
          this.logger.trace(`unload() - nothing to unload at %s`, this);

          for (const i of this.currNode.children) i.context.vpa.unload(t, e);

          return;

        default:
          this.unexpectedState("unload");
      }
    }).continueWith(() => {
      e.pop();
    }).start();
  }

  load(t, e) {
    ut(t);
    ct(this, t);
    e.push();
    Batch.start(e => {
      switch (this.nextState) {
        case 8:
          this.logger.trace(`load() - invoking on new component at %s`, this);
          this.nextState = 4;

          switch (this.$plan) {
            case "none":
              return;

            case "invoke-lifecycles":
              return this.curCA.load(t, this.nextNode, e);

            case "replace":
              return this.nextCA.load(t, this.nextNode, e);
          }

        case 64:
          this.logger.trace(`load() - nothing to load at %s`, this);
          return;

        default:
          this.unexpectedState("load");
      }
    }).continueWith(e => {
      switch (this.nextState) {
        case 4:
          this.logger.trace(`load() - finished own component, now invoking on children at %s`, this);
          this.nextState = 2;

          for (const i of this.nextNode.children) i.context.vpa.load(t, e);

          return;

        case 64:
          return;

        default:
          this.unexpectedState("load");
      }
    }).continueWith(() => {
      this.logger.trace(`load() - finished at %s`, this);
      e.pop();
    }).start();
  }

  deactivate(t, e, i) {
    ut(e);
    ct(this, e);
    i.push();

    switch (this.currState) {
      case 256:
        this.logger.trace(`deactivate() - invoking on existing component at %s`, this);
        this.currState = 128;

        switch (this.$plan) {
          case "none":
          case "invoke-lifecycles":
            i.pop();
            return;

          case "replace":
            {
              const s = this.hostController;
              const n = this.viewport.stateful ? 0 : 32;
              e.run(() => this.curCA.deactivate(t, s, n), () => {
                i.pop();
              });
            }
        }

        return;

      case 8192:
        this.logger.trace(`deactivate() - nothing to deactivate at %s`, this);
        i.pop();
        return;

      case 128:
        this.logger.trace(`deactivate() - already deactivating at %s`, this);
        i.pop();
        return;

      default:
        this.unexpectedState("deactivate");
    }
  }

  activate(t, e, i) {
    ut(e);
    ct(this, e);
    i.push();

    if (32 === this.nextState && "dynamic" === this.$resolution) {
      this.logger.trace(`activate() - invoking canLoad(), load() and activate() on new component due to resolution 'dynamic' at %s`, this);
      Batch.start(t => {
        this.canLoad(e, t);
      }).continueWith(t => {
        this.load(e, t);
      }).continueWith(i => {
        this.activate(t, e, i);
      }).continueWith(() => {
        i.pop();
      }).start();
      return;
    }

    switch (this.nextState) {
      case 2:
        this.logger.trace(`activate() - invoking on existing component at %s`, this);
        this.nextState = 1;
        Batch.start(i => {
          switch (this.$plan) {
            case "none":
            case "invoke-lifecycles":
              return;

            case "replace":
              {
                const s = this.hostController;
                const n = 0;
                e.run(() => {
                  i.push();
                  return this.nextCA.activate(t, s, n);
                }, () => {
                  i.pop();
                });
              }
          }
        }).continueWith(t => {
          this.processDynamicChildren(e, t);
        }).continueWith(() => {
          i.pop();
        }).start();
        return;

      case 64:
        this.logger.trace(`activate() - nothing to activate at %s`, this);
        i.pop();
        return;

      default:
        this.unexpectedState("activate");
    }
  }

  swap(t, e) {
    if (8192 === this.currState) {
      this.logger.trace(`swap() - running activate on next instead, because there is nothing to deactivate at %s`, this);
      this.activate(null, t, e);
      return;
    }

    if (64 === this.nextState) {
      this.logger.trace(`swap() - running deactivate on current instead, because there is nothing to activate at %s`, this);
      this.deactivate(null, t, e);
      return;
    }

    ut(t);
    ct(this, t);
    if (!(256 === this.currState && 2 === this.nextState)) this.unexpectedState("swap");
    this.currState = 128;
    this.nextState = 1;

    switch (this.$plan) {
      case "none":
      case "invoke-lifecycles":
        {
          this.logger.trace(`swap() - skipping this level and swapping children instead at %s`, this);
          const i = B(this.nextNode.children, this.currNode.children);

          for (const s of i) s.context.vpa.swap(t, e);

          return;
        }

      case "replace":
        {
          this.logger.trace(`swap() - running normally at %s`, this);
          const i = this.hostController;
          const s = this.curCA;
          const n = this.nextCA;
          const o = this.viewport.stateful ? 0 : 32;
          const r = 0;
          e.push();

          switch (t.options.swapStrategy) {
            case "sequential-add-first":
              Batch.start(e => {
                t.run(() => {
                  e.push();
                  return n.activate(null, i, r);
                }, () => {
                  e.pop();
                });
              }).continueWith(e => {
                this.processDynamicChildren(t, e);
              }).continueWith(() => {
                t.run(() => s.deactivate(null, i, o), () => {
                  e.pop();
                });
              }).start();
              return;

            case "sequential-remove-first":
              Batch.start(e => {
                t.run(() => {
                  e.push();
                  return s.deactivate(null, i, o);
                }, () => {
                  e.pop();
                });
              }).continueWith(e => {
                t.run(() => {
                  e.push();
                  return n.activate(null, i, r);
                }, () => {
                  e.pop();
                });
              }).continueWith(e => {
                this.processDynamicChildren(t, e);
              }).continueWith(() => {
                e.pop();
              }).start();
              return;

            case "parallel-remove-first":
              t.run(() => {
                e.push();
                return s.deactivate(null, i, o);
              }, () => {
                e.pop();
              });
              Batch.start(e => {
                t.run(() => {
                  e.push();
                  return n.activate(null, i, r);
                }, () => {
                  e.pop();
                });
              }).continueWith(e => {
                this.processDynamicChildren(t, e);
              }).continueWith(() => {
                e.pop();
              }).start();
              return;
          }
        }
    }
  }

  processDynamicChildren(t, e) {
    this.logger.trace(`processDynamicChildren() - %s`, this);
    const i = this.nextNode;
    t.run(() => {
      e.push();
      return St(i);
    }, i => {
      Batch.start(e => {
        for (const s of i) t.run(() => {
          e.push();
          return s.context.vpa.canLoad(t, e);
        }, () => {
          e.pop();
        });
      }).continueWith(e => {
        for (const s of i) t.run(() => {
          e.push();
          return s.context.vpa.load(t, e);
        }, () => {
          e.pop();
        });
      }).continueWith(e => {
        for (const s of i) t.run(() => {
          e.push();
          return s.context.vpa.activate(null, t, e);
        }, () => {
          e.pop();
        });
      }).continueWith(() => {
        e.pop();
      }).start();
    });
  }

  scheduleUpdate(t, e) {
    var i, s;

    switch (this.nextState) {
      case 64:
        this.nextNode = e;
        this.nextState = 32;
        this.$resolution = t.resolutionMode;
        break;

      default:
        this.unexpectedState("scheduleUpdate 1");
    }

    switch (this.currState) {
      case 8192:
      case 4096:
      case 1024:
        break;

      default:
        this.unexpectedState("scheduleUpdate 2");
    }

    const n = null !== (s = null === (i = this.curCA) || void 0 === i ? void 0 : i.routeNode) && void 0 !== s ? s : null;
    if (null === n || n.component !== e.component) this.$plan = "replace";else {
      const t = e.context.definition.config.transitionPlan;
      if ("function" === typeof t) this.$plan = t(n, e);else this.$plan = t;
    }
    this.logger.trace(`scheduleUpdate(next:%s) - plan set to '%s'`, e, this.$plan);
  }

  cancelUpdate() {
    if (null !== this.currNode) this.currNode.children.forEach(function (t) {
      t.context.vpa.cancelUpdate();
    });
    if (null !== this.nextNode) this.nextNode.children.forEach(function (t) {
      t.context.vpa.cancelUpdate();
    });
    this.logger.trace(`cancelUpdate(nextNode:%s)`, this.nextNode);

    switch (this.currState) {
      case 8192:
      case 4096:
        break;

      case 2048:
      case 1024:
        this.currState = 4096;
        break;
    }

    switch (this.nextState) {
      case 64:
      case 32:
      case 16:
      case 8:
        this.nextNode = null;
        this.nextState = 64;
        break;
    }
  }

  endTransition() {
    if (null !== this.currNode) this.currNode.children.forEach(function (t) {
      t.context.vpa.endTransition();
    });
    if (null !== this.nextNode) this.nextNode.children.forEach(function (t) {
      t.context.vpa.endTransition();
    });

    if (null !== this.currTransition) {
      ut(this.currTransition);

      switch (this.nextState) {
        case 64:
          switch (this.currState) {
            case 128:
              this.logger.trace(`endTransition() - setting currState to State.nextIsEmpty at %s`, this);
              this.currState = 8192;
              this.curCA = null;
              break;

            default:
              this.unexpectedState("endTransition 1");
          }

          break;

        case 1:
          switch (this.currState) {
            case 8192:
            case 128:
              switch (this.$plan) {
                case "none":
                case "invoke-lifecycles":
                  this.logger.trace(`endTransition() - setting currState to State.currIsActive at %s`, this);
                  this.currState = 4096;
                  break;

                case "replace":
                  this.logger.trace(`endTransition() - setting currState to State.currIsActive and reassigning curCA at %s`, this);
                  this.currState = 4096;
                  this.curCA = this.nextCA;
                  break;
              }

              this.currNode = this.nextNode;
              break;

            default:
              this.unexpectedState("endTransition 2");
          }

          break;

        default:
          this.unexpectedState("endTransition 3");
      }

      this.$plan = "replace";
      this.nextState = 64;
      this.nextNode = null;
      this.nextCA = null;
      this.prevTransition = this.currTransition;
      this.currTransition = null;
    }
  }

  toString() {
    return `VPA(state:${this.$state},plan:'${this.$plan}',resolution:'${this.$resolution}',n:${this.nextNode},c:${this.currNode},viewport:${this.viewport})`;
  }

  dispose() {
    var t;
    if (this.viewport.stateful) this.logger.trace(`dispose() - not disposing stateful viewport at %s`, this);else {
      this.logger.trace(`dispose() - disposing %s`, this);
      null === (t = this.curCA) || void 0 === t ? void 0 : t.dispose();
    }
  }

  unexpectedState(t) {
    throw new Error(`Unexpected state at ${t} of ${this}`);
  }

}

exports.ViewportAgent = ViewportAgent;

function ct(t, e) {
  if (true !== e.guardsResult) throw new Error(`Unexpected guardsResult ${e.guardsResult} at ${t}`);
}

function ut(t) {
  if (void 0 !== t.error) throw t.error;
}

var lt;

(function (t) {
  t[t["curr"] = 16256] = "curr";
  t[t["currIsEmpty"] = 8192] = "currIsEmpty";
  t[t["currIsActive"] = 4096] = "currIsActive";
  t[t["currCanUnload"] = 2048] = "currCanUnload";
  t[t["currCanUnloadDone"] = 1024] = "currCanUnloadDone";
  t[t["currUnload"] = 512] = "currUnload";
  t[t["currUnloadDone"] = 256] = "currUnloadDone";
  t[t["currDeactivate"] = 128] = "currDeactivate";
  t[t["next"] = 127] = "next";
  t[t["nextIsEmpty"] = 64] = "nextIsEmpty";
  t[t["nextIsScheduled"] = 32] = "nextIsScheduled";
  t[t["nextCanLoad"] = 16] = "nextCanLoad";
  t[t["nextCanLoadDone"] = 8] = "nextCanLoadDone";
  t[t["nextLoad"] = 4] = "nextLoad";
  t[t["nextLoadDone"] = 2] = "nextLoadDone";
  t[t["nextActivate"] = 1] = "nextActivate";
  t[t["bothAreEmpty"] = 8256] = "bothAreEmpty";
})(lt || (lt = {}));

const dt = new Map();

function ft(t) {
  let e = dt.get(t);
  if (void 0 === e) dt.set(t, e = pt(t));
  return e;
}

function pt(t) {
  const e = [];
  if (8192 === (8192 & t)) e.push("currIsEmpty");
  if (4096 === (4096 & t)) e.push("currIsActive");
  if (2048 === (2048 & t)) e.push("currCanUnload");
  if (1024 === (1024 & t)) e.push("currCanUnloadDone");
  if (512 === (512 & t)) e.push("currUnload");
  if (256 === (256 & t)) e.push("currUnloadDone");
  if (128 === (128 & t)) e.push("currDeactivate");
  if (64 === (64 & t)) e.push("nextIsEmpty");
  if (32 === (32 & t)) e.push("nextIsScheduled");
  if (16 === (16 & t)) e.push("nextCanLoad");
  if (8 === (8 & t)) e.push("nextCanLoadDone");
  if (4 === (4 & t)) e.push("nextLoad");
  if (2 === (2 & t)) e.push("nextLoadDone");
  if (1 === (1 & t)) e.push("nextActivate");
  return e.join("|");
}

const gt = ["?", "#", "/", "+", "(", ")", ".", "@", "!", "=", ",", "&", "'", "~", ";"];

class ParserState {
  constructor(t) {
    this.input = t;
    this.buffers = [];
    this.bufferIndex = 0;
    this.index = 0;
    this.rest = t;
  }

  get done() {
    return 0 === this.rest.length;
  }

  startsWith(...t) {
    const e = this.rest;
    return t.some(function (t) {
      return e.startsWith(t);
    });
  }

  consumeOptional(t) {
    if (this.startsWith(t)) {
      this.rest = this.rest.slice(t.length);
      this.index += t.length;
      this.append(t);
      return true;
    }

    return false;
  }

  consume(t) {
    if (!this.consumeOptional(t)) this.expect(`'${t}'`);
  }

  expect(t) {
    throw new Error(`Expected ${t} at index ${this.index} of '${this.input}', but got: '${this.rest}' (rest='${this.rest}')`);
  }

  ensureDone() {
    if (!this.done) throw new Error(`Unexpected '${this.rest}' at index ${this.index} of '${this.input}'`);
  }

  advance() {
    const t = this.rest[0];
    this.rest = this.rest.slice(1);
    ++this.index;
    this.append(t);
  }

  record() {
    this.buffers[this.bufferIndex++] = "";
  }

  playback() {
    const t = --this.bufferIndex;
    const e = this.buffers;
    const i = e[t];
    e[t] = "";
    return i;
  }

  discard() {
    this.buffers[--this.bufferIndex] = "";
  }

  append(t) {
    const e = this.bufferIndex;
    const i = this.buffers;

    for (let s = 0; s < e; ++s) i[s] += t;
  }

}

var vt;
exports.ExpressionKind = vt;

(function (t) {
  t[t["Route"] = 0] = "Route";
  t[t["CompositeSegment"] = 1] = "CompositeSegment";
  t[t["ScopedSegment"] = 2] = "ScopedSegment";
  t[t["SegmentGroup"] = 3] = "SegmentGroup";
  t[t["Segment"] = 4] = "Segment";
  t[t["Component"] = 5] = "Component";
  t[t["Action"] = 6] = "Action";
  t[t["Viewport"] = 7] = "Viewport";
  t[t["ParameterList"] = 8] = "ParameterList";
  t[t["Parameter"] = 9] = "Parameter";
})(vt || (exports.ExpressionKind = vt = {}));

const wt = new Map();
const mt = new Map();

class RouteExpression {
  constructor(t, e, i, s, n, o) {
    this.raw = t;
    this.isAbsolute = e;
    this.root = i;
    this.queryParams = s;
    this.fragment = n;
    this.fragmentIsRoute = o;
  }

  get kind() {
    return 0;
  }

  static parse(t, e) {
    const i = e ? wt : mt;
    let s = i.get(t);
    if (void 0 === s) i.set(t, s = RouteExpression.$parse(t, e));
    return s;
  }

  static $parse(t, e) {
    let i;
    const s = t.indexOf("#");

    if (s >= 0) {
      const n = t.slice(s + 1);
      i = decodeURIComponent(n);
      if (e) t = i;else t = t.slice(0, s);
    } else {
      if (e) t = "";
      i = null;
    }

    let n = null;
    const o = t.indexOf("?");

    if (o >= 0) {
      const e = t.slice(o + 1);
      t = t.slice(0, o);
      n = new URLSearchParams(e);
    }

    if ("" === t) return new RouteExpression("", false, SegmentExpression.EMPTY, null != n ? Object.freeze(n) : Tt, i, e);
    const r = new ParserState(t);
    r.record();
    const a = r.consumeOptional("/");
    const h = CompositeSegmentExpression.parse(r);
    r.ensureDone();
    const c = r.playback();
    return new RouteExpression(c, a, h, null != n ? Object.freeze(n) : Tt, i, e);
  }

  toInstructionTree(t) {
    let e = this.queryParams;
    const i = t.queryParams;
    if (null != i) e = new URLSearchParams({ ...Object.fromEntries(e.entries()),
      ...i
    });
    return new ViewportInstructionTree(t, this.isAbsolute, this.root.toInstructions(t.append, 0, 0), e, this.fragment);
  }

  toString() {
    return this.raw;
  }

}

exports.RouteExpression = RouteExpression;

class CompositeSegmentExpression {
  constructor(t, e, i) {
    this.raw = t;
    this.siblings = e;
    this.append = i;
  }

  get kind() {
    return 1;
  }

  static parse(t) {
    t.record();
    const e = t.consumeOptional("+");
    const i = [];

    do {
      i.push(ScopedSegmentExpression.parse(t));
    } while (t.consumeOptional("+"));

    if (!e && 1 === i.length) {
      t.discard();
      return i[0];
    }

    const s = t.playback();
    return new CompositeSegmentExpression(s, i, e);
  }

  toInstructions(t, e, i) {
    switch (this.siblings.length) {
      case 0:
        return [];

      case 1:
        return this.siblings[0].toInstructions(t, e, i);

      case 2:
        return [...this.siblings[0].toInstructions(t, e, 0), ...this.siblings[1].toInstructions(t, 0, i)];

      default:
        return [...this.siblings[0].toInstructions(t, e, 0), ...this.siblings.slice(1, -1).flatMap(function (e) {
          return e.toInstructions(t, 0, 0);
        }), ...this.siblings[this.siblings.length - 1].toInstructions(t, 0, i)];
    }
  }

  toString() {
    return this.raw;
  }

}

exports.CompositeSegmentExpression = CompositeSegmentExpression;

class ScopedSegmentExpression {
  constructor(t, e, i) {
    this.raw = t;
    this.left = e;
    this.right = i;
  }

  get kind() {
    return 2;
  }

  static parse(t) {
    t.record();
    const e = SegmentGroupExpression.parse(t);

    if (t.consumeOptional("/")) {
      const i = ScopedSegmentExpression.parse(t);
      const s = t.playback();
      return new ScopedSegmentExpression(s, e, i);
    }

    t.discard();
    return e;
  }

  toInstructions(t, e, i) {
    const s = this.left.toInstructions(t, e, 0);
    const n = this.right.toInstructions(false, 0, i);
    let o = s[s.length - 1];

    while (o.children.length > 0) o = o.children[o.children.length - 1];

    o.children.push(...n);
    return s;
  }

  toString() {
    return this.raw;
  }

}

exports.ScopedSegmentExpression = ScopedSegmentExpression;

class SegmentGroupExpression {
  constructor(t, e) {
    this.raw = t;
    this.expression = e;
  }

  get kind() {
    return 3;
  }

  static parse(t) {
    t.record();

    if (t.consumeOptional("(")) {
      const e = CompositeSegmentExpression.parse(t);
      t.consume(")");
      const i = t.playback();
      return new SegmentGroupExpression(i, e);
    }

    t.discard();
    return SegmentExpression.parse(t);
  }

  toInstructions(t, e, i) {
    return this.expression.toInstructions(t, e + 1, i + 1);
  }

  toString() {
    return this.raw;
  }

}

exports.SegmentGroupExpression = SegmentGroupExpression;

class SegmentExpression {
  constructor(t, e, i, s, n) {
    this.raw = t;
    this.component = e;
    this.action = i;
    this.viewport = s;
    this.scoped = n;
  }

  get kind() {
    return 4;
  }

  static get EMPTY() {
    return new SegmentExpression("", ComponentExpression.EMPTY, ActionExpression.EMPTY, ViewportExpression.EMPTY, true);
  }

  static parse(t) {
    t.record();
    const e = ComponentExpression.parse(t);
    const i = ActionExpression.parse(t);
    const s = ViewportExpression.parse(t);
    const n = !t.consumeOptional("!");
    const o = t.playback();
    return new SegmentExpression(o, e, i, s, n);
  }

  toInstructions(t, e, i) {
    return [ViewportInstruction.create({
      component: this.component.name,
      params: this.component.parameterList.toObject(),
      viewport: this.viewport.name,
      append: t,
      open: e,
      close: i
    })];
  }

  toString() {
    return this.raw;
  }

}

exports.SegmentExpression = SegmentExpression;

class ComponentExpression {
  constructor(t, e, i) {
    this.raw = t;
    this.name = e;
    this.parameterList = i;

    switch (e.charAt(0)) {
      case ":":
        this.isParameter = true;
        this.isStar = false;
        this.isDynamic = true;
        this.parameterName = e.slice(1);
        break;

      case "*":
        this.isParameter = false;
        this.isStar = true;
        this.isDynamic = true;
        this.parameterName = e.slice(1);
        break;

      default:
        this.isParameter = false;
        this.isStar = false;
        this.isDynamic = false;
        this.parameterName = e;
        break;
    }
  }

  get kind() {
    return 5;
  }

  static get EMPTY() {
    return new ComponentExpression("", "", ParameterListExpression.EMPTY);
  }

  static parse(t) {
    t.record();
    t.record();
    if (!t.done) if (t.startsWith("./")) t.advance();else if (t.startsWith("../")) {
      t.advance();
      t.advance();
    } else while (!t.done && !t.startsWith(...gt)) t.advance();
    const e = decodeURIComponent(t.playback());
    if (0 === e.length) t.expect("component name");
    const i = ParameterListExpression.parse(t);
    const s = t.playback();
    return new ComponentExpression(s, e, i);
  }

  toString() {
    return this.raw;
  }

}

exports.ComponentExpression = ComponentExpression;

class ActionExpression {
  constructor(t, e, i) {
    this.raw = t;
    this.name = e;
    this.parameterList = i;
  }

  get kind() {
    return 6;
  }

  static get EMPTY() {
    return new ActionExpression("", "", ParameterListExpression.EMPTY);
  }

  static parse(t) {
    t.record();
    let e = "";

    if (t.consumeOptional(".")) {
      t.record();

      while (!t.done && !t.startsWith(...gt)) t.advance();

      e = decodeURIComponent(t.playback());
      if (0 === e.length) t.expect("method name");
    }

    const i = ParameterListExpression.parse(t);
    const s = t.playback();
    return new ActionExpression(s, e, i);
  }

  toString() {
    return this.raw;
  }

}

exports.ActionExpression = ActionExpression;

class ViewportExpression {
  constructor(t, e) {
    this.raw = t;
    this.name = e;
  }

  get kind() {
    return 7;
  }

  static get EMPTY() {
    return new ViewportExpression("", "");
  }

  static parse(t) {
    t.record();
    let e = "";

    if (t.consumeOptional("@")) {
      t.record();

      while (!t.done && !t.startsWith(...gt)) t.advance();

      e = decodeURIComponent(t.playback());
      if (0 === e.length) t.expect("viewport name");
    }

    const i = t.playback();
    return new ViewportExpression(i, e);
  }

  toString() {
    return this.raw;
  }

}

exports.ViewportExpression = ViewportExpression;

class ParameterListExpression {
  constructor(t, e) {
    this.raw = t;
    this.expressions = e;
  }

  get kind() {
    return 8;
  }

  static get EMPTY() {
    return new ParameterListExpression("", []);
  }

  static parse(t) {
    t.record();
    const e = [];

    if (t.consumeOptional("(")) {
      do {
        e.push(ParameterExpression.parse(t, e.length));
        if (!t.consumeOptional(",")) break;
      } while (!t.done && !t.startsWith(")"));

      t.consume(")");
    }

    const i = t.playback();
    return new ParameterListExpression(i, e);
  }

  toObject() {
    const t = {};

    for (const e of this.expressions) t[e.key] = e.value;

    return t;
  }

  toString() {
    return this.raw;
  }

}

exports.ParameterListExpression = ParameterListExpression;

class ParameterExpression {
  constructor(t, e, i) {
    this.raw = t;
    this.key = e;
    this.value = i;
  }

  get kind() {
    return 9;
  }

  static get EMPTY() {
    return new ParameterExpression("", "", "");
  }

  static parse(t, e) {
    t.record();
    t.record();

    while (!t.done && !t.startsWith(...gt)) t.advance();

    let i = decodeURIComponent(t.playback());
    if (0 === i.length) t.expect("parameter key");
    let s;

    if (t.consumeOptional("=")) {
      t.record();

      while (!t.done && !t.startsWith(...gt)) t.advance();

      s = decodeURIComponent(t.playback());
      if (0 === s.length) t.expect("parameter value");
    } else {
      s = i;
      i = e.toString();
    }

    const n = t.playback();
    return new ParameterExpression(n, i, s);
  }

  toString() {
    return this.raw;
  }

}

exports.ParameterExpression = ParameterExpression;
const $t = Object.freeze({
  RouteExpression: RouteExpression,
  CompositeSegmentExpression: CompositeSegmentExpression,
  ScopedSegmentExpression: ScopedSegmentExpression,
  SegmentGroupExpression: SegmentGroupExpression,
  SegmentExpression: SegmentExpression,
  ComponentExpression: ComponentExpression,
  ActionExpression: ActionExpression,
  ViewportExpression: ViewportExpression,
  ParameterListExpression: ParameterListExpression,
  ParameterExpression: ParameterExpression
});
exports.AST = $t;
let xt = 0;

class RouteNode {
  constructor(t, e, i, s, n, o, r, a, h, c, u, l, d, f, p, g) {
    this.id = t;
    this.path = e;
    this.finalPath = i;
    this.context = s;
    this.originalInstruction = n;
    this.instruction = o;
    this.params = r;
    this.queryParams = a;
    this.fragment = h;
    this.data = c;
    this.viewport = u;
    this.title = l;
    this.component = d;
    this.append = f;
    this.children = p;
    this.residue = g;
    this.version = 1;
    this.originalInstruction = o;
  }

  get root() {
    return this.tree.root;
  }

  static create(t) {
    var e, i, s, n, o, r, a, h;
    return new RouteNode(++xt, t.path, t.finalPath, t.context, t.instruction, t.instruction, null !== (e = t.params) && void 0 !== e ? e : {}, null !== (i = t.queryParams) && void 0 !== i ? i : Tt, null !== (s = t.fragment) && void 0 !== s ? s : null, null !== (n = t.data) && void 0 !== n ? n : {}, null !== (o = t.viewport) && void 0 !== o ? o : null, null !== (r = t.title) && void 0 !== r ? r : null, t.component, t.append, null !== (a = t.children) && void 0 !== a ? a : [], null !== (h = t.residue) && void 0 !== h ? h : []);
  }

  contains(t) {
    var e, i;

    if (this.context === t.options.context) {
      const s = this.children;
      const n = t.children;

      for (let t = 0, o = s.length; t < o; ++t) for (let r = 0, a = n.length; r < a; ++r) if (t + r < o && (null !== (i = null === (e = s[t + r].instruction) || void 0 === e ? void 0 : e.contains(n[r])) && void 0 !== i ? i : false)) {
        if (r + 1 === a) return true;
      } else break;
    }

    return this.children.some(function (e) {
      return e.contains(t);
    });
  }

  appendChild(t) {
    this.children.push(t);
    t.setTree(this.tree);
  }

  appendChildren(...t) {
    for (const e of t) this.appendChild(e);
  }

  clearChildren() {
    for (const t of this.children) {
      t.clearChildren();
      t.context.vpa.cancelUpdate();
    }

    this.children.length = 0;
  }

  getTitle(t) {
    const e = [...this.children.map(e => e.getTitle(t)), this.getTitlePart()].filter(t => null !== t);
    if (0 === e.length) return null;
    return e.join(t);
  }

  getTitlePart() {
    if ("function" === typeof this.title) return this.title.call(void 0, this);
    return this.title;
  }

  computeAbsolutePath() {
    if (this.context.isRoot) return "";
    const t = this.context.parent.node.computeAbsolutePath();
    const e = this.instruction.toUrlComponent(false);

    if (t.length > 0) {
      if (e.length > 0) return [t, e].join("/");
      return t;
    }

    return e;
  }

  setTree(t) {
    this.tree = t;

    for (const e of this.children) e.setTree(t);
  }

  finalizeInstruction() {
    const t = this.children.map(t => t.finalizeInstruction());
    const e = this.instruction.clone();
    e.children.splice(0, e.children.length, ...t);
    return this.instruction = e;
  }

  clone() {
    const t = new RouteNode(this.id, this.path, this.finalPath, this.context, this.originalInstruction, this.instruction, { ...this.params
    }, { ...this.queryParams
    }, this.fragment, { ...this.data
    }, this.viewport, this.title, this.component, this.append, this.children.map(t => t.clone()), [...this.residue]);
    t.version = this.version + 1;
    if (t.context.node === this) t.context.node = t;
    return t;
  }

  toString() {
    var t, e, i, s, n;
    const o = [];
    const r = null !== (i = null === (e = null === (t = this.context) || void 0 === t ? void 0 : t.definition.component) || void 0 === e ? void 0 : e.name) && void 0 !== i ? i : "";
    if (r.length > 0) o.push(`c:'${r}'`);
    const a = null !== (n = null === (s = this.context) || void 0 === s ? void 0 : s.definition.config.path) && void 0 !== n ? n : "";
    if (a.length > 0) o.push(`path:'${a}'`);
    if (this.children.length > 0) o.push(`children:[${this.children.map(String).join(",")}]`);
    if (this.residue.length > 0) o.push(`residue:${this.residue.map(function (t) {
      if ("string" === typeof t) return `'${t}'`;
      return String(t);
    }).join(",")}`);
    return `RN(ctx:'${this.context.friendlyPath}',${o.join(",")})`;
  }

}

exports.RouteNode = RouteNode;

class RouteTree {
  constructor(t, e, i, s) {
    this.options = t;
    this.queryParams = e;
    this.fragment = i;
    this.root = s;
  }

  contains(t) {
    return this.root.contains(t);
  }

  clone() {
    const t = new RouteTree(this.options.clone(), { ...this.queryParams
    }, this.fragment, this.root.clone());
    t.root.setTree(this);
    return t;
  }

  finalizeInstructions() {
    return new ViewportInstructionTree(this.options, true, this.root.children.map(t => t.finalizeInstruction()), this.queryParams, this.fragment);
  }

  toString() {
    return this.root.toString();
  }

}

exports.RouteTree = RouteTree;

function yt(t, e, s) {
  const o = s.container.get(_kernel.ILogger).scopeTo("RouteTree");
  const r = s.root;
  t.options = e.options;
  t.queryParams = e.queryParams;
  t.fragment = e.fragment;
  if (e.isAbsolute) s = r;

  if (s === r) {
    t.root.setTree(t);
    r.node = t.root;
  }

  const a = s.resolved instanceof Promise ? " - awaiting promise" : "";
  o.trace(`updateRouteTree(rootCtx:%s,rt:%s,vit:%s)${a}`, r, t, e);
  return (0, _kernel.onResolve)(s.resolved, () => Et(o, e, s, r.node));
}

function Et(t, e, i, s) {
  t.trace(`updateNode(ctx:%s,node:%s)`, i, s);
  s.queryParams = e.queryParams;
  s.fragment = e.fragment;
  let r;
  if (!s.context.isRoot) r = s.context.vpa.scheduleUpdate(s.tree.options, s);else r = void 0;
  return (0, _kernel.onResolve)(r, () => {
    if (s.context === i) {
      s.clearChildren();
      return (0, _kernel.onResolve)((0, _kernel.resolveAll)(...e.children.map(e => Rt(t, s, e, s.tree.options.append || e.append))), () => (0, _kernel.resolveAll)(...i.getAvailableViewportAgents("dynamic").map(e => {
        const i = ViewportInstruction.create({
          component: e.viewport.default,
          viewport: e.viewport.name
        });
        return Rt(t, s, i, s.append);
      })));
    }

    return (0, _kernel.resolveAll)(...s.children.map(s => Et(t, e, i, s)));
  });
}

function bt(t) {
  const e = t.context;
  const s = e.container.get(_kernel.ILogger).scopeTo("RouteTree");
  const r = e.resolved instanceof Promise ? " - awaiting promise" : "";
  s.trace(`processResidue(node:%s)${r}`, t);
  return (0, _kernel.onResolve)(e.resolved, () => (0, _kernel.resolveAll)(...t.residue.splice(0).map(e => Rt(s, t, e, t.append)), ...e.getAvailableViewportAgents("static").map(e => {
    const i = ViewportInstruction.create({
      component: e.viewport.default,
      viewport: e.viewport.name
    });
    return Rt(s, t, i, t.append);
  })));
}

function St(t) {
  const e = t.context;
  const s = e.container.get(_kernel.ILogger).scopeTo("RouteTree");
  const r = e.resolved instanceof Promise ? " - awaiting promise" : "";
  s.trace(`getDynamicChildren(node:%s)${r}`, t);
  return (0, _kernel.onResolve)(e.resolved, () => {
    const i = t.children.slice();
    return (0, _kernel.onResolve)((0, _kernel.resolveAll)(...t.residue.splice(0).map(e => Rt(s, t, e, t.append)), ...e.getAvailableViewportAgents("dynamic").map(e => {
      const i = ViewportInstruction.create({
        component: e.viewport.default,
        viewport: e.viewport.name
      });
      return Rt(s, t, i, t.append);
    })), () => t.children.filter(t => !i.includes(t)));
  });
}

function Rt(t, e, i, s) {
  var n, r;
  t.trace(`createAndAppendNodes(node:%s,vi:%s,append:${s})`, e, i);

  switch (i.component.type) {
    case 0:
      switch (i.component.value) {
        case "..":
          e.clearChildren();
          e = null !== (r = null === (n = e.context.parent) || void 0 === n ? void 0 : n.node) && void 0 !== r ? r : e;

        case ".":
          return (0, _kernel.resolveAll)(...i.children.map(i => Rt(t, e, i, i.append)));

        default:
          {
            const n = Ct(t, e, i, s);
            if (null === n) return;
            return Nt(t, e, n);
          }
      }

    case 4:
    case 2:
      {
        const n = RouteDefinition.resolve(i.component.value);
        const o = It(t, e, i, s, n.component);
        return Nt(t, e, o);
      }
  }
}

function Ct(t, e, i, s) {
  const n = e.context;
  let o = 0;
  let r = i.component.value;
  let a = i;

  while (1 === a.children.length) {
    a = a.children[0];

    if (0 === a.component.type) {
      ++o;
      r = `${r}/${a.component.value}`;
    } else break;
  }

  const h = n.recognize(r);

  if (null === h) {
    const o = i.component.value;
    let r = n.container.find(_runtimeHtml.CustomElement, o);

    switch (e.tree.options.routingMode) {
      case "configured-only":
        if (null === r) {
          if ("" === o) return null;
          throw new Error(`'${o}' did not match any configured route or registered component name at '${n.friendlyPath}' - did you forget to add '${o}' to the routes list of the route decorator of '${n.component.name}'?`);
        }

        throw new Error(`'${o}' did not match any configured route, but it does match a registered component name at '${n.friendlyPath}' - did you forget to add a @route({ path: '${o}' }) decorator to '${o}' or unintentionally set routingMode to 'configured-only'?`);

      case "configured-first":
        if (null === r) {
          if ("" === o) return null;
          const t = null === i.viewport || 0 === i.viewport.length ? "default" : i.viewport;
          const e = n.getFallbackViewportAgent("dynamic", t);
          if (null === e) throw new Error(`'${o}' did not match any configured route or registered component name at '${n.friendlyPath}' and no fallback was provided for viewport '${t}' - did you forget to add the component '${o}' to the dependencies of '${n.component.name}' or to register it as a global dependency?`);
          const s = e.viewport.fallback;
          r = n.container.find(_runtimeHtml.CustomElement, s);
          if (null === r) throw new Error(`the requested component '${o}' and the fallback '${s}' at viewport '${t}' did not match any configured route or registered component name at '${n.friendlyPath}' - did you forget to add the component '${o}' to the dependencies of '${n.component.name}' or to register it as a global dependency?`);
        }

        return It(t, e, i, s, r);
    }
  }

  const c = null === h.residue ? r : r.slice(0, -(h.residue.length + 1));
  i.component.value = c;

  for (let t = 0; t < o; ++t) i.children = i.children[0].children;

  return kt(t, e, i, s, h);
}

function kt(t, e, i, s, o, r = o.route.endpoint.route) {
  const a = e.context;
  const h = e.tree;
  return (0, _kernel.onResolve)(r.handler, n => {
    r.handler = n;

    if (null === n.redirectTo) {
      const c = n.viewport;
      const u = n.component;
      const l = a.resolveViewportAgent(ViewportRequest.create({
        viewportName: c,
        componentName: u.name,
        append: s,
        resolution: h.options.resolutionMode
      }));
      const d = a.container.get(Ut);
      const f = d.getRouteContext(l, u, l.hostController.container);
      f.node = RouteNode.create({
        path: o.route.endpoint.route.path,
        finalPath: r.path,
        context: f,
        instruction: i,
        params: { ...e.params,
          ...o.route.params
        },
        queryParams: h.queryParams,
        fragment: h.fragment,
        data: n.data,
        viewport: c,
        component: u,
        append: s,
        title: n.config.title,
        residue: null === o.residue ? [] : [ViewportInstruction.create(o.residue)]
      });
      f.node.setTree(e.tree);
      t.trace(`createConfiguredNode(vi:%s) -> %s`, i, f.node);
      return f.node;
    }

    const c = RouteExpression.parse(r.path, false);
    const u = RouteExpression.parse(n.redirectTo, false);
    let l;
    let d;
    const f = [];

    switch (c.root.kind) {
      case 2:
      case 4:
        l = c.root;
        break;

      default:
        throw new Error(`Unexpected expression kind ${c.root.kind}`);
    }

    switch (u.root.kind) {
      case 2:
      case 4:
        d = u.root;
        break;

      default:
        throw new Error(`Unexpected expression kind ${u.root.kind}`);
    }

    let p;
    let g;
    let v = false;
    let w = false;

    while (!(v && w)) {
      if (v) p = null;else if (4 === l.kind) {
        p = l;
        v = true;
      } else if (4 === l.left.kind) {
        p = l.left;

        switch (l.right.kind) {
          case 2:
          case 4:
            l = l.right;
            break;

          default:
            throw new Error(`Unexpected expression kind ${l.right.kind}`);
        }
      } else throw new Error(`Unexpected expression kind ${l.left.kind}`);
      if (w) g = null;else if (4 === d.kind) {
        g = d;
        w = true;
      } else if (4 === d.left.kind) {
        g = d.left;

        switch (d.right.kind) {
          case 2:
          case 4:
            d = d.right;
            break;

          default:
            throw new Error(`Unexpected expression kind ${d.right.kind}`);
        }
      } else throw new Error(`Unexpected expression kind ${d.left.kind}`);
      if (null !== g) if (g.component.isDynamic && (null === p || void 0 === p ? void 0 : p.component.isDynamic)) f.push(o.route.params[p.component.name]);else f.push(g.raw);
    }

    const m = f.filter(Boolean).join("/");
    const $ = a.recognize(m);

    if (null === $) {
      const n = m;
      const o = a.container.find(_runtimeHtml.CustomElement, m);

      switch (h.options.routingMode) {
        case "configured-only":
          if (null === o) throw new Error(`'${n}' did not match any configured route or registered component name at '${a.friendlyPath}' - did you forget to add '${n}' to the routes list of the route decorator of '${a.component.name}'?`);
          throw new Error(`'${n}' did not match any configured route, but it does match a registered component name at '${a.friendlyPath}' - did you forget to add a @route({ path: '${n}' }) decorator to '${n}' or unintentionally set routingMode to 'configured-only'?`);

        case "configured-first":
          if (null === o) throw new Error(`'${n}' did not match any configured route or registered component name at '${a.friendlyPath}' - did you forget to add the component '${n}' to the dependencies of '${a.component.name}' or to register it as a global dependency?`);
          return It(t, e, i, s, o);
      }
    }

    return kt(t, e, i, s, o, $.route.endpoint.route);
  });
}

function It(t, e, i, s, n) {
  var o;
  const r = e.context;
  const a = e.tree;
  const h = null !== (o = i.viewport) && void 0 !== o ? o : "default";
  const c = r.resolveViewportAgent(ViewportRequest.create({
    viewportName: h,
    componentName: n.name,
    append: s,
    resolution: a.options.resolutionMode
  }));
  const u = r.container.get(Ut);
  const l = u.getRouteContext(c, n, c.hostController.container);
  const d = RouteDefinition.resolve(n);
  l.node = RouteNode.create({
    path: n.name,
    finalPath: n.name,
    context: l,
    instruction: i,
    params: { ...r.node.params,
      ...i.params
    },
    queryParams: a.queryParams,
    fragment: a.fragment,
    data: d.data,
    viewport: h,
    component: n,
    append: s,
    title: d.config.title,
    residue: [...i.children]
  });
  l.node.setTree(r.node.tree);
  t.trace(`createDirectNode(vi:%s) -> %s`, i, l.node);
  return l.node;
}

function Nt(t, e, i) {
  return (0, _kernel.onResolve)(i, i => {
    t.trace(`appendNode($childNode:%s)`, i);
    e.appendChild(i);
    return i.context.vpa.scheduleUpdate(e.tree.options, i);
  });
}

const Tt = Object.freeze(new URLSearchParams());
const Vt = "au-nav-id";
exports.AuNavId = Vt;

function At(t) {
  return (0, _kernel.isObject)(t) && true === Object.prototype.hasOwnProperty.call(t, Vt);
}

function Pt(t, e) {
  return { ...t,
    [Vt]: e
  };
}

function Lt(t, e) {
  if ("function" === typeof e) return e(t);
  return e;
}

class RouterOptions {
  constructor(t, e, i, s, n, o, r, a, h, c) {
    this.useUrlFragmentHash = t;
    this.useHref = e;
    this.statefulHistoryLength = i;
    this.routingMode = s;
    this.swapStrategy = n;
    this.resolutionMode = o;
    this.queryParamsStrategy = r;
    this.fragmentStrategy = a;
    this.historyStrategy = h;
    this.sameUrlStrategy = c;
  }

  static get DEFAULT() {
    return RouterOptions.create({});
  }

  static create(t) {
    var e, i, s, n, o, r, a, h, c, u;
    return new RouterOptions(null !== (e = t.useUrlFragmentHash) && void 0 !== e ? e : false, null !== (i = t.useHref) && void 0 !== i ? i : true, null !== (s = t.statefulHistoryLength) && void 0 !== s ? s : 0, null !== (n = t.routingMode) && void 0 !== n ? n : "configured-first", null !== (o = t.swapStrategy) && void 0 !== o ? o : "sequential-remove-first", null !== (r = t.resolutionMode) && void 0 !== r ? r : "dynamic", null !== (a = t.queryParamsStrategy) && void 0 !== a ? a : "overwrite", null !== (h = t.fragmentStrategy) && void 0 !== h ? h : "overwrite", null !== (c = t.historyStrategy) && void 0 !== c ? c : "push", null !== (u = t.sameUrlStrategy) && void 0 !== u ? u : "ignore");
  }

  getQueryParamsStrategy(t) {
    return Lt(t, this.queryParamsStrategy);
  }

  getFragmentStrategy(t) {
    return Lt(t, this.fragmentStrategy);
  }

  getHistoryStrategy(t) {
    return Lt(t, this.historyStrategy);
  }

  getSameUrlStrategy(t) {
    return Lt(t, this.sameUrlStrategy);
  }

  stringifyProperties() {
    return [["routingMode", "mode"], ["swapStrategy", "swap"], ["resolutionMode", "resolution"], ["queryParamsStrategy", "queryParams"], ["fragmentStrategy", "fragment"], ["historyStrategy", "history"], ["sameUrlStrategy", "sameUrl"]].map(([t, e]) => {
      const i = this[t];
      return `${e}:${"function" === typeof i ? i : `'${i}'`}`;
    }).join(",");
  }

  clone() {
    return new RouterOptions(this.useUrlFragmentHash, this.useHref, this.statefulHistoryLength, this.routingMode, this.swapStrategy, this.resolutionMode, this.queryParamsStrategy, this.fragmentStrategy, this.historyStrategy, this.sameUrlStrategy);
  }

  toString() {
    return `RO(${this.stringifyProperties()})`;
  }

}

exports.RouterOptions = RouterOptions;

class NavigationOptions extends RouterOptions {
  constructor(t, e, i, s, n, o, r, a) {
    super(t.useUrlFragmentHash, t.useHref, t.statefulHistoryLength, t.routingMode, t.swapStrategy, t.resolutionMode, t.queryParamsStrategy, t.fragmentStrategy, t.historyStrategy, t.sameUrlStrategy);
    this.title = e;
    this.titleSeparator = i;
    this.append = s;
    this.context = n;
    this.queryParams = o;
    this.fragment = r;
    this.state = a;
  }

  static get DEFAULT() {
    return NavigationOptions.create({});
  }

  static create(t) {
    var e, i, s, n, o, r, a;
    return new NavigationOptions(RouterOptions.create(t), null !== (e = t.title) && void 0 !== e ? e : null, null !== (i = t.titleSeparator) && void 0 !== i ? i : " | ", null !== (s = t.append) && void 0 !== s ? s : false, null !== (n = t.context) && void 0 !== n ? n : null, null !== (o = t.queryParams) && void 0 !== o ? o : null, null !== (r = t.fragment) && void 0 !== r ? r : "", null !== (a = t.state) && void 0 !== a ? a : null);
  }

  clone() {
    return new NavigationOptions(super.clone(), this.title, this.titleSeparator, this.append, this.context, { ...this.queryParams
    }, this.fragment, null === this.state ? null : { ...this.state
    });
  }

  toString() {
    return `NO(${super.stringifyProperties()})`;
  }

}

exports.NavigationOptions = NavigationOptions;

class Navigation {
  constructor(t, e, i, s, n, o) {
    this.id = t;
    this.instructions = e;
    this.trigger = i;
    this.options = s;
    this.prevNavigation = n;
    this.finalInstructions = o;
  }

  static create(t) {
    return new Navigation(t.id, t.instructions, t.trigger, t.options, t.prevNavigation, t.finalInstructions);
  }

  toString() {
    return `N(id:${this.id},instructions:${this.instructions},trigger:'${this.trigger}')`;
  }

}

exports.Navigation = Navigation;

class Transition {
  constructor(t, e, i, s, n, o, r, a, h, c, u, l, d, f, p) {
    this.id = t;
    this.prevInstructions = e;
    this.instructions = i;
    this.finalInstructions = s;
    this.instructionsChanged = n;
    this.trigger = o;
    this.options = r;
    this.managedState = a;
    this.previousRouteTree = h;
    this.routeTree = c;
    this.promise = u;
    this.resolve = l;
    this.reject = d;
    this.guardsResult = f;
    this.error = p;
  }

  static create(t) {
    return new Transition(t.id, t.prevInstructions, t.instructions, t.finalInstructions, t.instructionsChanged, t.trigger, t.options, t.managedState, t.previousRouteTree, t.routeTree, t.promise, t.resolve, t.reject, t.guardsResult, void 0);
  }

  run(t, e) {
    if (true !== this.guardsResult) return;

    try {
      const i = t();
      if (i instanceof Promise) i.then(e).catch(t => {
        this.handleError(t);
      });else e(i);
    } catch (t) {
      this.handleError(t);
    }
  }

  handleError(t) {
    this.reject(this.error = t);
  }

  toString() {
    return `T(id:${this.id},trigger:'${this.trigger}',instructions:${this.instructions},options:${this.options})`;
  }

}

exports.Transition = Transition;

const Ut = _kernel.DI.createInterface("IRouter", t => t.singleton(Ot));

exports.IRouter = Ut;
let Ot = class Router {
  constructor(t, e, i, s, n) {
    this.container = t;
    this.p = e;
    this.logger = i;
    this.events = s;
    this.locationMgr = n;
    this.t = null;
    this.i = null;
    this.o = null;
    this.options = RouterOptions.DEFAULT;
    this.navigated = false;
    this.navigationId = 0;
    this.lastSuccessfulNavigation = null;
    this.activeNavigation = null;
    this.instructions = ViewportInstructionTree.create("");
    this.nextTr = null;
    this.locationChangeSubscription = null;
    this.vpaLookup = new Map();
    this.logger = i.root.scopeTo("Router");
  }

  get ctx() {
    let t = this.t;

    if (null === t) {
      if (!this.container.has(Gt, true)) throw new Error(`Root RouteContext is not set. Did you forget to register RouteConfiguration, or try to navigate before calling Aurelia.start()?`);
      t = this.t = this.container.get(Gt);
    }

    return t;
  }

  get routeTree() {
    let t = this.i;

    if (null === t) {
      const e = this.ctx;
      t = this.i = new RouteTree(NavigationOptions.create({ ...this.options
      }), Tt, null, RouteNode.create({
        path: "",
        finalPath: "",
        context: e,
        instruction: null,
        component: e.definition.component,
        append: false
      }));
    }

    return t;
  }

  get currentTr() {
    let t = this.o;
    if (null === t) t = this.o = Transition.create({
      id: 0,
      prevInstructions: this.instructions,
      instructions: this.instructions,
      finalInstructions: this.instructions,
      instructionsChanged: true,
      trigger: "api",
      options: NavigationOptions.DEFAULT,
      managedState: null,
      previousRouteTree: this.routeTree.clone(),
      routeTree: this.routeTree,
      resolve: null,
      reject: null,
      promise: null,
      guardsResult: true,
      error: void 0
    });
    return t;
  }

  set currentTr(t) {
    this.o = t;
  }

  resolveContext(t) {
    return RouteContext.resolve(this.ctx, t);
  }

  start(t, e) {
    this.options = RouterOptions.create(t);
    this.locationMgr.startListening();
    this.locationChangeSubscription = this.events.subscribe("au:router:location-change", t => {
      this.p.taskQueue.queueTask(() => {
        const e = At(t.state) ? t.state : null;
        const i = NavigationOptions.create({ ...this.options,
          historyStrategy: "replace"
        });
        const s = ViewportInstructionTree.create(t.url, i);
        this.enqueue(s, t.trigger, e, null);
      });
    });
    if (!this.navigated && e) return this.load(this.locationMgr.getPath(), {
      historyStrategy: "replace"
    });
  }

  stop() {
    var t;
    this.locationMgr.stopListening();
    null === (t = this.locationChangeSubscription) || void 0 === t ? void 0 : t.dispose();
  }

  load(t, e) {
    const i = this.createViewportInstructions(t, e);
    this.logger.trace("load(instructions:%s)", i);
    return this.enqueue(i, "api", null, null);
  }

  isActive(t, e) {
    const i = this.resolveContext(e);
    const s = this.createViewportInstructions(t, {
      context: i
    });
    this.logger.trace("isActive(instructions:%s,ctx:%s)", s, i);
    return this.routeTree.contains(s);
  }

  getRouteContext(t, e, s) {
    const n = s.get(_kernel.ILogger).scopeTo("RouteContext");
    const o = RouteDefinition.resolve(e.Type);
    let r = this.vpaLookup.get(t);
    if (void 0 === r) this.vpaLookup.set(t, r = new WeakMap());
    let a = r.get(o);

    if (void 0 === a) {
      n.trace(`creating new RouteContext for %s`, o);
      const i = s.has(Gt, true) ? s.get(Gt) : null;
      r.set(o, a = new RouteContext(t, i, e, o, s));
    } else {
      n.trace(`returning existing RouteContext for %s`, o);
      if (null !== t) a.vpa = t;
    }

    return a;
  }

  createViewportInstructions(t, e) {
    if ("string" === typeof t) t = this.locationMgr.removeBaseHref(t);
    return ViewportInstructionTree.create(t, this.getNavigationOptions(e));
  }

  enqueue(t, e, i, s) {
    const n = this.currentTr;

    if ("api" !== e && "api" === n.trigger && n.instructions.equals(t)) {
      this.logger.debug(`Ignoring navigation triggered by '%s' because it is the same URL as the previous navigation which was triggered by 'api'.`, e);
      return true;
    }

    let o;
    let r;
    let a;
    if (null === s) a = new Promise(function (t, e) {
      o = t;
      r = e;
    });else {
      this.logger.debug(`Reusing promise/resolve/reject from the previously failed transition %s`, s);
      a = s.promise;
      o = s.resolve;
      r = s.reject;
    }
    const h = this.nextTr = Transition.create({
      id: ++this.navigationId,
      trigger: e,
      managedState: i,
      prevInstructions: n.finalInstructions,
      finalInstructions: t,
      instructionsChanged: !n.finalInstructions.equals(t),
      instructions: t,
      options: t.options,
      promise: a,
      resolve: o,
      reject: r,
      previousRouteTree: this.routeTree,
      routeTree: this.i = this.routeTree.clone(),
      guardsResult: true,
      error: void 0
    });
    this.logger.debug(`Scheduling transition: %s`, h);
    if (null === this.activeNavigation) try {
      this.run(h);
    } catch (t) {
      h.handleError(t);
    }
    return h.promise.then(t => {
      this.logger.debug(`Transition succeeded: %s`, h);
      return t;
    }).catch(t => {
      this.logger.error(`Navigation failed: %s`, h, t);
      throw t;
    });
  }

  run(t) {
    this.currentTr = t;
    this.nextTr = null;
    const e = null === this.lastSuccessfulNavigation ? null : Navigation.create({ ...this.lastSuccessfulNavigation,
      prevNavigation: null
    });
    this.activeNavigation = Navigation.create({
      id: t.id,
      instructions: t.instructions,
      trigger: t.trigger,
      options: t.options,
      prevNavigation: e,
      finalInstructions: t.finalInstructions
    });
    const i = this.resolveContext(t.options.context);
    const s = !this.navigated || t.instructions.children.length !== i.node.children.length || t.instructions.children.some((t, e) => {
      var s, n;
      return !(null !== (n = null === (s = i.node.children[e]) || void 0 === s ? void 0 : s.originalInstruction.equals(t)) && void 0 !== n ? n : false);
    });
    const n = s || "reload" === t.options.getSameUrlStrategy(this.instructions);

    if (!n) {
      this.logger.trace(`run(tr:%s) - NOT processing route`, t);
      this.navigated = true;
      this.activeNavigation = null;
      t.resolve(false);
      this.runNextTransition(t);
      return;
    }

    this.logger.trace(`run(tr:%s) - processing route`, t);
    this.events.publish(new NavigationStartEvent(t.id, t.instructions, t.trigger, t.managedState));

    if (null !== this.nextTr) {
      this.logger.debug(`run(tr:%s) - aborting because a new transition was queued in response to the NavigationStartEvent`, t);
      return this.run(this.nextTr);
    }

    this.activeNavigation = Navigation.create({ ...this.activeNavigation,
      finalInstructions: t.finalInstructions
    });
    t.run(() => {
      this.logger.trace(`run() - compiling route tree: %s`, t.finalInstructions);
      return yt(t.routeTree, t.finalInstructions, i);
    }, () => {
      const e = t.previousRouteTree.root.children;
      const i = t.routeTree.root.children;
      const s = B(e, i);
      Batch.start(i => {
        this.logger.trace(`run() - invoking canUnload on ${e.length} nodes`);

        for (const s of e) s.context.vpa.canUnload(t, i);
      }).continueWith(e => {
        if (true !== t.guardsResult) {
          e.push();
          this.cancelNavigation(t);
        }
      }).continueWith(e => {
        this.logger.trace(`run() - invoking canLoad on ${i.length} nodes`);

        for (const s of i) s.context.vpa.canLoad(t, e);
      }).continueWith(e => {
        if (true !== t.guardsResult) {
          e.push();
          this.cancelNavigation(t);
        }
      }).continueWith(i => {
        this.logger.trace(`run() - invoking unload on ${e.length} nodes`);

        for (const s of e) s.context.vpa.unload(t, i);
      }).continueWith(e => {
        this.logger.trace(`run() - invoking load on ${i.length} nodes`);

        for (const s of i) s.context.vpa.load(t, e);
      }).continueWith(e => {
        this.logger.trace(`run() - invoking swap on ${s.length} nodes`);

        for (const i of s) i.context.vpa.swap(t, e);
      }).continueWith(() => {
        this.logger.trace(`run() - finalizing transition`);
        s.forEach(function (t) {
          t.context.vpa.endTransition();
        });
        this.navigated = true;
        this.instructions = t.finalInstructions = t.routeTree.finalizeInstructions();
        this.events.publish(new NavigationEndEvent(t.id, t.instructions, this.instructions));
        this.lastSuccessfulNavigation = this.activeNavigation;
        this.activeNavigation = null;
        this.applyHistoryState(t);
        t.resolve(true);
        this.runNextTransition(t);
      }).start();
    });
  }

  applyHistoryState(t) {
    const e = t.finalInstructions.toUrl(this.options.useUrlFragmentHash);

    switch (t.options.getHistoryStrategy(this.instructions)) {
      case "none":
        break;

      case "push":
        this.locationMgr.pushState(Pt(t.options.state, t.id), this.updateTitle(t), e);
        break;

      case "replace":
        this.locationMgr.replaceState(Pt(t.options.state, t.id), this.updateTitle(t), e);
        break;
    }
  }

  getTitle(t) {
    var e, i;

    switch (typeof t.options.title) {
      case "function":
        return null !== (e = t.options.title.call(void 0, t.routeTree.root)) && void 0 !== e ? e : "";

      case "string":
        return t.options.title;

      default:
        return null !== (i = t.routeTree.root.getTitle(t.options.titleSeparator)) && void 0 !== i ? i : "";
    }
  }

  updateTitle(t) {
    const e = this.getTitle(t);
    if (e.length > 0) this.p.document.title = e;
    return this.p.document.title;
  }

  cancelNavigation(t) {
    this.logger.trace(`cancelNavigation(tr:%s)`, t);
    const e = t.previousRouteTree.root.children;
    const i = t.routeTree.root.children;
    const s = B(e, i);
    s.forEach(function (t) {
      t.context.vpa.cancelUpdate();
    });
    this.activeNavigation = null;
    this.instructions = t.prevInstructions;
    this.i = t.previousRouteTree;
    this.events.publish(new NavigationCancelEvent(t.id, t.instructions, `guardsResult is ${t.guardsResult}`));

    if (false === t.guardsResult) {
      t.resolve(false);
      this.runNextTransition(t);
    } else void (0, _kernel.onResolve)(this.enqueue(t.guardsResult, "api", t.managedState, t), () => {
      this.logger.trace(`cancelNavigation(tr:%s) - finished redirect`, t);
    });
  }

  runNextTransition(t) {
    if (null !== this.nextTr) {
      this.logger.trace(`runNextTransition(tr:%s) -> scheduling nextTransition: %s`, t, this.nextTr);
      this.p.taskQueue.queueTask(() => {
        const t = this.nextTr;
        if (null !== t) try {
          this.run(t);
        } catch (e) {
          t.handleError(e);
        }
      });
    }
  }

  getNavigationOptions(t) {
    return NavigationOptions.create({ ...this.options,
      ...t
    });
  }

};
exports.Router = Ot;
exports.Router = Ot = K([X(0, _kernel.IContainer), X(1, _runtimeHtml.IPlatform), X(2, _kernel.ILogger), X(3, tt), X(4, nt)], Ot);

const jt = _kernel.DI.createInterface("IViewportInstruction");

exports.IViewportInstruction = jt;

class ViewportInstruction {
  constructor(t, e, i, s, n, o, r, a) {
    this.context = t;
    this.append = e;
    this.open = i;
    this.close = s;
    this.component = n;
    this.viewport = o;
    this.params = r;
    this.children = a;
  }

  static create(t, e) {
    var i, s, n, o, r, a, h, c, u;
    if (t instanceof ViewportInstruction) return t;

    if (G(t)) {
      const l = TypedNavigationInstruction.create(t.component);
      const d = null !== (s = null === (i = t.children) || void 0 === i ? void 0 : i.map(ViewportInstruction.create)) && void 0 !== s ? s : [];
      return new ViewportInstruction(null !== (o = null !== (n = t.context) && void 0 !== n ? n : e) && void 0 !== o ? o : null, null !== (r = t.append) && void 0 !== r ? r : false, null !== (a = t.open) && void 0 !== a ? a : 0, null !== (h = t.close) && void 0 !== h ? h : 0, l, null !== (c = t.viewport) && void 0 !== c ? c : null, null !== (u = t.params) && void 0 !== u ? u : null, d);
    }

    const l = TypedNavigationInstruction.create(t);
    return new ViewportInstruction(null !== e && void 0 !== e ? e : null, false, 0, 0, l, null, null, []);
  }

  contains(t) {
    const e = this.children;
    const i = t.children;
    if (e.length < i.length) return false;
    if (!this.component.equals(t.component)) return false;

    for (let t = 0, s = i.length; t < s; ++t) if (!e[t].contains(i[t])) return false;

    return true;
  }

  equals(t) {
    const e = this.children;
    const i = t.children;
    if (e.length !== i.length) return false;
    if (!this.component.equals(t.component) || this.viewport !== t.viewport || !Q(this.params, t.params)) return false;

    for (let t = 0, s = e.length; t < s; ++t) if (!e[t].equals(i[t])) return false;

    return true;
  }

  clone() {
    return new ViewportInstruction(this.context, this.append, this.open, this.close, this.component.clone(), this.viewport, null === this.params ? null : { ...this.params
    }, [...this.children]);
  }

  toUrlComponent(t = true) {
    const e = this.component.toUrlComponent();
    const i = null === this.params || 0 === Object.keys(this.params).length ? "" : `(${Bt(this.params)})`;
    const s = 0 === e.length || null === this.viewport || 0 === this.viewport.length ? "" : `@${this.viewport}`;
    const n = `${"(".repeat(this.open)}${e}${i}${s}${")".repeat(this.close)}`;
    const o = t ? this.children.map(t => t.toUrlComponent()).join("+") : "";

    if (n.length > 0) {
      if (o.length > 0) return [n, o].join("/");
      return n;
    }

    return o;
  }

  toString() {
    const t = `c:${this.component}`;
    const e = null === this.viewport || 0 === this.viewport.length ? "" : `viewport:${this.viewport}`;
    const i = 0 === this.children.length ? "" : `children:[${this.children.map(String).join(",")}]`;
    const s = [t, e, i].filter(Boolean).join(",");
    return `VPI(${s})`;
  }

}

function Bt(t) {
  const e = Object.keys(t);
  const i = Array(e.length);
  const s = [];
  const n = [];

  for (const t of e) if ((0, _kernel.isArrayIndex)(t)) s.push(Number(t));else n.push(t);

  for (let o = 0; o < e.length; ++o) {
    const e = s.indexOf(o);

    if (e > -1) {
      i[o] = t[o];
      s.splice(e, 1);
    } else {
      const e = n.shift();
      i[o] = `${e}=${t[e]}`;
    }
  }

  return i.join(",");
}

const Dt = function () {
  let t = 0;
  const e = new Map();
  return function (i) {
    let s = e.get(i);
    if (void 0 === s) e.set(i, s = ++t);
    return s;
  };
}();

class ViewportInstructionTree {
  constructor(t, e, i, s, n) {
    this.options = t;
    this.isAbsolute = e;
    this.children = i;
    this.queryParams = s;
    this.fragment = n;
  }

  static create(t, e) {
    const i = NavigationOptions.create({ ...e
    });
    if (t instanceof ViewportInstructionTree) return new ViewportInstructionTree(i, t.isAbsolute, t.children.map(t => ViewportInstruction.create(t, i.context)), t.queryParams, t.fragment);
    if (t instanceof Array) return new ViewportInstructionTree(i, false, t.map(t => ViewportInstruction.create(t, i.context)), Tt, null);

    if ("string" === typeof t) {
      const e = RouteExpression.parse(t, i.useUrlFragmentHash);
      return e.toInstructionTree(i);
    }

    return new ViewportInstructionTree(i, false, [ViewportInstruction.create(t, i.context)], Tt, null);
  }

  equals(t) {
    const e = this.children;
    const i = t.children;
    if (e.length !== i.length) return false;

    for (let t = 0, s = e.length; t < s; ++t) if (!e[t].equals(i[t])) return false;

    return true;
  }

  toUrl(t = false) {
    var e;
    let i;
    let s;

    if (t) {
      i = "";
      s = `#${this.toPath()}`;
    } else {
      i = this.toPath();
      s = null !== (e = this.fragment) && void 0 !== e ? e : "";
    }

    let n = this.queryParams.toString();
    n = "" === n ? "" : `?${n}`;
    const o = `${i}${s}${n}`;
    return o;
  }

  toPath() {
    const t = this.children.map(t => t.toUrlComponent()).join("+");
    return t;
  }

  toString() {
    return `[${this.children.map(String).join(",")}]`;
  }

}

var Mt;

(function (t) {
  t[t["string"] = 0] = "string";
  t[t["ViewportInstruction"] = 1] = "ViewportInstruction";
  t[t["CustomElementDefinition"] = 2] = "CustomElementDefinition";
  t[t["Promise"] = 3] = "Promise";
  t[t["IRouteViewModel"] = 4] = "IRouteViewModel";
})(Mt || (Mt = {}));

class TypedNavigationInstruction {
  constructor(t, e) {
    this.type = t;
    this.value = e;
  }

  static create(t) {
    if (t instanceof TypedNavigationInstruction) return t;
    if ("string" === typeof t) return new TypedNavigationInstruction(0, t);else if (!(0, _kernel.isObject)(t)) Y("function/class or object", "", t);else if ("function" === typeof t) {
      if (_runtimeHtml.CustomElement.isType(t)) {
        const e = _runtimeHtml.CustomElement.getDefinition(t);

        return new TypedNavigationInstruction(2, e);
      } else return TypedNavigationInstruction.create(t());
    } else if (t instanceof Promise) return new TypedNavigationInstruction(3, t);else if (G(t)) {
      const e = ViewportInstruction.create(t);
      return new TypedNavigationInstruction(1, e);
    } else if ((0, _runtimeHtml.isCustomElementViewModel)(t)) return new TypedNavigationInstruction(4, t);else if (t instanceof _runtimeHtml.CustomElementDefinition) return new TypedNavigationInstruction(2, t);else if (F(t)) {
      const e = _runtimeHtml.CustomElement.define(t);

      const i = _runtimeHtml.CustomElement.getDefinition(e);

      return new TypedNavigationInstruction(2, i);
    } else throw new Error(`Invalid component ${D(t)}: must be either a class, a custom element ViewModel, or a (partial) custom element definition`);
  }

  equals(t) {
    switch (this.type) {
      case 2:
      case 4:
      case 3:
      case 0:
        return this.type === t.type && this.value === t.value;

      case 1:
        return this.type === t.type && this.value.equals(t.value);
    }
  }

  clone() {
    return new TypedNavigationInstruction(this.type, this.value);
  }

  toUrlComponent() {
    switch (this.type) {
      case 2:
        return this.value.name;

      case 4:
      case 3:
        return `au$obj${Dt(this.value)}`;

      case 1:
        return this.value.toUrlComponent();

      case 0:
        return this.value;
    }
  }

  toString() {
    switch (this.type) {
      case 2:
        return `CEDef(name:'${this.value.name}')`;

      case 3:
        return `Promise`;

      case 4:
        return `VM(name:'${_runtimeHtml.CustomElement.getDefinition(this.value.constructor).name}')`;

      case 1:
        return this.value.toString();

      case 0:
        return `'${this.value}'`;
    }
  }

}

const qt = _kernel.emptyArray;

function Ht(t, e) {
  if (!Q(t.params, e.params)) return "invoke-lifecycles";
  return "none";
}

class RouteConfig {
  constructor(t, e, i, s, n, o, r, a, h) {
    this.id = t;
    this.path = e;
    this.title = i;
    this.redirectTo = s;
    this.caseSensitive = n;
    this.transitionPlan = o;
    this.viewport = r;
    this.data = a;
    this.routes = h;
  }

  static create(t, e) {
    var i, s, n, o, r, a, h, c, u, l, d, f, p, g, v, w, m, $, x, y, E, b, S, R;

    if ("string" === typeof t || t instanceof Array) {
      const u = t;
      const l = null !== (i = null === e || void 0 === e ? void 0 : e.redirectTo) && void 0 !== i ? i : null;
      const d = null !== (s = null === e || void 0 === e ? void 0 : e.caseSensitive) && void 0 !== s ? s : false;
      const f = null !== (n = null === e || void 0 === e ? void 0 : e.id) && void 0 !== n ? n : u instanceof Array ? u[0] : u;
      const p = null !== (o = null === e || void 0 === e ? void 0 : e.title) && void 0 !== o ? o : null;
      const g = null !== (r = null === e || void 0 === e ? void 0 : e.transitionPlan) && void 0 !== r ? r : Ht;
      const v = null !== (a = null === e || void 0 === e ? void 0 : e.viewport) && void 0 !== a ? a : null;
      const w = null !== (h = null === e || void 0 === e ? void 0 : e.data) && void 0 !== h ? h : {};
      const m = null !== (c = null === e || void 0 === e ? void 0 : e.routes) && void 0 !== c ? c : qt;
      return new RouteConfig(f, u, p, l, d, g, v, w, m);
    } else if ("object" === typeof t) {
      const i = t;

      _(i, "");

      const s = null !== (l = null !== (u = i.path) && void 0 !== u ? u : null === e || void 0 === e ? void 0 : e.path) && void 0 !== l ? l : null;
      const n = null !== (f = null !== (d = i.title) && void 0 !== d ? d : null === e || void 0 === e ? void 0 : e.title) && void 0 !== f ? f : null;
      const o = null !== (g = null !== (p = i.redirectTo) && void 0 !== p ? p : null === e || void 0 === e ? void 0 : e.redirectTo) && void 0 !== g ? g : null;
      const r = null !== (w = null !== (v = i.caseSensitive) && void 0 !== v ? v : null === e || void 0 === e ? void 0 : e.caseSensitive) && void 0 !== w ? w : false;
      const a = null !== ($ = null !== (m = i.id) && void 0 !== m ? m : null === e || void 0 === e ? void 0 : e.id) && void 0 !== $ ? $ : s instanceof Array ? s[0] : s;
      const h = null !== (y = null !== (x = i.transitionPlan) && void 0 !== x ? x : null === e || void 0 === e ? void 0 : e.transitionPlan) && void 0 !== y ? y : Ht;
      const c = null !== (b = null !== (E = i.viewport) && void 0 !== E ? E : null === e || void 0 === e ? void 0 : e.viewport) && void 0 !== b ? b : null;
      const C = { ...(null === e || void 0 === e ? void 0 : e.data),
        ...i.data
      };
      const k = [...(null !== (S = i.routes) && void 0 !== S ? S : qt), ...(null !== (R = null === e || void 0 === e ? void 0 : e.routes) && void 0 !== R ? R : qt)];
      return new RouteConfig(a, s, n, o, r, h, c, C, k);
    } else Y("string, function/class or object", "", t);
  }

  static configure(t, e) {
    const i = RouteConfig.create(t, e);

    _kernel.Metadata.define(Ft.name, i, e);

    return e;
  }

  static getConfig(t) {
    if (!_kernel.Metadata.hasOwn(Ft.name, t)) Ft.configure({}, t);
    return _kernel.Metadata.getOwn(Ft.name, t);
  }

  saveTo(t) {
    _kernel.Metadata.define(Ft.name, this, t);
  }

}

exports.RouteConfig = RouteConfig;

class ChildRouteConfig extends RouteConfig {
  constructor(t, e, i, s, n, o, r, a, h, c) {
    super(t, e, i, s, n, o, r, a, h);
    this.component = c;
  }

}

exports.ChildRouteConfig = ChildRouteConfig;
const Ft = {
  name: _kernel.Protocol.resource.keyFor("route"),

  isConfigured(t) {
    return _kernel.Metadata.hasOwn(Ft.name, t);
  },

  configure(t, e) {
    const i = RouteConfig.create(t, e);

    _kernel.Metadata.define(Ft.name, i, e);

    return e;
  },

  getConfig(t) {
    if (!Ft.isConfigured(t)) Ft.configure({}, t);
    return _kernel.Metadata.getOwn(Ft.name, t);
  }

};
exports.Route = Ft;

function zt(t) {
  return function (e) {
    return Ft.configure(t, e);
  };
}

class RouteDefinition {
  constructor(t, e) {
    var i, s, n, o, r;
    this.config = t;
    this.component = e;
    this.hasExplicitPath = null !== t.path;
    this.caseSensitive = t.caseSensitive;
    this.path = M(null !== (i = t.path) && void 0 !== i ? i : e.name);
    this.redirectTo = null !== (s = t.redirectTo) && void 0 !== s ? s : null;
    this.viewport = null !== (n = t.viewport) && void 0 !== n ? n : "default";
    this.id = q(null !== (o = t.id) && void 0 !== o ? o : this.path);
    this.data = null !== (r = t.data) && void 0 !== r ? r : {};
  }

  static resolve(t, e) {
    if (W(t)) return new RouteDefinition(t, null);
    return (0, _kernel.onResolve)(this.resolveCustomElementDefinition(t, e), e => {
      const i = z(t) ? { ...Ft.getConfig(e.Type),
        ...t
      } : Ft.getConfig(e.Type);

      if (!_kernel.Metadata.hasOwn(Ft.name, e)) {
        const t = new RouteDefinition(i, e);

        _kernel.Metadata.define(Ft.name, t, e);
      } else {
        let t = _kernel.Metadata.getOwn(Ft.name, e);

        if (t.config !== i) {
          t = new RouteDefinition(i, e);

          _kernel.Metadata.define(Ft.name, t, e);
        }
      }

      return _kernel.Metadata.getOwn(Ft.name, e);
    });
  }

  static resolveCustomElementDefinition(t, e) {
    if (z(t)) return this.resolveCustomElementDefinition(t.component, e);
    const i = TypedNavigationInstruction.create(t);

    switch (i.type) {
      case 0:
        {
          if (void 0 === e) throw new Error(`When retrieving the RouteDefinition for a component name, a RouteContext (that can resolve it) must be provided`);
          const t = e.container.find(_runtimeHtml.CustomElement, i.value);
          if (null === t) throw new Error(`Could not find a CustomElement named '${i.value}' in the current container scope of ${e}. This means the component is neither registered at Aurelia startup nor via the 'dependencies' decorator or static property.`);
          return t;
        }

      case 2:
        return i.value;

      case 4:
        return _runtimeHtml.CustomElement.getDefinition(i.value.constructor);

      case 3:
        if (void 0 === e) throw new Error(`RouteContext must be provided when resolving an imported module`);
        return e.resolveLazy(i.value);
    }
  }

  register(t) {
    var e;
    null === (e = this.component) || void 0 === e ? void 0 : e.register(t);
  }

  toUrlComponent() {
    return "not-implemented";
  }

  toString() {
    const t = null === this.config.path ? "null" : `'${this.config.path}'`;
    if (null !== this.component) return `RD(config.path:${t},c.name:'${this.component.name}')`;else return `RD(config.path:${t},redirectTo:'${this.redirectTo}')`;
  }

}

exports.RouteDefinition = RouteDefinition;
const Wt = new WeakMap();

class ComponentAgent {
  constructor(t, e, s, n, o) {
    var r, a, h, c;
    this.instance = t;
    this.controller = e;
    this.definition = s;
    this.routeNode = n;
    this.ctx = o;
    this.h = o.container.get(_kernel.ILogger).scopeTo(`ComponentAgent<${o.friendlyPath}>`);
    this.h.trace(`constructor()`);
    const u = e.lifecycleHooks;
    this.canLoadHooks = (null !== (r = u.canLoad) && void 0 !== r ? r : []).map(t => t.instance);
    this.loadHooks = (null !== (a = u.load) && void 0 !== a ? a : []).map(t => t.instance);
    this.canUnloadHooks = (null !== (h = u.canUnload) && void 0 !== h ? h : []).map(t => t.instance);
    this.unloadHooks = (null !== (c = u.unload) && void 0 !== c ? c : []).map(t => t.instance);
    this.u = "canLoad" in t;
    this.l = "load" in t;
    this.g = "canUnload" in t;
    this.v = "unload" in t;
  }

  static for(t, e, i, s) {
    let n = Wt.get(t);

    if (void 0 === n) {
      const o = s.container;
      const r = RouteDefinition.resolve(t.constructor);

      const a = _runtimeHtml.Controller.$el(o, t, e.host, null);

      Wt.set(t, n = new ComponentAgent(t, a, r, i, s));
    }

    return n;
  }

  activate(t, e, i) {
    if (null === t) {
      this.h.trace(`activate() - initial`);
      return this.controller.activate(this.controller, e, i);
    }

    this.h.trace(`activate()`);
    void this.controller.activate(t, e, i);
  }

  deactivate(t, e, i) {
    if (null === t) {
      this.h.trace(`deactivate() - initial`);
      return this.controller.deactivate(this.controller, e, i);
    }

    this.h.trace(`deactivate()`);
    void this.controller.deactivate(t, e, i);
  }

  dispose() {
    this.h.trace(`dispose()`);
    this.controller.dispose();
  }

  canUnload(t, e, i) {
    this.h.trace(`canUnload(next:%s) - invoking ${this.canUnloadHooks.length} hooks`, e);
    i.push();

    for (const s of this.canUnloadHooks) t.run(() => {
      i.push();
      return s.canUnload(this.instance, e, this.routeNode);
    }, e => {
      if (true === t.guardsResult && true !== e) t.guardsResult = false;
      i.pop();
    });

    if (this.g) t.run(() => {
      i.push();
      return this.instance.canUnload(e, this.routeNode);
    }, e => {
      if (true === t.guardsResult && true !== e) t.guardsResult = false;
      i.pop();
    });
    i.pop();
  }

  canLoad(t, e, i) {
    this.h.trace(`canLoad(next:%s) - invoking ${this.canLoadHooks.length} hooks`, e);
    i.push();

    for (const s of this.canLoadHooks) t.run(() => {
      i.push();
      return s.canLoad(this.instance, e.params, e, this.routeNode);
    }, e => {
      if (true === t.guardsResult && true !== e) t.guardsResult = false === e ? false : ViewportInstructionTree.create(e);
      i.pop();
    });

    if (this.u) t.run(() => {
      i.push();
      return this.instance.canLoad(e.params, e, this.routeNode);
    }, e => {
      if (true === t.guardsResult && true !== e) t.guardsResult = false === e ? false : ViewportInstructionTree.create(e);
      i.pop();
    });
    i.pop();
  }

  unload(t, e, i) {
    this.h.trace(`unload(next:%s) - invoking ${this.unloadHooks.length} hooks`, e);
    i.push();

    for (const s of this.unloadHooks) t.run(() => {
      i.push();
      return s.unload(this.instance, e, this.routeNode);
    }, () => {
      i.pop();
    });

    if (this.v) t.run(() => {
      i.push();
      return this.instance.unload(e, this.routeNode);
    }, () => {
      i.pop();
    });
    i.pop();
  }

  load(t, e, i) {
    this.h.trace(`load(next:%s) - invoking ${this.loadHooks.length} hooks`, e);
    i.push();

    for (const s of this.loadHooks) t.run(() => {
      i.push();
      return s.load(this.instance, e.params, e, this.routeNode);
    }, () => {
      i.pop();
    });

    if (this.l) t.run(() => {
      i.push();
      return this.instance.load(e.params, e, this.routeNode);
    }, () => {
      i.pop();
    });
    i.pop();
  }

  toString() {
    return `CA(ctx:'${this.ctx.friendlyPath}',c:'${this.definition.component.name}')`;
  }

}

exports.ComponentAgent = ComponentAgent;

const Gt = _kernel.DI.createInterface("IRouteContext");

exports.IRouteContext = Gt;
const Yt = "au$residue";

class RouteContext {
  constructor(t, e, s, n, o) {
    var r;
    this.parent = e;
    this.component = s;
    this.definition = n;
    this.parentContainer = o;
    this.childViewportAgents = [];
    this.childRoutes = [];
    this.m = null;
    this.$ = null;
    this.prevNode = null;
    this.S = null;
    this.R = null;
    this.R = t;

    if (null === e) {
      this.root = this;
      this.path = [this];
      this.friendlyPath = s.name;
    } else {
      this.root = e.root;
      this.path = [...e.path, this];
      this.friendlyPath = `${e.friendlyPath}/${s.name}`;
    }

    this.logger = o.get(_kernel.ILogger).scopeTo(`RouteContext<${this.friendlyPath}>`);
    this.logger.trace("constructor()");
    this.moduleLoader = o.get(_kernel.IModuleLoader);
    const a = this.container = o.createChild();
    a.registerResolver(_runtimeHtml.IController, this.hostControllerProvider = new _kernel.InstanceProvider(), true);
    a.registerResolver(Gt, new _kernel.InstanceProvider("IRouteContext", this));
    a.register(n);
    a.register(...s.dependencies);
    this.recognizer = new _routeRecognizer.RouteRecognizer();
    const h = [];
    const c = [];

    for (const t of n.config.routes) if (t instanceof Promise) {
      const e = this.addRoute(t);
      h.push(e);
      c.push(e);
    } else {
      const e = RouteDefinition.resolve(t, this);
      if (e instanceof Promise) {
        if (z(t) && null != t.path) {
          for (const i of M(t.path)) this.$addRoute(i, null !== (r = t.caseSensitive) && void 0 !== r ? r : false, e);

          const i = this.childRoutes.length;
          const s = e.then(t => this.childRoutes[i] = t);
          this.childRoutes.push(s);
          c.push(s.then(_kernel.noop));
        } else throw new Error(`Invalid route config. When the component property is a lazy import, the path must be specified. To use lazy loading without specifying the path (e.g. in direct routing), pass the import promise as a direct value to the routes array instead of providing it as the component property on an object literal.`);
      } else {
        for (const t of e.path) this.$addRoute(t, e.caseSensitive, e);

        this.childRoutes.push(e);
      }
    }

    if (h.length > 0) this.m = Promise.all(h).then(() => {
      this.m = null;
    });
    if (c.length > 0) this.$ = Promise.all(c).then(() => {
      this.$ = null;
    });
  }

  get id() {
    return this.container.id;
  }

  get isRoot() {
    return null === this.parent;
  }

  get depth() {
    return this.path.length - 1;
  }

  get resolved() {
    return this.m;
  }

  get allResolved() {
    return this.$;
  }

  get node() {
    const t = this.S;
    if (null === t) throw new Error(`Invariant violation: RouteNode should be set immediately after the RouteContext is created. Context: ${this}`);
    return t;
  }

  set node(t) {
    const e = this.prevNode = this.S;

    if (e !== t) {
      this.S = t;
      this.logger.trace(`Node changed from %s to %s`, this.prevNode, t);
    }
  }

  get vpa() {
    const t = this.R;
    if (null === t) throw new Error(`RouteContext has no ViewportAgent: ${this}`);
    return t;
  }

  set vpa(t) {
    if (null === t || void 0 === t) throw new Error(`Cannot set ViewportAgent to ${t} for RouteContext: ${this}`);
    const e = this.R;

    if (e !== t) {
      this.R = t;
      this.logger.trace(`ViewportAgent changed from %s to %s`, e, t);
    }
  }

  static setRoot(t) {
    const e = t.get(_kernel.ILogger).scopeTo("RouteContext");
    if (!t.has(_runtimeHtml.IAppRoot, true)) Jt(new Error(`The provided container has no registered IAppRoot. RouteContext.setRoot can only be used after Aurelia.app was called, on a container that is within that app's component tree.`), e);
    if (t.has(Gt, true)) Jt(new Error(`A root RouteContext is already registered. A possible cause is the RouterConfiguration being registered more than once in the same container tree. If you have a multi-rooted app, make sure you register RouterConfiguration only in the "forked" containers and not in the common root.`), e);
    const {
      controller: s
    } = t.get(_runtimeHtml.IAppRoot);
    if (void 0 === s) Jt(new Error(`The provided IAppRoot does not (yet) have a controller. A possible cause is calling this API manually before Aurelia.start() is called`), e);
    const n = t.get(Ut);
    const o = n.getRouteContext(null, s.definition, s.container);
    t.register(_kernel.Registration.instance(Gt, o));
    o.node = n.routeTree.root;
  }

  static resolve(t, e) {
    const s = t.container;
    const n = s.get(_kernel.ILogger).scopeTo("RouteContext");

    if (null === e || void 0 === e) {
      n.trace(`resolve(context:%s) - returning root RouteContext`, e);
      return t;
    }

    if (_t(e)) {
      n.trace(`resolve(context:%s) - returning provided RouteContext`, e);
      return e;
    }

    if (e instanceof s.get(_runtimeHtml.IPlatform).Node) try {
      const t = _runtimeHtml.CustomElement.for(e, {
        searchParents: true
      });

      n.trace(`resolve(context:Node(nodeName:'${e.nodeName}'),controller:'${t.definition.name}') - resolving RouteContext from controller's RenderContext`);
      return t.container.get(Gt);
    } catch (t) {
      n.error(`Failed to resolve RouteContext from Node(nodeName:'${e.nodeName}')`, t);
      throw t;
    }

    if ((0, _runtimeHtml.isCustomElementViewModel)(e)) {
      const t = e.$controller;
      n.trace(`resolve(context:CustomElementViewModel(name:'${t.definition.name}')) - resolving RouteContext from controller's RenderContext`);
      return t.container.get(Gt);
    }

    if ((0, _runtimeHtml.isCustomElementController)(e)) {
      const t = e;
      n.trace(`resolve(context:CustomElementController(name:'${t.definition.name}')) - resolving RouteContext from controller's RenderContext`);
      return t.container.get(Gt);
    }

    Jt(new Error(`Invalid context type: ${Object.prototype.toString.call(e)}`), n);
  }

  dispose() {
    this.container.dispose();
  }

  resolveViewportAgent(t) {
    this.logger.trace(`resolveViewportAgent(req:%s)`, t);
    const e = this.childViewportAgents.find(e => e.handles(t));
    if (void 0 === e) throw new Error(`Failed to resolve ${t} at:\n${this.printTree()}`);
    return e;
  }

  getAvailableViewportAgents(t) {
    return this.childViewportAgents.filter(e => e.isAvailable(t));
  }

  getFallbackViewportAgent(t, e) {
    var i;
    return null !== (i = this.childViewportAgents.find(i => i.isAvailable(t) && i.viewport.name === e && i.viewport.fallback.length > 0)) && void 0 !== i ? i : null;
  }

  createComponentAgent(t, e) {
    this.logger.trace(`createComponentAgent(routeNode:%s)`, e);
    this.hostControllerProvider.prepare(t);
    const i = RouteDefinition.resolve(e.component);
    const s = this.container.get(i.component.key);
    const n = ComponentAgent.for(s, t, e, this);
    this.hostControllerProvider.dispose();
    return n;
  }

  registerViewport(t) {
    const e = ViewportAgent.for(t, this);
    if (this.childViewportAgents.includes(e)) this.logger.trace(`registerViewport(agent:%s) -> already registered, so skipping`, e);else {
      this.logger.trace(`registerViewport(agent:%s) -> adding`, e);
      this.childViewportAgents.push(e);
    }
    return e;
  }

  unregisterViewport(t) {
    const e = ViewportAgent.for(t, this);

    if (this.childViewportAgents.includes(e)) {
      this.logger.trace(`unregisterViewport(agent:%s) -> unregistering`, e);
      this.childViewportAgents.splice(this.childViewportAgents.indexOf(e), 1);
    } else this.logger.trace(`unregisterViewport(agent:%s) -> not registered, so skipping`, e);
  }

  recognize(t) {
    var e;
    this.logger.trace(`recognize(path:'${t}')`);
    const i = this.recognizer.recognize(t);
    if (null === i) return null;
    let s;

    if (Reflect.has(i.params, Yt)) {
      s = null !== (e = i.params[Yt]) && void 0 !== e ? e : null;
      Reflect.deleteProperty(i.params, Yt);
    } else s = null;

    return new $RecognizedRoute(i, s);
  }

  addRoute(t) {
    this.logger.trace(`addRoute(routeable:'${t}')`);
    return (0, _kernel.onResolve)(RouteDefinition.resolve(t, this), t => {
      for (const e of t.path) this.$addRoute(e, t.caseSensitive, t);

      this.childRoutes.push(t);
    });
  }

  $addRoute(t, e, i) {
    this.recognizer.add({
      path: t,
      caseSensitive: e,
      handler: i
    });
    this.recognizer.add({
      path: `${t}/*${Yt}`,
      caseSensitive: e,
      handler: i
    });
  }

  resolveLazy(t) {
    return this.moduleLoader.load(t, e => {
      let i;
      let s;

      for (const t of e.items) if (t.isConstructable) {
        const e = t.definitions.find(Zt);
        if (void 0 !== e) if ("default" === t.key) i = e;else if (void 0 === s) s = e;
      }

      if (void 0 === i) {
        if (void 0 === s) throw new Error(`${t} does not appear to be a component or CustomElement recognizable by Aurelia`);
        return s;
      }

      return i;
    });
  }

  toString() {
    const t = this.childViewportAgents;
    const e = t.map(String).join(",");
    return `RC(path:'${this.friendlyPath}',viewports:[${e}])`;
  }

  printTree() {
    const t = [];

    for (let e = 0; e < this.path.length; ++e) t.push(`${" ".repeat(e)}${this.path[e]}`);

    return t.join("\n");
  }

}

exports.RouteContext = RouteContext;

function _t(t) {
  return t instanceof RouteContext;
}

function Jt(t, e) {
  e.error(t);
  throw t;
}

function Zt(t) {
  return _runtimeHtml.CustomElement.isType(t.Type);
}

class $RecognizedRoute {
  constructor(t, e) {
    this.route = t;
    this.residue = e;
  }

}

let Qt = class ViewportCustomElement {
  constructor(t, e) {
    this.logger = t;
    this.ctx = e;
    this.name = "default";
    this.usedBy = "";
    this.default = "";
    this.fallback = "";
    this.noScope = false;
    this.noLink = false;
    this.noHistory = false;
    this.stateful = false;
    this.agent = void 0;
    this.controller = void 0;
    this.logger = t.scopeTo(`au-viewport<${e.friendlyPath}>`);
    this.logger.trace("constructor()");
  }

  hydrated(t) {
    this.logger.trace("hydrated()");
    this.controller = t;
    this.agent = this.ctx.registerViewport(this);
  }

  attaching(t, e, i) {
    this.logger.trace("attaching()");
    return this.agent.activateFromViewport(t, this.controller, i);
  }

  detaching(t, e, i) {
    this.logger.trace("detaching()");
    return this.agent.deactivateFromViewport(t, this.controller, i);
  }

  dispose() {
    this.logger.trace("dispose()");
    this.ctx.unregisterViewport(this);
    this.agent.dispose();
    this.agent = void 0;
  }

  toString() {
    const t = [];

    for (const e of Kt) {
      const i = this[e];

      switch (typeof i) {
        case "string":
          if ("" !== i) t.push(`${e}:'${i}'`);
          break;

        case "boolean":
          if (i) t.push(`${e}:${i}`);
          break;

        default:
          t.push(`${e}:${String(i)}`);
      }
    }

    return `VP(ctx:'${this.ctx.friendlyPath}',${t.join(",")})`;
  }

};
exports.ViewportCustomElement = Qt;
K([_runtimeHtml.bindable], Qt.prototype, "name", void 0);
K([_runtimeHtml.bindable], Qt.prototype, "usedBy", void 0);
K([_runtimeHtml.bindable], Qt.prototype, "default", void 0);
K([_runtimeHtml.bindable], Qt.prototype, "fallback", void 0);
K([_runtimeHtml.bindable], Qt.prototype, "noScope", void 0);
K([_runtimeHtml.bindable], Qt.prototype, "noLink", void 0);
K([_runtimeHtml.bindable], Qt.prototype, "noHistory", void 0);
K([_runtimeHtml.bindable], Qt.prototype, "stateful", void 0);
exports.ViewportCustomElement = Qt = K([(0, _runtimeHtml.customElement)({
  name: "au-viewport"
}), X(0, _kernel.ILogger), X(1, Gt)], Qt);
const Kt = ["name", "usedBy", "default", "fallback", "noScope", "noLink", "noHistory", "stateful"];
let Xt = class LoadCustomAttribute {
  constructor(t, e, i, s, n, o, r) {
    this.target = t;
    this.el = e;
    this.router = i;
    this.events = s;
    this.delegator = n;
    this.ctx = o;
    this.locationMgr = r;
    this.attribute = "href";
    this.active = false;
    this.href = null;
    this.instructions = null;
    this.eventListener = null;
    this.navigationEndListener = null;

    this.onClick = t => {
      if (null === this.instructions) return;
      if (t.altKey || t.ctrlKey || t.shiftKey || t.metaKey || 0 !== t.button) return;
      t.preventDefault();
      void this.router.load(this.instructions, {
        context: this.ctx
      });
    };

    this.isEnabled = !e.hasAttribute("external") && !e.hasAttribute("data-external");
  }

  binding() {
    if (this.isEnabled) this.eventListener = this.delegator.addEventListener(this.target, this.el, "click", this.onClick);
    this.valueChanged();
    this.navigationEndListener = this.events.subscribe("au:router:navigation-end", t => {
      this.valueChanged();
      this.active = null !== this.instructions && this.router.isActive(this.instructions, this.ctx);
    });
  }

  attaching() {
    if (null !== this.ctx.allResolved) return this.ctx.allResolved.then(() => {
      this.valueChanged();
    });
  }

  unbinding() {
    if (this.isEnabled) this.eventListener.dispose();
    this.navigationEndListener.dispose();
  }

  valueChanged() {
    const t = this.router.options.useUrlFragmentHash;

    if (null !== this.route && void 0 !== this.route && null === this.ctx.allResolved) {
      const e = this.ctx.childRoutes.find(t => t.id === this.route);

      if (void 0 !== e) {
        const i = this.ctx.node.computeAbsolutePath();
        let s = e.path[0];

        if ("object" === typeof this.params && null !== this.params) {
          const t = Object.keys(this.params);

          for (const e of t) {
            const t = this.params[e];
            if (null != t && String(t).length > 0) s = s.replace(new RegExp(`[*:]${e}[?]?`), t);
          }
        }

        s = s.replace(/\/[*:][^/]+[?]/g, "").replace(/[*:][^/]+[?]\//g, "");
        if (i) {
          if (s) this.href = `${t ? "#" : ""}${[i, s].join("/")}`;else this.href = `${t ? "#" : ""}${i}`;
        } else this.href = `${t ? "#" : ""}${s}`;
        this.instructions = this.router.createViewportInstructions(`${t ? "#" : ""}${s}`, {
          context: this.ctx
        });
      } else {
        if ("object" === typeof this.params && null !== this.params) this.instructions = this.router.createViewportInstructions({
          component: this.route,
          params: this.params
        }, {
          context: this.ctx
        });else this.instructions = this.router.createViewportInstructions(this.route, {
          context: this.ctx
        });
        this.href = this.instructions.toUrl(this.router.options.useUrlFragmentHash);
      }
    } else {
      this.instructions = null;
      this.href = null;
    }

    const e = _runtimeHtml.CustomElement.for(this.el, {
      optional: true
    });

    if (null !== e) e.viewModel[this.attribute] = this.instructions;else if (null === this.href) this.el.removeAttribute(this.attribute);else {
      const e = t ? this.href : this.locationMgr.addBaseHref(this.href);
      this.el.setAttribute(this.attribute, e);
    }
  }

};
exports.LoadCustomAttribute = Xt;
K([(0, _runtimeHtml.bindable)({
  mode: _runtimeHtml.BindingMode.toView,
  primary: true,
  callback: "valueChanged"
})], Xt.prototype, "route", void 0);
K([(0, _runtimeHtml.bindable)({
  mode: _runtimeHtml.BindingMode.toView,
  callback: "valueChanged"
})], Xt.prototype, "params", void 0);
K([(0, _runtimeHtml.bindable)({
  mode: _runtimeHtml.BindingMode.toView
})], Xt.prototype, "attribute", void 0);
K([(0, _runtimeHtml.bindable)({
  mode: _runtimeHtml.BindingMode.fromView
})], Xt.prototype, "active", void 0);
exports.LoadCustomAttribute = Xt = K([(0, _runtimeHtml.customAttribute)("load"), X(0, _runtimeHtml.IEventTarget), X(1, _runtimeHtml.INode), X(2, Ut), X(3, tt), X(4, _runtimeHtml.IEventDelegator), X(5, Gt), X(6, nt)], Xt);
let te = class HrefCustomAttribute {
  constructor(t, e, i, s, n, o) {
    this.target = t;
    this.el = e;
    this.router = i;
    this.delegator = s;
    this.ctx = n;
    this.isInitialized = false;
    if (i.options.useHref && "A" === e.nodeName) switch (e.getAttribute("target")) {
      case null:
      case o.name:
      case "_self":
        this.isEnabled = true;
        break;

      default:
        this.isEnabled = false;
        break;
    } else this.isEnabled = false;
  }

  get isExternal() {
    return this.el.hasAttribute("external") || this.el.hasAttribute("data-external");
  }

  binding() {
    if (!this.isInitialized) {
      this.isInitialized = true;
      this.isEnabled = this.isEnabled && null === (0, _runtimeHtml.getRef)(this.el, _runtimeHtml.CustomAttribute.getDefinition(Xt).key);
    }

    if (null == this.value) this.el.removeAttribute("href");else this.el.setAttribute("href", this.value);
    this.eventListener = this.delegator.addEventListener(this.target, this.el, "click", this);
  }

  unbinding() {
    this.eventListener.dispose();
  }

  valueChanged(t) {
    if (null == t) this.el.removeAttribute("href");else this.el.setAttribute("href", t);
  }

  handleEvent(t) {
    this.C(t);
  }

  C(t) {
    if (t.altKey || t.ctrlKey || t.shiftKey || t.metaKey || 0 !== t.button || this.isExternal || !this.isEnabled) return;
    const e = this.el.getAttribute("href");

    if (null !== e) {
      t.preventDefault();
      void this.router.load(e, {
        context: this.ctx
      });
    }
  }

};
exports.HrefCustomAttribute = te;
K([(0, _runtimeHtml.bindable)({
  mode: _runtimeHtml.BindingMode.toView
})], te.prototype, "value", void 0);
exports.HrefCustomAttribute = te = K([(0, _runtimeHtml.customAttribute)({
  name: "href",
  noMultiBindings: true
}), X(0, _runtimeHtml.IEventTarget), X(1, _runtimeHtml.INode), X(2, Ut), X(3, _runtimeHtml.IEventDelegator), X(4, Gt), X(5, _runtimeHtml.IWindow)], te);
const ee = Ut;
exports.RouterRegistration = ee;
const ie = [ee];
exports.DefaultComponents = ie;
const se = Qt;
exports.ViewportCustomElementRegistration = se;
const ne = Xt;
exports.LoadCustomAttributeRegistration = ne;
const oe = te;
exports.HrefCustomAttributeRegistration = oe;
const re = [Qt, Xt, te];
exports.DefaultResources = re;

function ae(t, e) {
  return t.register(_runtimeHtml.AppTask.hydrated(_kernel.IContainer, RouteContext.setRoot), _runtimeHtml.AppTask.afterActivate(Ut, t => {
    if ((0, _kernel.isObject)(e)) if ("function" === typeof e) return e(t);else return t.start(e, true);
    return t.start({}, true);
  }), _runtimeHtml.AppTask.afterDeactivate(Ut, t => {
    t.stop();
  }), ...ie, ...re);
}

const he = {
  register(t) {
    return ae(t);
  },

  customize(t) {
    return {
      register(e) {
        return ae(e, t);
      }

    };
  }

};
exports.RouterConfiguration = he;

class ScrollState {
  constructor(t) {
    this.el = t;
    this.top = t.scrollTop;
    this.left = t.scrollLeft;
  }

  static has(t) {
    return t.scrollTop > 0 || t.scrollLeft > 0;
  }

  restore() {
    this.el.scrollTo(this.left, this.top);
    this.el = null;
  }

}

function ce(t) {
  t.restore();
}

class HostElementState {
  constructor(t) {
    this.scrollStates = [];
    this.save(t.children);
  }

  save(t) {
    let e;

    for (let i = 0, s = t.length; i < s; ++i) {
      e = t[i];
      if (ScrollState.has(e)) this.scrollStates.push(new ScrollState(e));
      this.save(e.children);
    }
  }

  restore() {
    this.scrollStates.forEach(ce);
    this.scrollStates = null;
  }

}

const ue = _kernel.DI.createInterface("IStateManager", t => t.singleton(ScrollStateManager));

exports.IStateManager = ue;

class ScrollStateManager {
  constructor() {
    this.cache = new WeakMap();
  }

  saveState(t) {
    this.cache.set(t.host, new HostElementState(t.host));
  }

  restoreState(t) {
    const e = this.cache.get(t.host);

    if (void 0 !== e) {
      e.restore();
      this.cache.delete(t.host);
    }
  }

}
});

;define.alias('@aurelia/router','@aurelia/router/dist/esm/index.js');
define('@aurelia/runtime-html/dist/esm/index.js',['require','exports','module','@aurelia/platform','@aurelia/platform-browser','@aurelia/kernel','@aurelia/runtime'],function (require, exports, module) {
"use strict";

exports.__esModule = true;
exports.DefaultDialogGlobalSettings = exports.DefaultDialogDomRenderer = exports.DefaultDialogDom = exports.DefaultComponents = exports.DefaultCase = exports.DefaultBindingSyntax = exports.DefaultBindingLanguage = exports.DefaultBindingCommandRegistration = exports.DefaultBindingCommand = exports.DebounceBindingBehaviorRegistration = exports.DebounceBindingBehavior = exports.DataAttributeAccessor = exports.CustomExpression = exports.CustomElementRendererRegistration = exports.CustomElementDefinition = exports.CustomElement = exports.CustomAttributeRendererRegistration = exports.CustomAttributeDefinition = exports.CustomAttribute = exports.Controller = exports.ConditionalExpression = exports.ComputedWatcher = exports.ComputedObserver = exports.CommandType = exports.ColonPrefixedBindAttributePatternRegistration = exports.ColonPrefixedBindAttributePattern = exports.CollectionSizeObserver = exports.CollectionLengthObserver = exports.CollectionKind = exports.ClassBindingCommandRegistration = exports.ClassBindingCommand = exports.ClassAttributeAccessor = exports.ChildrenObserver = exports.ChildrenDefinition = exports.Children = exports.CheckedObserver = exports.Char = exports.Case = exports.CaptureBindingCommandRegistration = exports.CaptureBindingCommand = exports.CallScopeExpression = exports.CallMemberExpression = exports.CallFunctionExpression = exports.CallBindingRendererRegistration = exports.CallBindingInstruction = exports.CallBindingCommandRegistration = exports.CallBindingCommand = exports.CallBinding = exports.CSSModulesProcessorRegistry = exports.BrowserPlatform = exports.BindingModeBehavior = exports.BindingMode = exports.BindingMediator = exports.BindingInterceptor = exports.BindingIdentifier = exports.BindingContext = exports.BindingCommandDefinition = exports.BindingCommand = exports.BindingBehaviorStrategy = exports.BindingBehaviorFactory = exports.BindingBehaviorExpression = exports.BindingBehaviorDefinition = exports.BindingBehavior = exports.BindablesInfo = exports.BindableObserver = exports.BindableDefinition = exports.Bindable = exports.BinaryExpression = exports.Aurelia = exports.AuSlotsInfo = exports.AuSlot = exports.AuRenderRegistration = exports.AuRender = exports.AuCompose = exports.AttributePattern = exports.AttributeNSAccessor = exports.AttributeBindingRendererRegistration = exports.AttributeBindingInstruction = exports.AttributeBinding = exports.AttrSyntax = exports.AttrBindingCommandRegistration = exports.AttrBindingCommand = exports.AttrBindingBehaviorRegistration = exports.AttrBindingBehavior = exports.AtPrefixedTriggerAttributePatternRegistration = exports.AtPrefixedTriggerAttributePattern = exports.AssignExpression = exports.ArrayObserver = exports.ArrayLiteralExpression = exports.ArrayIndexObserver = exports.ArrayBindingPattern = exports.AppTask = exports.AppRoot = exports.AdoptedStyleSheetsStyles = exports.AccessorType = exports.AccessThisExpression = exports.AccessScopeExpression = exports.AccessMemberExpression = exports.AccessKeyedExpression = exports.Access = void 0;
exports.LetElementRendererRegistration = exports.LetBindingInstruction = exports.LetBinding = exports.IteratorBindingRendererRegistration = exports.IteratorBindingInstruction = exports.Interpretation = exports.InterpolationInstruction = exports.InterpolationBindingRendererRegistration = exports.InterpolationBinding = exports.Interpolation = exports.InstructionType = exports.IfRegistration = exports.If = exports.IWorkTracker = exports.IWindow = exports.IWcElementRegistry = exports.IViewLocator = exports.IViewFactory = exports.ITemplateElementFactory = exports.ITemplateCompilerRegistration = exports.ITemplateCompilerHooks = exports.ITemplateCompiler = exports.ISyntaxInterpreter = exports.ISignaler = exports.IShadowDOMStyles = exports.IShadowDOMStyleFactory = exports.IShadowDOMGlobalStyles = exports.ISanitizer = exports.ISVGAnalyzer = exports.IRendering = exports.IRenderer = exports.IRenderLocation = exports.IProjections = exports.IPlatform = exports.IObserverLocator = exports.INodeObserverLocatorRegistration = exports.INodeObserverLocator = exports.INode = exports.ILocation = exports.ILifecycleHooks = exports.IInstruction = exports.IHydrationContext = exports.IHistory = exports.IExpressionParser = exports.IEventTarget = exports.IEventDelegator = exports.IDirtyChecker = exports.IDialogService = exports.IDialogGlobalSettings = exports.IDialogDomRenderer = exports.IDialogDom = exports.IDialogController = exports.IController = exports.IAurelia = exports.IAuSlotsInfo = exports.IAttributePattern = exports.IAttributeParser = exports.IAttrMapper = exports.IAppTask = exports.IAppRoot = exports.HydrateTemplateController = exports.HydrateLetElementInstruction = exports.HydrateElementInstruction = exports.HydrateAttributeInstruction = exports.HtmlLiteralExpression = exports.FulfilledTemplateController = exports.FromViewBindingCommandRegistration = exports.FromViewBindingCommand = exports.FromViewBindingBehaviorRegistration = exports.FromViewBindingBehavior = exports.FrequentMutations = exports.FragmentNodeSequence = exports.ForOfStatement = exports.ForBindingCommandRegistration = exports.ForBindingCommand = exports.Focus = exports.ExpressionWatcher = exports.ExpressionType = exports.ExpressionKind = exports.EventSubscriber = exports.EventDelegator = exports.ElseRegistration = exports.Else = exports.DotSeparatedAttributePatternRegistration = exports.DotSeparatedAttributePattern = exports.DirtyCheckSettings = exports.DirtyCheckProperty = exports.DialogService = exports.DialogOpenResult = exports.DialogDefaultConfiguration = exports.DialogDeactivationStatuses = exports.DialogController = exports.DialogConfiguration = exports.DialogCloseResult = exports.DelegationStrategy = exports.DelegateBindingCommandRegistration = exports.DelegateBindingCommand = exports.DefinitionType = exports.DefaultResources = exports.DefaultRenderers = exports.DefaultDialogGlobalSettings = exports.DefaultDialogDomRenderer = exports.DefaultDialogDom = exports.DefaultComponents = exports.DefaultCase = exports.DefaultBindingSyntax = exports.DefaultBindingLanguage = exports.DefaultBindingCommandRegistration = exports.DefaultBindingCommand = exports.DebounceBindingBehaviorRegistration = exports.DebounceBindingBehavior = exports.DataAttributeAccessor = exports.CustomExpression = exports.CustomElementRendererRegistration = exports.CustomElementDefinition = exports.CustomElement = exports.CustomAttributeRendererRegistration = exports.CustomAttributeDefinition = exports.CustomAttribute = exports.Controller = exports.ConditionalExpression = exports.ComputedWatcher = exports.ComputedObserver = exports.CommandType = exports.ColonPrefixedBindAttributePatternRegistration = exports.ColonPrefixedBindAttributePattern = exports.CollectionSizeObserver = exports.CollectionLengthObserver = exports.CollectionKind = exports.ClassBindingCommandRegistration = exports.ClassBindingCommand = exports.ClassAttributeAccessor = exports.ChildrenObserver = exports.ChildrenDefinition = exports.Children = exports.CheckedObserver = exports.Char = exports.Case = exports.CaptureBindingCommandRegistration = exports.CaptureBindingCommand = exports.CallScopeExpression = exports.CallMemberExpression = exports.CallFunctionExpression = exports.CallBindingRendererRegistration = exports.CallBindingInstruction = exports.CallBindingCommandRegistration = exports.CallBindingCommand = exports.CallBinding = exports.CSSModulesProcessorRegistry = exports.BrowserPlatform = exports.BindingModeBehavior = exports.BindingMode = exports.BindingMediator = exports.BindingInterceptor = exports.BindingIdentifier = exports.BindingContext = exports.BindingCommandDefinition = exports.BindingCommand = exports.BindingBehaviorStrategy = exports.BindingBehaviorFactory = exports.BindingBehaviorExpression = exports.BindingBehaviorDefinition = exports.BindingBehavior = exports.BindablesInfo = exports.BindableObserver = exports.BindableDefinition = exports.Bindable = exports.BinaryExpression = exports.Aurelia = exports.AuSlotsInfo = exports.AuSlot = exports.AuRenderRegistration = exports.AuRender = exports.AuCompose = exports.AttributePattern = exports.AttributeNSAccessor = exports.AttributeBindingRendererRegistration = exports.AttributeBindingInstruction = exports.AttributeBinding = exports.AttrSyntax = exports.AttrBindingCommandRegistration = exports.AttrBindingCommand = exports.AttrBindingBehaviorRegistration = exports.AttrBindingBehavior = exports.AtPrefixedTriggerAttributePatternRegistration = exports.AtPrefixedTriggerAttributePattern = exports.AssignExpression = exports.ArrayObserver = exports.ArrayLiteralExpression = exports.ArrayIndexObserver = exports.ArrayBindingPattern = exports.AppTask = exports.AppRoot = exports.AdoptedStyleSheetsStyles = exports.AccessorType = exports.AccessThisExpression = exports.AccessScopeExpression = exports.AccessMemberExpression = exports.AccessKeyedExpression = exports.Access = void 0;
exports.UpdateTriggerBindingBehavior = exports.UnaryExpression = exports.TwoWayBindingCommandRegistration = exports.TwoWayBindingCommand = exports.TwoWayBindingBehaviorRegistration = exports.TwoWayBindingBehavior = exports.TriggerBindingCommandRegistration = exports.TriggerBindingCommand = exports.ToViewBindingCommandRegistration = exports.ToViewBindingCommand = exports.ToViewBindingBehaviorRegistration = exports.ToViewBindingBehavior = exports.ThrottleBindingBehaviorRegistration = exports.ThrottleBindingBehavior = exports.TextBindingRendererRegistration = exports.TextBindingInstruction = exports.TemplateExpression = exports.TemplateControllerRendererRegistration = exports.TemplateCompilerHooks = exports.TemplateCompiler = exports.TaskStatus = exports.TaskQueuePriority = exports.TaskQueue = exports.TaskAbortError = exports.Task = exports.TaggedTemplateExpression = exports.Switch = exports.StylePropertyBindingRendererRegistration = exports.StylePropertyBindingInstruction = exports.StyleElementStyles = exports.StyleConfiguration = exports.StyleBindingCommandRegistration = exports.StyleBindingCommand = exports.StyleAttributeAccessor = exports.StandardConfiguration = exports.SignalBindingBehaviorRegistration = exports.SignalBindingBehavior = exports.ShortHandBindingSyntax = exports.ShadowDOMRegistry = exports.SetterObserver = exports.SetStyleAttributeRendererRegistration = exports.SetStyleAttributeInstruction = exports.SetPropertyRendererRegistration = exports.SetPropertyInstruction = exports.SetObserver = exports.SetClassAttributeRendererRegistration = exports.SetClassAttributeInstruction = exports.SetAttributeRendererRegistration = exports.SetAttributeInstruction = exports.SelfBindingBehaviorRegistration = exports.SelfBindingBehavior = exports.SelectValueObserver = exports.Scope = exports.SanitizeValueConverterRegistration = exports.SanitizeValueConverter = exports.SVGAnalyzerRegistration = exports.SVGAnalyzer = exports.RepeatRegistration = exports.Repeat = exports.Rendering = exports.RenderPlan = exports.RejectedTemplateController = exports.RefBindingRendererRegistration = exports.RefBindingInstruction = exports.RefBindingCommandRegistration = exports.RefBinding = exports.RefAttributePatternRegistration = exports.RefAttributePattern = exports.PropertyBindingRendererRegistration = exports.PropertyBindingInstruction = exports.PropertyBinding = exports.PropertyAccessor = exports.PromiseTemplateController = exports.PrimitiveObserver = exports.PrimitiveLiteralExpression = exports.Precedence = exports.Portal = exports.Platform = exports.PendingTemplateController = exports.OverrideContext = exports.OneTimeBindingCommandRegistration = exports.OneTimeBindingCommand = exports.OneTimeBindingBehaviorRegistration = exports.OneTimeBindingBehavior = exports.ObserverLocator = exports.ObserveShallow = exports.ObjectLiteralExpression = exports.ObjectBindingPattern = exports.NoopSVGAnalyzer = exports.NodeType = exports.NodeObserverLocator = exports.NodeObserverConfig = exports.MapObserver = exports.ListenerBindingRendererRegistration = exports.ListenerBindingInstruction = exports.Listener = exports.LifecycleHooksEntry = exports.LifecycleHooksDefinition = exports.LifecycleHooks = exports.LifecycleFlags = exports.LetElementRendererRegistration = exports.LetBindingInstruction = exports.LetBinding = exports.IteratorBindingRendererRegistration = exports.IteratorBindingInstruction = exports.Interpretation = exports.InterpolationInstruction = exports.InterpolationBindingRendererRegistration = exports.InterpolationBinding = exports.Interpolation = exports.InstructionType = exports.IfRegistration = exports.If = exports.IWorkTracker = exports.IWindow = exports.IWcElementRegistry = exports.IViewLocator = exports.IViewFactory = exports.ITemplateElementFactory = exports.ITemplateCompilerRegistration = exports.ITemplateCompilerHooks = exports.ITemplateCompiler = exports.ISyntaxInterpreter = exports.ISignaler = exports.IShadowDOMStyles = exports.IShadowDOMStyleFactory = exports.IShadowDOMGlobalStyles = exports.ISanitizer = exports.ISVGAnalyzer = exports.IRendering = exports.IRenderer = exports.IRenderLocation = exports.IProjections = exports.IPlatform = exports.IObserverLocator = exports.INodeObserverLocatorRegistration = exports.INodeObserverLocator = exports.INode = exports.ILocation = exports.ILifecycleHooks = exports.IInstruction = exports.IHydrationContext = exports.IHistory = exports.IExpressionParser = exports.IEventTarget = exports.IEventDelegator = exports.IDirtyChecker = exports.IDialogService = exports.IDialogGlobalSettings = exports.IDialogDomRenderer = exports.IDialogDom = exports.IDialogController = exports.IController = exports.IAurelia = exports.IAuSlotsInfo = exports.IAttributePattern = exports.IAttributeParser = exports.IAttrMapper = exports.IAppTask = exports.IAppRoot = exports.HydrateTemplateController = exports.HydrateLetElementInstruction = exports.HydrateElementInstruction = exports.HydrateAttributeInstruction = exports.HtmlLiteralExpression = exports.FulfilledTemplateController = exports.FromViewBindingCommandRegistration = exports.FromViewBindingCommand = exports.FromViewBindingBehaviorRegistration = exports.FromViewBindingBehavior = exports.FrequentMutations = exports.FragmentNodeSequence = exports.ForOfStatement = exports.ForBindingCommandRegistration = exports.ForBindingCommand = exports.Focus = exports.ExpressionWatcher = exports.ExpressionType = exports.ExpressionKind = exports.EventSubscriber = exports.EventDelegator = exports.ElseRegistration = exports.Else = exports.DotSeparatedAttributePatternRegistration = exports.DotSeparatedAttributePattern = exports.DirtyCheckSettings = exports.DirtyCheckProperty = exports.DialogService = exports.DialogOpenResult = exports.DialogDefaultConfiguration = exports.DialogDeactivationStatuses = exports.DialogController = exports.DialogConfiguration = exports.DialogCloseResult = exports.DelegationStrategy = exports.DelegateBindingCommandRegistration = exports.DelegateBindingCommand = exports.DefinitionType = exports.DefaultResources = exports.DefaultRenderers = exports.DefaultDialogGlobalSettings = exports.DefaultDialogDomRenderer = exports.DefaultDialogDom = exports.DefaultComponents = exports.DefaultCase = exports.DefaultBindingSyntax = exports.DefaultBindingLanguage = exports.DefaultBindingCommandRegistration = exports.DefaultBindingCommand = exports.DebounceBindingBehaviorRegistration = exports.DebounceBindingBehavior = exports.DataAttributeAccessor = exports.CustomExpression = exports.CustomElementRendererRegistration = exports.CustomElementDefinition = exports.CustomElement = exports.CustomAttributeRendererRegistration = exports.CustomAttributeDefinition = exports.CustomAttribute = exports.Controller = exports.ConditionalExpression = exports.ComputedWatcher = exports.ComputedObserver = exports.CommandType = exports.ColonPrefixedBindAttributePatternRegistration = exports.ColonPrefixedBindAttributePattern = exports.CollectionSizeObserver = exports.CollectionLengthObserver = exports.CollectionKind = exports.ClassBindingCommandRegistration = exports.ClassBindingCommand = exports.ClassAttributeAccessor = exports.ChildrenObserver = exports.ChildrenDefinition = exports.Children = exports.CheckedObserver = exports.Char = exports.Case = exports.CaptureBindingCommandRegistration = exports.CaptureBindingCommand = exports.CallScopeExpression = exports.CallMemberExpression = exports.CallFunctionExpression = exports.CallBindingRendererRegistration = exports.CallBindingInstruction = exports.CallBindingCommandRegistration = exports.CallBindingCommand = exports.CallBinding = exports.CSSModulesProcessorRegistry = exports.BrowserPlatform = exports.BindingModeBehavior = exports.BindingMode = exports.BindingMediator = exports.BindingInterceptor = exports.BindingIdentifier = exports.BindingContext = exports.BindingCommandDefinition = exports.BindingCommand = exports.BindingBehaviorStrategy = exports.BindingBehaviorFactory = exports.BindingBehaviorExpression = exports.BindingBehaviorDefinition = exports.BindingBehavior = exports.BindablesInfo = exports.BindableObserver = exports.BindableDefinition = exports.Bindable = exports.BinaryExpression = exports.Aurelia = exports.AuSlotsInfo = exports.AuSlot = exports.AuRenderRegistration = exports.AuRender = exports.AuCompose = exports.AttributePattern = exports.AttributeNSAccessor = exports.AttributeBindingRendererRegistration = exports.AttributeBindingInstruction = exports.AttributeBinding = exports.AttrSyntax = exports.AttrBindingCommandRegistration = exports.AttrBindingCommand = exports.AttrBindingBehaviorRegistration = exports.AttrBindingBehavior = exports.AtPrefixedTriggerAttributePatternRegistration = exports.AtPrefixedTriggerAttributePattern = exports.AssignExpression = exports.ArrayObserver = exports.ArrayLiteralExpression = exports.ArrayIndexObserver = exports.ArrayBindingPattern = exports.AppTask = exports.AppRoot = exports.AdoptedStyleSheetsStyles = exports.AccessorType = exports.AccessThisExpression = exports.AccessScopeExpression = exports.AccessMemberExpression = exports.AccessKeyedExpression = exports.Access = void 0;
exports.applyMutationsToIndices = exports.allResources = exports.alias = exports.WithRegistration = exports.With = exports.WcCustomElementRegistry = exports.Watch = exports.Views = exports.ViewValueConverterRegistration = exports.ViewValueConverter = exports.ViewModelKind = exports.ViewLocator = exports.ViewFactory = exports.ValueConverterExpression = exports.ValueConverterDefinition = exports.ValueConverter = exports.ValueAttributeObserver = exports.UpdateTriggerBindingBehaviorRegistration = exports.UpdateTriggerBindingBehavior = exports.UnaryExpression = exports.TwoWayBindingCommandRegistration = exports.TwoWayBindingCommand = exports.TwoWayBindingBehaviorRegistration = exports.TwoWayBindingBehavior = exports.TriggerBindingCommandRegistration = exports.TriggerBindingCommand = exports.ToViewBindingCommandRegistration = exports.ToViewBindingCommand = exports.ToViewBindingBehaviorRegistration = exports.ToViewBindingBehavior = exports.ThrottleBindingBehaviorRegistration = exports.ThrottleBindingBehavior = exports.TextBindingRendererRegistration = exports.TextBindingInstruction = exports.TemplateExpression = exports.TemplateControllerRendererRegistration = exports.TemplateCompilerHooks = exports.TemplateCompiler = exports.TaskStatus = exports.TaskQueuePriority = exports.TaskQueue = exports.TaskAbortError = exports.Task = exports.TaggedTemplateExpression = exports.Switch = exports.StylePropertyBindingRendererRegistration = exports.StylePropertyBindingInstruction = exports.StyleElementStyles = exports.StyleConfiguration = exports.StyleBindingCommandRegistration = exports.StyleBindingCommand = exports.StyleAttributeAccessor = exports.StandardConfiguration = exports.SignalBindingBehaviorRegistration = exports.SignalBindingBehavior = exports.ShortHandBindingSyntax = exports.ShadowDOMRegistry = exports.SetterObserver = exports.SetStyleAttributeRendererRegistration = exports.SetStyleAttributeInstruction = exports.SetPropertyRendererRegistration = exports.SetPropertyInstruction = exports.SetObserver = exports.SetClassAttributeRendererRegistration = exports.SetClassAttributeInstruction = exports.SetAttributeRendererRegistration = exports.SetAttributeInstruction = exports.SelfBindingBehaviorRegistration = exports.SelfBindingBehavior = exports.SelectValueObserver = exports.Scope = exports.SanitizeValueConverterRegistration = exports.SanitizeValueConverter = exports.SVGAnalyzerRegistration = exports.SVGAnalyzer = exports.RepeatRegistration = exports.Repeat = exports.Rendering = exports.RenderPlan = exports.RejectedTemplateController = exports.RefBindingRendererRegistration = exports.RefBindingInstruction = exports.RefBindingCommandRegistration = exports.RefBinding = exports.RefAttributePatternRegistration = exports.RefAttributePattern = exports.PropertyBindingRendererRegistration = exports.PropertyBindingInstruction = exports.PropertyBinding = exports.PropertyAccessor = exports.PromiseTemplateController = exports.PrimitiveObserver = exports.PrimitiveLiteralExpression = exports.Precedence = exports.Portal = exports.Platform = exports.PendingTemplateController = exports.OverrideContext = exports.OneTimeBindingCommandRegistration = exports.OneTimeBindingCommand = exports.OneTimeBindingBehaviorRegistration = exports.OneTimeBindingBehavior = exports.ObserverLocator = exports.ObserveShallow = exports.ObjectLiteralExpression = exports.ObjectBindingPattern = exports.NoopSVGAnalyzer = exports.NodeType = exports.NodeObserverLocator = exports.NodeObserverConfig = exports.MapObserver = exports.ListenerBindingRendererRegistration = exports.ListenerBindingInstruction = exports.Listener = exports.LifecycleHooksEntry = exports.LifecycleHooksDefinition = exports.LifecycleHooks = exports.LifecycleFlags = exports.LetElementRendererRegistration = exports.LetBindingInstruction = exports.LetBinding = exports.IteratorBindingRendererRegistration = exports.IteratorBindingInstruction = exports.Interpretation = exports.InterpolationInstruction = exports.InterpolationBindingRendererRegistration = exports.InterpolationBinding = exports.Interpolation = exports.InstructionType = exports.IfRegistration = exports.If = exports.IWorkTracker = exports.IWindow = exports.IWcElementRegistry = exports.IViewLocator = exports.IViewFactory = exports.ITemplateElementFactory = exports.ITemplateCompilerRegistration = exports.ITemplateCompilerHooks = exports.ITemplateCompiler = exports.ISyntaxInterpreter = exports.ISignaler = exports.IShadowDOMStyles = exports.IShadowDOMStyleFactory = exports.IShadowDOMGlobalStyles = exports.ISanitizer = exports.ISVGAnalyzer = exports.IRendering = exports.IRenderer = exports.IRenderLocation = exports.IProjections = exports.IPlatform = exports.IObserverLocator = exports.INodeObserverLocatorRegistration = exports.INodeObserverLocator = exports.INode = exports.ILocation = exports.ILifecycleHooks = exports.IInstruction = exports.IHydrationContext = exports.IHistory = exports.IExpressionParser = exports.IEventTarget = exports.IEventDelegator = exports.IDirtyChecker = exports.IDialogService = exports.IDialogGlobalSettings = exports.IDialogDomRenderer = exports.IDialogDom = exports.IDialogController = exports.IController = exports.IAurelia = exports.IAuSlotsInfo = exports.IAttributePattern = exports.IAttributeParser = exports.IAttrMapper = exports.IAppTask = exports.IAppRoot = exports.HydrateTemplateController = exports.HydrateLetElementInstruction = exports.HydrateElementInstruction = exports.HydrateAttributeInstruction = exports.HtmlLiteralExpression = exports.FulfilledTemplateController = exports.FromViewBindingCommandRegistration = exports.FromViewBindingCommand = exports.FromViewBindingBehaviorRegistration = exports.FromViewBindingBehavior = exports.FrequentMutations = exports.FragmentNodeSequence = exports.ForOfStatement = exports.ForBindingCommandRegistration = exports.ForBindingCommand = exports.Focus = exports.ExpressionWatcher = exports.ExpressionType = exports.ExpressionKind = exports.EventSubscriber = exports.EventDelegator = exports.ElseRegistration = exports.Else = exports.DotSeparatedAttributePatternRegistration = exports.DotSeparatedAttributePattern = exports.DirtyCheckSettings = exports.DirtyCheckProperty = exports.DialogService = exports.DialogOpenResult = exports.DialogDefaultConfiguration = exports.DialogDeactivationStatuses = exports.DialogController = exports.DialogConfiguration = exports.DialogCloseResult = exports.DelegationStrategy = exports.DelegateBindingCommandRegistration = exports.DelegateBindingCommand = exports.DefinitionType = exports.DefaultResources = exports.DefaultRenderers = exports.DefaultDialogGlobalSettings = exports.DefaultDialogDomRenderer = exports.DefaultDialogDom = exports.DefaultComponents = exports.DefaultCase = exports.DefaultBindingSyntax = exports.DefaultBindingLanguage = exports.DefaultBindingCommandRegistration = exports.DefaultBindingCommand = exports.DebounceBindingBehaviorRegistration = exports.DebounceBindingBehavior = exports.DataAttributeAccessor = exports.CustomExpression = exports.CustomElementRendererRegistration = exports.CustomElementDefinition = exports.CustomElement = exports.CustomAttributeRendererRegistration = exports.CustomAttributeDefinition = exports.CustomAttribute = exports.Controller = exports.ConditionalExpression = exports.ComputedWatcher = exports.ComputedObserver = exports.CommandType = exports.ColonPrefixedBindAttributePatternRegistration = exports.ColonPrefixedBindAttributePattern = exports.CollectionSizeObserver = exports.CollectionLengthObserver = exports.CollectionKind = exports.ClassBindingCommandRegistration = exports.ClassBindingCommand = exports.ClassAttributeAccessor = exports.ChildrenObserver = exports.ChildrenDefinition = exports.Children = exports.CheckedObserver = exports.Char = exports.Case = exports.CaptureBindingCommandRegistration = exports.CaptureBindingCommand = exports.CallScopeExpression = exports.CallMemberExpression = exports.CallFunctionExpression = exports.CallBindingRendererRegistration = exports.CallBindingInstruction = exports.CallBindingCommandRegistration = exports.CallBindingCommand = exports.CallBinding = exports.CSSModulesProcessorRegistry = exports.BrowserPlatform = exports.BindingModeBehavior = exports.BindingMode = exports.BindingMediator = exports.BindingInterceptor = exports.BindingIdentifier = exports.BindingContext = exports.BindingCommandDefinition = exports.BindingCommand = exports.BindingBehaviorStrategy = exports.BindingBehaviorFactory = exports.BindingBehaviorExpression = exports.BindingBehaviorDefinition = exports.BindingBehavior = exports.BindablesInfo = exports.BindableObserver = exports.BindableDefinition = exports.Bindable = exports.BinaryExpression = exports.Aurelia = exports.AuSlotsInfo = exports.AuSlot = exports.AuRenderRegistration = exports.AuRender = exports.AuCompose = exports.AttributePattern = exports.AttributeNSAccessor = exports.AttributeBindingRendererRegistration = exports.AttributeBindingInstruction = exports.AttributeBinding = exports.AttrSyntax = exports.AttrBindingCommandRegistration = exports.AttrBindingCommand = exports.AttrBindingBehaviorRegistration = exports.AttrBindingBehavior = exports.AtPrefixedTriggerAttributePatternRegistration = exports.AtPrefixedTriggerAttributePattern = exports.AssignExpression = exports.ArrayObserver = exports.ArrayLiteralExpression = exports.ArrayIndexObserver = exports.ArrayBindingPattern = exports.AppTask = exports.AppRoot = exports.AdoptedStyleSheetsStyles = exports.AccessorType = exports.AccessThisExpression = exports.AccessScopeExpression = exports.AccessMemberExpression = exports.AccessKeyedExpression = exports.Access = void 0;
exports.attributePattern = $t;
exports.bindable = At;
exports.bindingBehavior = void 0;
exports.bindingCommand = rn;
exports.children = ge;
exports.connectable = exports.cloneIndexMap = void 0;
exports.containerless = Fe;
exports.convertToRenderLocation = os;
exports.copyIndexMap = void 0;
exports.createElement = Or;
exports.createIndexMap = void 0;
exports.cssModules = ni;
exports.customAttribute = Ee;
exports.customElement = Me;
exports.getCollectionObserver = exports.enableSetObservation = exports.enableMapObservation = exports.enableArrayObservation = exports.disableSetObservation = exports.disableMapObservation = exports.disableArrayObservation = void 0;
exports.getEffectiveParentNode = ns;
exports.getRef = Qi;
exports.isCustomElementController = Mi;
exports.isCustomElementViewModel = Ui;
exports.isIndexMap = void 0;
exports.isInstruction = ws;
exports.isRenderLocation = ls;
exports.lifecycleHooks = wi;
exports.parseExpression = exports.observable = void 0;
exports.processContent = ti;
exports.registerAliases = void 0;
exports.renderer = ys;
exports.setEffectiveParentNode = rs;
exports.setRef = Zi;
exports.shadowCSS = ri;
exports.templateCompilerHooks = exports.synchronizeIndices = exports.subscriberCollection = void 0;
exports.templateController = Be;
exports.useShadowDOM = Ue;
exports.valueConverter = void 0;
exports.view = Si;
exports.watch = Oe;

var _platform = require("@aurelia/platform");

exports.Platform = _platform.Platform;
exports.Task = _platform.Task;
exports.TaskAbortError = _platform.TaskAbortError;
exports.TaskQueue = _platform.TaskQueue;
exports.TaskQueuePriority = _platform.TaskQueuePriority;
exports.TaskStatus = _platform.TaskStatus;

var _platformBrowser = require("@aurelia/platform-browser");

exports.BrowserPlatform = _platformBrowser.BrowserPlatform;

var _kernel = require("@aurelia/kernel");

var _runtime = require("@aurelia/runtime");

exports.Access = _runtime.Access;
exports.AccessKeyedExpression = _runtime.AccessKeyedExpression;
exports.AccessMemberExpression = _runtime.AccessMemberExpression;
exports.AccessScopeExpression = _runtime.AccessScopeExpression;
exports.AccessThisExpression = _runtime.AccessThisExpression;
exports.AccessorType = _runtime.AccessorType;
exports.ArrayBindingPattern = _runtime.ArrayBindingPattern;
exports.ArrayIndexObserver = _runtime.ArrayIndexObserver;
exports.ArrayLiteralExpression = _runtime.ArrayLiteralExpression;
exports.ArrayObserver = _runtime.ArrayObserver;
exports.AssignExpression = _runtime.AssignExpression;
exports.BinaryExpression = _runtime.BinaryExpression;
exports.BindingBehavior = _runtime.BindingBehavior;
exports.BindingBehaviorDefinition = _runtime.BindingBehaviorDefinition;
exports.BindingBehaviorExpression = _runtime.BindingBehaviorExpression;
exports.BindingBehaviorFactory = _runtime.BindingBehaviorFactory;
exports.BindingBehaviorStrategy = _runtime.BindingBehaviorStrategy;
exports.BindingContext = _runtime.BindingContext;
exports.BindingIdentifier = _runtime.BindingIdentifier;
exports.BindingInterceptor = _runtime.BindingInterceptor;
exports.BindingMediator = _runtime.BindingMediator;
exports.BindingMode = _runtime.BindingMode;
exports.CallFunctionExpression = _runtime.CallFunctionExpression;
exports.CallMemberExpression = _runtime.CallMemberExpression;
exports.CallScopeExpression = _runtime.CallScopeExpression;
exports.Char = _runtime.Char;
exports.CollectionKind = _runtime.CollectionKind;
exports.CollectionLengthObserver = _runtime.CollectionLengthObserver;
exports.CollectionSizeObserver = _runtime.CollectionSizeObserver;
exports.ComputedObserver = _runtime.ComputedObserver;
exports.ConditionalExpression = _runtime.ConditionalExpression;
exports.CustomExpression = _runtime.CustomExpression;
exports.DelegationStrategy = _runtime.DelegationStrategy;
exports.DirtyCheckProperty = _runtime.DirtyCheckProperty;
exports.DirtyCheckSettings = _runtime.DirtyCheckSettings;
exports.ExpressionKind = _runtime.ExpressionKind;
exports.ExpressionType = _runtime.ExpressionType;
exports.ForOfStatement = _runtime.ForOfStatement;
exports.HtmlLiteralExpression = _runtime.HtmlLiteralExpression;
exports.IDirtyChecker = _runtime.IDirtyChecker;
exports.IExpressionParser = _runtime.IExpressionParser;
exports.INodeObserverLocator = _runtime.INodeObserverLocator;
exports.IObserverLocator = _runtime.IObserverLocator;
exports.ISignaler = _runtime.ISignaler;
exports.Interpolation = _runtime.Interpolation;
exports.LifecycleFlags = _runtime.LifecycleFlags;
exports.MapObserver = _runtime.MapObserver;
exports.ObjectBindingPattern = _runtime.ObjectBindingPattern;
exports.ObjectLiteralExpression = _runtime.ObjectLiteralExpression;
exports.ObserverLocator = _runtime.ObserverLocator;
exports.OverrideContext = _runtime.OverrideContext;
exports.Precedence = _runtime.Precedence;
exports.PrimitiveLiteralExpression = _runtime.PrimitiveLiteralExpression;
exports.PrimitiveObserver = _runtime.PrimitiveObserver;
exports.PropertyAccessor = _runtime.PropertyAccessor;
exports.Scope = _runtime.Scope;
exports.SetObserver = _runtime.SetObserver;
exports.SetterObserver = _runtime.SetterObserver;
exports.TaggedTemplateExpression = _runtime.TaggedTemplateExpression;
exports.TemplateExpression = _runtime.TemplateExpression;
exports.UnaryExpression = _runtime.UnaryExpression;
exports.ValueConverter = _runtime.ValueConverter;
exports.ValueConverterDefinition = _runtime.ValueConverterDefinition;
exports.ValueConverterExpression = _runtime.ValueConverterExpression;
exports.alias = _runtime.alias;
exports.applyMutationsToIndices = _runtime.applyMutationsToIndices;
exports.bindingBehavior = _runtime.bindingBehavior;
exports.cloneIndexMap = _runtime.cloneIndexMap;
exports.connectable = _runtime.connectable;
exports.copyIndexMap = _runtime.copyIndexMap;
exports.createIndexMap = _runtime.createIndexMap;
exports.disableArrayObservation = _runtime.disableArrayObservation;
exports.disableMapObservation = _runtime.disableMapObservation;
exports.disableSetObservation = _runtime.disableSetObservation;
exports.enableArrayObservation = _runtime.enableArrayObservation;
exports.enableMapObservation = _runtime.enableMapObservation;
exports.enableSetObservation = _runtime.enableSetObservation;
exports.getCollectionObserver = _runtime.getCollectionObserver;
exports.isIndexMap = _runtime.isIndexMap;
exports.observable = _runtime.observable;
exports.parseExpression = _runtime.parseExpression;
exports.registerAliases = _runtime.registerAliases;
exports.subscriberCollection = _runtime.subscriberCollection;
exports.synchronizeIndices = _runtime.synchronizeIndices;
exports.valueConverter = _runtime.valueConverter;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function rt(t, e, i, s) {
  var n = arguments.length,
      r = n < 3 ? e : null === s ? s = Object.getOwnPropertyDescriptor(e, i) : s,
      o;
  if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(t, e, i, s);else for (var l = t.length - 1; l >= 0; l--) if (o = t[l]) r = (n < 3 ? o(r) : n > 3 ? o(e, i, r) : o(e, i)) || r;
  return n > 3 && r && Object.defineProperty(e, i, r), r;
}

function ot(t, e) {
  return function (i, s) {
    e(i, s, t);
  };
}

const lt = _kernel.Metadata.getOwn;
const ht = _kernel.Metadata.hasOwn;
const at = _kernel.Metadata.define;
const {
  annotation: ct,
  resource: ut
} = _kernel.Protocol;
const ft = ct.keyFor;
const dt = ut.keyFor;
const mt = ut.appendTo;
const vt = ct.appendTo;
const pt = ct.getKeys;

const gt = () => Object.create(null);

const wt = Object.prototype.hasOwnProperty;
const bt = gt();

const xt = (t, e, i) => {
  if (true === bt[e]) return true;
  if (!Ct(e)) return false;
  const s = e.slice(0, 5);
  return bt[e] = "aria-" === s || "data-" === s || i.isStandardSvgAttribute(t, e);
};

const yt = t => t instanceof Promise;

const kt = t => "function" === typeof t;

const Ct = t => "string" === typeof t;

function At(t, e) {
  let i;

  function s(t, e) {
    if (arguments.length > 1) i.property = e;
    at(Rt, BindableDefinition.create(e, i), t.constructor, e);
    vt(t.constructor, Et.keyFrom(e));
  }

  if (arguments.length > 1) {
    i = {};
    s(t, e);
    return;
  } else if (Ct(t)) {
    i = {};
    return s;
  }

  i = void 0 === t ? {} : t;
  return s;
}

function St(t) {
  return t.startsWith(Rt);
}

const Rt = ft("bindable");
const Et = Object.freeze({
  name: Rt,
  keyFrom: t => `${Rt}:${t}`,

  from(...t) {
    const e = {};
    const i = Array.isArray;

    function s(t) {
      e[t] = BindableDefinition.create(t);
    }

    function n(t, i) {
      e[t] = i instanceof BindableDefinition ? i : BindableDefinition.create(t, i);
    }

    function r(t) {
      if (i(t)) t.forEach(s);else if (t instanceof BindableDefinition) e[t.property] = t;else if (void 0 !== t) Object.keys(t).forEach(e => n(e, t[e]));
    }

    t.forEach(r);
    return e;
  },

  for(t) {
    let e;
    const i = {
      add(s) {
        let n;
        let r;

        if (Ct(s)) {
          n = s;
          r = {
            property: n
          };
        } else {
          n = s.property;
          r = s;
        }

        e = BindableDefinition.create(n, r);
        if (!ht(Rt, t, n)) vt(t, Et.keyFrom(n));
        at(Rt, e, t, n);
        return i;
      },

      mode(t) {
        e.mode = t;
        return i;
      },

      callback(t) {
        e.callback = t;
        return i;
      },

      attribute(t) {
        e.attribute = t;
        return i;
      },

      primary() {
        e.primary = true;
        return i;
      },

      set(t) {
        e.set = t;
        return i;
      }

    };
    return i;
  },

  getAll(t) {
    const e = Rt.length + 1;
    const i = [];
    const n = (0, _kernel.getPrototypeChain)(t);
    let r = n.length;
    let o = 0;
    let l;
    let h;
    let a;
    let c;

    while (--r >= 0) {
      a = n[r];
      l = pt(a).filter(St);
      h = l.length;

      for (c = 0; c < h; ++c) i[o++] = lt(Rt, a, l[c].slice(e));
    }

    return i;
  }

});
exports.Bindable = Et;

class BindableDefinition {
  constructor(t, e, i, s, n, r) {
    this.attribute = t;
    this.callback = e;
    this.mode = i;
    this.primary = s;
    this.property = n;
    this.set = r;
  }

  static create(t, e = {}) {
    return new BindableDefinition((0, _kernel.firstDefined)(e.attribute, (0, _kernel.kebabCase)(t)), (0, _kernel.firstDefined)(e.callback, `${t}Changed`), (0, _kernel.firstDefined)(e.mode, _runtime.BindingMode.toView), (0, _kernel.firstDefined)(e.primary, false), (0, _kernel.firstDefined)(e.property, t), (0, _kernel.firstDefined)(e.set, _kernel.noop));
  }

}

exports.BindableDefinition = BindableDefinition;

class BindableObserver {
  constructor(t, e, i, s, n) {
    this.set = s;
    this.$controller = n;
    this.v = void 0;
    this.ov = void 0;
    this.f = 0;
    const r = t[i];
    const l = t.propertyChanged;
    const h = this.t = kt(r);
    const a = this.i = kt(l);
    const c = this.hs = s !== _kernel.noop;
    let u;
    this.o = t;
    this.k = e;
    this.cb = h ? r : _kernel.noop;
    this.u = a ? l : _kernel.noop;
    if (void 0 === this.cb && !a && !c) this.iO = false;else {
      this.iO = true;
      u = t[e];
      this.v = c && void 0 !== u ? s(u) : u;
      this.C();
    }
  }

  get type() {
    return 1;
  }

  getValue() {
    return this.v;
  }

  setValue(t, e) {
    if (this.hs) t = this.set(t);
    const i = this.v;

    if (this.iO) {
      if (Object.is(t, i)) return;
      this.v = t;
      this.ov = i;
      this.f = e;

      if (null == this.$controller || this.$controller.isBound) {
        if (this.t) this.cb.call(this.o, t, i, e);
        if (this.i) this.u.call(this.o, this.k, t, i, e);
      }

      this.queue.add(this);
    } else this.o[this.k] = t;
  }

  subscribe(t) {
    if (false === !this.iO) {
      this.iO = true;
      this.v = this.hs ? this.set(this.o[this.k]) : this.o[this.k];
      this.C();
    }

    this.subs.add(t);
  }

  flush() {
    Bt = this.ov;
    this.ov = this.v;
    this.subs.notify(this.v, Bt, this.f);
  }

  C() {
    Reflect.defineProperty(this.o, this.k, {
      enumerable: true,
      configurable: true,
      get: () => this.v,
      set: t => {
        this.setValue(t, 0);
      }
    });
  }

}

exports.BindableObserver = BindableObserver;
(0, _runtime.subscriberCollection)(BindableObserver);
(0, _runtime.withFlushQueue)(BindableObserver);
let Bt;

class CharSpec {
  constructor(t, e, i, s) {
    this.chars = t;
    this.repeat = e;
    this.isSymbol = i;
    this.isInverted = s;
    if (s) switch (t.length) {
      case 0:
        this.has = this.A;
        break;

      case 1:
        this.has = this.R;
        break;

      default:
        this.has = this.B;
    } else switch (t.length) {
      case 0:
        this.has = this.I;
        break;

      case 1:
        this.has = this.T;
        break;

      default:
        this.has = this.P;
    }
  }

  equals(t) {
    return this.chars === t.chars && this.repeat === t.repeat && this.isSymbol === t.isSymbol && this.isInverted === t.isInverted;
  }

  P(t) {
    return this.chars.includes(t);
  }

  T(t) {
    return this.chars === t;
  }

  I(t) {
    return false;
  }

  B(t) {
    return !this.chars.includes(t);
  }

  R(t) {
    return this.chars !== t;
  }

  A(t) {
    return true;
  }

}

class Interpretation {
  constructor() {
    this.parts = _kernel.emptyArray;
    this.O = "";
    this.$ = {};
    this.L = {};
  }

  get pattern() {
    const t = this.O;
    if ("" === t) return null;else return t;
  }

  set pattern(t) {
    if (null == t) {
      this.O = "";
      this.parts = _kernel.emptyArray;
    } else {
      this.O = t;
      this.parts = this.L[t];
    }
  }

  append(t, e) {
    const i = this.$;
    if (void 0 === i[t]) i[t] = e;else i[t] += e;
  }

  next(t) {
    const e = this.$;
    let i;

    if (void 0 !== e[t]) {
      i = this.L;
      if (void 0 === i[t]) i[t] = [e[t]];else i[t].push(e[t]);
      e[t] = void 0;
    }
  }

}

exports.Interpretation = Interpretation;

class State$1 {
  constructor(t, ...e) {
    this.charSpec = t;
    this.nextStates = [];
    this.types = null;
    this.isEndpoint = false;
    this.patterns = e;
  }

  get pattern() {
    return this.isEndpoint ? this.patterns[0] : null;
  }

  findChild(t) {
    const e = this.nextStates;
    const i = e.length;
    let s = null;
    let n = 0;

    for (; n < i; ++n) {
      s = e[n];
      if (t.equals(s.charSpec)) return s;
    }

    return null;
  }

  append(t, e) {
    const i = this.patterns;
    if (!i.includes(e)) i.push(e);
    let s = this.findChild(t);

    if (null == s) {
      s = new State$1(t, e);
      this.nextStates.push(s);
      if (t.repeat) s.nextStates.push(s);
    }

    return s;
  }

  findMatches(t, e) {
    const i = [];
    const s = this.nextStates;
    const n = s.length;
    let r = 0;
    let o = null;
    let l = 0;
    let h = 0;

    for (; l < n; ++l) {
      o = s[l];

      if (o.charSpec.has(t)) {
        i.push(o);
        r = o.patterns.length;
        h = 0;
        if (o.charSpec.isSymbol) for (; h < r; ++h) e.next(o.patterns[h]);else for (; h < r; ++h) e.append(o.patterns[h], t);
      }
    }

    return i;
  }

}

class StaticSegment {
  constructor(t) {
    this.text = t;
    const e = this.len = t.length;
    const i = this.specs = [];
    let s = 0;

    for (; e > s; ++s) i.push(new CharSpec(t[s], false, false, false));
  }

  eachChar(t) {
    const e = this.len;
    const i = this.specs;
    let s = 0;

    for (; e > s; ++s) t(i[s]);
  }

}

class DynamicSegment {
  constructor(t) {
    this.text = "PART";
    this.spec = new CharSpec(t, true, false, true);
  }

  eachChar(t) {
    t(this.spec);
  }

}

class SymbolSegment {
  constructor(t) {
    this.text = t;
    this.spec = new CharSpec(t, false, true, false);
  }

  eachChar(t) {
    t(this.spec);
  }

}

class SegmentTypes {
  constructor() {
    this.statics = 0;
    this.dynamics = 0;
    this.symbols = 0;
  }

}

const It = _kernel.DI.createInterface("ISyntaxInterpreter", t => t.singleton(SyntaxInterpreter));

exports.ISyntaxInterpreter = It;

class SyntaxInterpreter {
  constructor() {
    this.rootState = new State$1(null);
    this.initialStates = [this.rootState];
  }

  add(t) {
    t = t.slice(0).sort((t, e) => t.pattern > e.pattern ? 1 : -1);
    const e = t.length;
    let i;
    let s;
    let n;
    let r;
    let o;
    let l;
    let h;
    let a = 0;
    let c;

    while (e > a) {
      i = this.rootState;
      s = t[a];
      n = s.pattern;
      r = new SegmentTypes();
      o = this.parse(s, r);
      l = o.length;

      h = t => {
        i = i.append(t, n);
      };

      for (c = 0; l > c; ++c) o[c].eachChar(h);

      i.types = r;
      i.isEndpoint = true;
      ++a;
    }
  }

  interpret(t) {
    const e = new Interpretation();
    const i = t.length;
    let s = this.initialStates;
    let n = 0;
    let r;

    for (; n < i; ++n) {
      s = this.getNextStates(s, t.charAt(n), e);
      if (0 === s.length) break;
    }

    s = s.filter(Tt);

    if (s.length > 0) {
      s.sort(Dt);
      r = s[0];
      if (!r.charSpec.isSymbol) e.next(r.pattern);
      e.pattern = r.pattern;
    }

    return e;
  }

  getNextStates(t, e, i) {
    const s = [];
    let n = null;
    const r = t.length;
    let o = 0;

    for (; o < r; ++o) {
      n = t[o];
      s.push(...n.findMatches(e, i));
    }

    return s;
  }

  parse(t, e) {
    const i = [];
    const s = t.pattern;
    const n = s.length;
    const r = t.symbols;
    let o = 0;
    let l = 0;
    let h = "";

    while (o < n) {
      h = s.charAt(o);
      if (0 === r.length || !r.includes(h)) {
        if (o === l) {
          if ("P" === h && "PART" === s.slice(o, o + 4)) {
            l = o += 4;
            i.push(new DynamicSegment(r));
            ++e.dynamics;
          } else ++o;
        } else ++o;
      } else if (o !== l) {
        i.push(new StaticSegment(s.slice(l, o)));
        ++e.statics;
        l = o;
      } else {
        i.push(new SymbolSegment(s.slice(l, o + 1)));
        ++e.symbols;
        l = ++o;
      }
    }

    if (l !== o) {
      i.push(new StaticSegment(s.slice(l, o)));
      ++e.statics;
    }

    return i;
  }

}

function Tt(t) {
  return t.isEndpoint;
}

function Dt(t, e) {
  const i = t.types;
  const s = e.types;
  if (i.statics !== s.statics) return s.statics - i.statics;
  if (i.dynamics !== s.dynamics) return s.dynamics - i.dynamics;
  if (i.symbols !== s.symbols) return s.symbols - i.symbols;
  return 0;
}

class AttrSyntax {
  constructor(t, e, i, s) {
    this.rawName = t;
    this.rawValue = e;
    this.target = i;
    this.command = s;
  }

}

exports.AttrSyntax = AttrSyntax;

const Pt = _kernel.DI.createInterface("IAttributePattern");

exports.IAttributePattern = Pt;

const Ot = _kernel.DI.createInterface("IAttributeParser", t => t.singleton(AttributeParser));

exports.IAttributeParser = Ot;

class AttributeParser {
  constructor(t, e) {
    this.q = {};
    this.M = t;
    const i = this.U = {};
    const s = e.reduce((t, e) => {
      const s = Mt(e.constructor);
      s.forEach(t => i[t.pattern] = e);
      return t.concat(s);
    }, _kernel.emptyArray);
    t.add(s);
  }

  parse(t, e) {
    let i = this.q[t];
    if (null == i) i = this.q[t] = this.M.interpret(t);
    const s = i.pattern;
    if (null == s) return new AttrSyntax(t, e, t, null);else return this.U[s][s](t, e, i.parts);
  }

}

AttributeParser.inject = [It, (0, _kernel.all)(Pt)];

function $t(...t) {
  return function e(i) {
    return Ut.define(t, i);
  };
}

class AttributePatternResourceDefinition {
  constructor(t) {
    this.Type = t;
    this.name = void 0;
  }

  register(t) {
    _kernel.Registration.singleton(Pt, this.Type).register(t);
  }

}

const Lt = dt("attribute-pattern");
const qt = "attribute-pattern-definitions";

const Mt = t => _kernel.Protocol.annotation.get(t, qt);

const Ut = Object.freeze({
  name: Lt,
  definitionAnnotationKey: qt,

  define(t, e) {
    const s = new AttributePatternResourceDefinition(e);
    at(Lt, s, e);
    mt(e, Lt);

    _kernel.Protocol.annotation.set(e, qt, t);

    vt(e, qt);
    return e;
  },

  getPatternDefinitions: Mt
});
exports.AttributePattern = Ut;
let Ft = class DotSeparatedAttributePattern {
  "PART.PART"(t, e, i) {
    return new AttrSyntax(t, e, i[0], i[1]);
  }

  "PART.PART.PART"(t, e, i) {
    return new AttrSyntax(t, e, i[0], i[2]);
  }

};
exports.DotSeparatedAttributePattern = Ft;
exports.DotSeparatedAttributePattern = Ft = rt([$t({
  pattern: "PART.PART",
  symbols: "."
}, {
  pattern: "PART.PART.PART",
  symbols: "."
})], Ft);
let Vt = class RefAttributePattern {
  ref(t, e, i) {
    return new AttrSyntax(t, e, "element", "ref");
  }

  "PART.ref"(t, e, i) {
    return new AttrSyntax(t, e, i[0], "ref");
  }

};
exports.RefAttributePattern = Vt;
exports.RefAttributePattern = Vt = rt([$t({
  pattern: "ref",
  symbols: ""
}, {
  pattern: "PART.ref",
  symbols: "."
})], Vt);

let _t = class ColonPrefixedBindAttributePattern {
  ":PART"(t, e, i) {
    return new AttrSyntax(t, e, i[0], "bind");
  }

};

exports.ColonPrefixedBindAttributePattern = _t;
exports.ColonPrefixedBindAttributePattern = _t = rt([$t({
  pattern: ":PART",
  symbols: ":"
})], _t);
let jt = class AtPrefixedTriggerAttributePattern {
  "@PART"(t, e, i) {
    return new AttrSyntax(t, e, i[0], "trigger");
  }

};
exports.AtPrefixedTriggerAttributePattern = jt;
exports.AtPrefixedTriggerAttributePattern = jt = rt([$t({
  pattern: "@PART",
  symbols: "@"
})], jt);
let Nt = class SpreadAttributePattern {
  "...$attrs"(t, e, i) {
    return new AttrSyntax(t, e, "", "...$attrs");
  }

};
Nt = rt([$t({
  pattern: "...$attrs",
  symbols: ""
})], Nt);
const Wt = _kernel.IPlatform;
exports.IPlatform = Wt;

const Ht = _kernel.DI.createInterface("ISVGAnalyzer", t => t.singleton(NoopSVGAnalyzer));

exports.ISVGAnalyzer = Ht;

class NoopSVGAnalyzer {
  isStandardSvgAttribute(t, e) {
    return false;
  }

}

exports.NoopSVGAnalyzer = NoopSVGAnalyzer;

function zt(t) {
  const e = gt();
  let i;

  for (i of t) e[i] = true;

  return e;
}

class SVGAnalyzer {
  constructor(t) {
    this.F = Object.assign(gt(), {
      a: zt(["class", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "target", "transform", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      altGlyph: zt(["class", "dx", "dy", "externalResourcesRequired", "format", "glyphRef", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "rotate", "style", "systemLanguage", "x", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "y"]),
      altglyph: gt(),
      altGlyphDef: zt(["id", "xml:base", "xml:lang", "xml:space"]),
      altglyphdef: gt(),
      altGlyphItem: zt(["id", "xml:base", "xml:lang", "xml:space"]),
      altglyphitem: gt(),
      animate: zt(["accumulate", "additive", "attributeName", "attributeType", "begin", "by", "calcMode", "dur", "end", "externalResourcesRequired", "fill", "from", "id", "keySplines", "keyTimes", "max", "min", "onbegin", "onend", "onload", "onrepeat", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "systemLanguage", "to", "values", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      animateColor: zt(["accumulate", "additive", "attributeName", "attributeType", "begin", "by", "calcMode", "dur", "end", "externalResourcesRequired", "fill", "from", "id", "keySplines", "keyTimes", "max", "min", "onbegin", "onend", "onload", "onrepeat", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "systemLanguage", "to", "values", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      animateMotion: zt(["accumulate", "additive", "begin", "by", "calcMode", "dur", "end", "externalResourcesRequired", "fill", "from", "id", "keyPoints", "keySplines", "keyTimes", "max", "min", "onbegin", "onend", "onload", "onrepeat", "origin", "path", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "rotate", "systemLanguage", "to", "values", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      animateTransform: zt(["accumulate", "additive", "attributeName", "attributeType", "begin", "by", "calcMode", "dur", "end", "externalResourcesRequired", "fill", "from", "id", "keySplines", "keyTimes", "max", "min", "onbegin", "onend", "onload", "onrepeat", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "systemLanguage", "to", "type", "values", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      circle: zt(["class", "cx", "cy", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "r", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml:base", "xml:lang", "xml:space"]),
      clipPath: zt(["class", "clipPathUnits", "externalResourcesRequired", "id", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml:base", "xml:lang", "xml:space"]),
      "color-profile": zt(["id", "local", "name", "rendering-intent", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      cursor: zt(["externalResourcesRequired", "id", "requiredExtensions", "requiredFeatures", "systemLanguage", "x", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "y"]),
      defs: zt(["class", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml:base", "xml:lang", "xml:space"]),
      desc: zt(["class", "id", "style", "xml:base", "xml:lang", "xml:space"]),
      ellipse: zt(["class", "cx", "cy", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "rx", "ry", "style", "systemLanguage", "transform", "xml:base", "xml:lang", "xml:space"]),
      feBlend: zt(["class", "height", "id", "in", "in2", "mode", "result", "style", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feColorMatrix: zt(["class", "height", "id", "in", "result", "style", "type", "values", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feComponentTransfer: zt(["class", "height", "id", "in", "result", "style", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feComposite: zt(["class", "height", "id", "in", "in2", "k1", "k2", "k3", "k4", "operator", "result", "style", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feConvolveMatrix: zt(["bias", "class", "divisor", "edgeMode", "height", "id", "in", "kernelMatrix", "kernelUnitLength", "order", "preserveAlpha", "result", "style", "targetX", "targetY", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feDiffuseLighting: zt(["class", "diffuseConstant", "height", "id", "in", "kernelUnitLength", "result", "style", "surfaceScale", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feDisplacementMap: zt(["class", "height", "id", "in", "in2", "result", "scale", "style", "width", "x", "xChannelSelector", "xml:base", "xml:lang", "xml:space", "y", "yChannelSelector"]),
      feDistantLight: zt(["azimuth", "elevation", "id", "xml:base", "xml:lang", "xml:space"]),
      feFlood: zt(["class", "height", "id", "result", "style", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feFuncA: zt(["amplitude", "exponent", "id", "intercept", "offset", "slope", "tableValues", "type", "xml:base", "xml:lang", "xml:space"]),
      feFuncB: zt(["amplitude", "exponent", "id", "intercept", "offset", "slope", "tableValues", "type", "xml:base", "xml:lang", "xml:space"]),
      feFuncG: zt(["amplitude", "exponent", "id", "intercept", "offset", "slope", "tableValues", "type", "xml:base", "xml:lang", "xml:space"]),
      feFuncR: zt(["amplitude", "exponent", "id", "intercept", "offset", "slope", "tableValues", "type", "xml:base", "xml:lang", "xml:space"]),
      feGaussianBlur: zt(["class", "height", "id", "in", "result", "stdDeviation", "style", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feImage: zt(["class", "externalResourcesRequired", "height", "id", "preserveAspectRatio", "result", "style", "width", "x", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "y"]),
      feMerge: zt(["class", "height", "id", "result", "style", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feMergeNode: zt(["id", "xml:base", "xml:lang", "xml:space"]),
      feMorphology: zt(["class", "height", "id", "in", "operator", "radius", "result", "style", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feOffset: zt(["class", "dx", "dy", "height", "id", "in", "result", "style", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      fePointLight: zt(["id", "x", "xml:base", "xml:lang", "xml:space", "y", "z"]),
      feSpecularLighting: zt(["class", "height", "id", "in", "kernelUnitLength", "result", "specularConstant", "specularExponent", "style", "surfaceScale", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feSpotLight: zt(["id", "limitingConeAngle", "pointsAtX", "pointsAtY", "pointsAtZ", "specularExponent", "x", "xml:base", "xml:lang", "xml:space", "y", "z"]),
      feTile: zt(["class", "height", "id", "in", "result", "style", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      feTurbulence: zt(["baseFrequency", "class", "height", "id", "numOctaves", "result", "seed", "stitchTiles", "style", "type", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      filter: zt(["class", "externalResourcesRequired", "filterRes", "filterUnits", "height", "id", "primitiveUnits", "style", "width", "x", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "y"]),
      font: zt(["class", "externalResourcesRequired", "horiz-adv-x", "horiz-origin-x", "horiz-origin-y", "id", "style", "vert-adv-y", "vert-origin-x", "vert-origin-y", "xml:base", "xml:lang", "xml:space"]),
      "font-face": zt(["accent-height", "alphabetic", "ascent", "bbox", "cap-height", "descent", "font-family", "font-size", "font-stretch", "font-style", "font-variant", "font-weight", "hanging", "id", "ideographic", "mathematical", "overline-position", "overline-thickness", "panose-1", "slope", "stemh", "stemv", "strikethrough-position", "strikethrough-thickness", "underline-position", "underline-thickness", "unicode-range", "units-per-em", "v-alphabetic", "v-hanging", "v-ideographic", "v-mathematical", "widths", "x-height", "xml:base", "xml:lang", "xml:space"]),
      "font-face-format": zt(["id", "string", "xml:base", "xml:lang", "xml:space"]),
      "font-face-name": zt(["id", "name", "xml:base", "xml:lang", "xml:space"]),
      "font-face-src": zt(["id", "xml:base", "xml:lang", "xml:space"]),
      "font-face-uri": zt(["id", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      foreignObject: zt(["class", "externalResourcesRequired", "height", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      g: zt(["class", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml:base", "xml:lang", "xml:space"]),
      glyph: zt(["arabic-form", "class", "d", "glyph-name", "horiz-adv-x", "id", "lang", "orientation", "style", "unicode", "vert-adv-y", "vert-origin-x", "vert-origin-y", "xml:base", "xml:lang", "xml:space"]),
      glyphRef: zt(["class", "dx", "dy", "format", "glyphRef", "id", "style", "x", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "y"]),
      glyphref: gt(),
      hkern: zt(["g1", "g2", "id", "k", "u1", "u2", "xml:base", "xml:lang", "xml:space"]),
      image: zt(["class", "externalResourcesRequired", "height", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "preserveAspectRatio", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "width", "x", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "y"]),
      line: zt(["class", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "x1", "x2", "xml:base", "xml:lang", "xml:space", "y1", "y2"]),
      linearGradient: zt(["class", "externalResourcesRequired", "gradientTransform", "gradientUnits", "id", "spreadMethod", "style", "x1", "x2", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "y1", "y2"]),
      marker: zt(["class", "externalResourcesRequired", "id", "markerHeight", "markerUnits", "markerWidth", "orient", "preserveAspectRatio", "refX", "refY", "style", "viewBox", "xml:base", "xml:lang", "xml:space"]),
      mask: zt(["class", "externalResourcesRequired", "height", "id", "maskContentUnits", "maskUnits", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      metadata: zt(["id", "xml:base", "xml:lang", "xml:space"]),
      "missing-glyph": zt(["class", "d", "horiz-adv-x", "id", "style", "vert-adv-y", "vert-origin-x", "vert-origin-y", "xml:base", "xml:lang", "xml:space"]),
      mpath: zt(["externalResourcesRequired", "id", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      path: zt(["class", "d", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "pathLength", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml:base", "xml:lang", "xml:space"]),
      pattern: zt(["class", "externalResourcesRequired", "height", "id", "patternContentUnits", "patternTransform", "patternUnits", "preserveAspectRatio", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "viewBox", "width", "x", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "y"]),
      polygon: zt(["class", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "points", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml:base", "xml:lang", "xml:space"]),
      polyline: zt(["class", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "points", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml:base", "xml:lang", "xml:space"]),
      radialGradient: zt(["class", "cx", "cy", "externalResourcesRequired", "fx", "fy", "gradientTransform", "gradientUnits", "id", "r", "spreadMethod", "style", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      rect: zt(["class", "externalResourcesRequired", "height", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "rx", "ry", "style", "systemLanguage", "transform", "width", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      script: zt(["externalResourcesRequired", "id", "type", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      set: zt(["attributeName", "attributeType", "begin", "dur", "end", "externalResourcesRequired", "fill", "id", "max", "min", "onbegin", "onend", "onload", "onrepeat", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "systemLanguage", "to", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      stop: zt(["class", "id", "offset", "style", "xml:base", "xml:lang", "xml:space"]),
      style: zt(["id", "media", "title", "type", "xml:base", "xml:lang", "xml:space"]),
      svg: zt(["baseProfile", "class", "contentScriptType", "contentStyleType", "externalResourcesRequired", "height", "id", "onabort", "onactivate", "onclick", "onerror", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "onresize", "onscroll", "onunload", "onzoom", "preserveAspectRatio", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "version", "viewBox", "width", "x", "xml:base", "xml:lang", "xml:space", "y", "zoomAndPan"]),
      switch: zt(["class", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "xml:base", "xml:lang", "xml:space"]),
      symbol: zt(["class", "externalResourcesRequired", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "preserveAspectRatio", "style", "viewBox", "xml:base", "xml:lang", "xml:space"]),
      text: zt(["class", "dx", "dy", "externalResourcesRequired", "id", "lengthAdjust", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "rotate", "style", "systemLanguage", "textLength", "transform", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      textPath: zt(["class", "externalResourcesRequired", "id", "lengthAdjust", "method", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "spacing", "startOffset", "style", "systemLanguage", "textLength", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space"]),
      title: zt(["class", "id", "style", "xml:base", "xml:lang", "xml:space"]),
      tref: zt(["class", "dx", "dy", "externalResourcesRequired", "id", "lengthAdjust", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "rotate", "style", "systemLanguage", "textLength", "x", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "y"]),
      tspan: zt(["class", "dx", "dy", "externalResourcesRequired", "id", "lengthAdjust", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "rotate", "style", "systemLanguage", "textLength", "x", "xml:base", "xml:lang", "xml:space", "y"]),
      use: zt(["class", "externalResourcesRequired", "height", "id", "onactivate", "onclick", "onfocusin", "onfocusout", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "requiredExtensions", "requiredFeatures", "style", "systemLanguage", "transform", "width", "x", "xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "y"]),
      view: zt(["externalResourcesRequired", "id", "preserveAspectRatio", "viewBox", "viewTarget", "xml:base", "xml:lang", "xml:space", "zoomAndPan"]),
      vkern: zt(["g1", "g2", "id", "k", "u1", "u2", "xml:base", "xml:lang", "xml:space"])
    });
    this.V = zt(["a", "altGlyph", "animate", "animateColor", "circle", "clipPath", "defs", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feFlood", "feGaussianBlur", "feImage", "feMerge", "feMorphology", "feOffset", "feSpecularLighting", "feTile", "feTurbulence", "filter", "font", "foreignObject", "g", "glyph", "glyphRef", "image", "line", "linearGradient", "marker", "mask", "missing-glyph", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "switch", "symbol", "text", "textPath", "tref", "tspan", "use"]);
    this._ = zt(["alignment-baseline", "baseline-shift", "clip-path", "clip-rule", "clip", "color-interpolation-filters", "color-interpolation", "color-profile", "color-rendering", "color", "cursor", "direction", "display", "dominant-baseline", "enable-background", "fill-opacity", "fill-rule", "fill", "filter", "flood-color", "flood-opacity", "font-family", "font-size-adjust", "font-size", "font-stretch", "font-style", "font-variant", "font-weight", "glyph-orientation-horizontal", "glyph-orientation-vertical", "image-rendering", "kerning", "letter-spacing", "lighting-color", "marker-end", "marker-mid", "marker-start", "mask", "opacity", "overflow", "pointer-events", "shape-rendering", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke-width", "stroke", "text-anchor", "text-decoration", "text-rendering", "unicode-bidi", "visibility", "word-spacing", "writing-mode"]);
    this.SVGElement = t.globalThis.SVGElement;
    const e = t.document.createElement("div");
    e.innerHTML = "<svg><altGlyph /></svg>";

    if ("altglyph" === e.firstElementChild.nodeName) {
      const t = this.F;
      let e = t.altGlyph;
      t.altGlyph = t.altglyph;
      t.altglyph = e;
      e = t.altGlyphDef;
      t.altGlyphDef = t.altglyphdef;
      t.altglyphdef = e;
      e = t.altGlyphItem;
      t.altGlyphItem = t.altglyphitem;
      t.altglyphitem = e;
      e = t.glyphRef;
      t.glyphRef = t.glyphref;
      t.glyphref = e;
    }
  }

  static register(t) {
    return _kernel.Registration.singleton(Ht, this).register(t);
  }

  isStandardSvgAttribute(t, e) {
    var i;
    if (!(t instanceof this.SVGElement)) return false;
    return true === this.V[t.nodeName] && true === this._[e] || true === (null === (i = this.F[t.nodeName]) || void 0 === i ? void 0 : i[e]);
  }

}

exports.SVGAnalyzer = SVGAnalyzer;
SVGAnalyzer.inject = [Wt];

const Gt = _kernel.DI.createInterface("IAttrMapper", t => t.singleton(AttrMapper));

exports.IAttrMapper = Gt;

class AttrMapper {
  constructor(t) {
    this.svg = t;
    this.fns = [];
    this.j = gt();
    this.N = gt();
    this.useMapping({
      LABEL: {
        for: "htmlFor"
      },
      IMG: {
        usemap: "useMap"
      },
      INPUT: {
        maxlength: "maxLength",
        minlength: "minLength",
        formaction: "formAction",
        formenctype: "formEncType",
        formmethod: "formMethod",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        inputmode: "inputMode"
      },
      TEXTAREA: {
        maxlength: "maxLength"
      },
      TD: {
        rowspan: "rowSpan",
        colspan: "colSpan"
      },
      TH: {
        rowspan: "rowSpan",
        colspan: "colSpan"
      }
    });
    this.useGlobalMapping({
      accesskey: "accessKey",
      contenteditable: "contentEditable",
      tabindex: "tabIndex",
      textcontent: "textContent",
      innerhtml: "innerHTML",
      scrolltop: "scrollTop",
      scrollleft: "scrollLeft",
      readonly: "readOnly"
    });
  }

  static get inject() {
    return [Ht];
  }

  useMapping(t) {
    var e;
    var i;
    let s;
    let n;
    let r;
    let o;

    for (r in t) {
      s = t[r];
      n = null !== (e = (i = this.j)[r]) && void 0 !== e ? e : i[r] = gt();

      for (o in s) {
        if (void 0 !== n[o]) throw Kt(o, r);
        n[o] = s[o];
      }
    }
  }

  useGlobalMapping(t) {
    const e = this.N;

    for (const i in t) {
      if (void 0 !== e[i]) throw Kt(i, "*");
      e[i] = t[i];
    }
  }

  useTwoWay(t) {
    this.fns.push(t);
  }

  isTwoWay(t, e) {
    return Xt(t, e) || this.fns.length > 0 && this.fns.some(i => i(t, e));
  }

  map(t, e) {
    var i, s, n;
    return null !== (n = null !== (s = null === (i = this.j[t.nodeName]) || void 0 === i ? void 0 : i[e]) && void 0 !== s ? s : this.N[e]) && void 0 !== n ? n : xt(t, e, this.svg) ? e : null;
  }

}

function Xt(t, e) {
  switch (t.nodeName) {
    case "INPUT":
      switch (t.type) {
        case "checkbox":
        case "radio":
          return "checked" === e;

        default:
          return "value" === e || "files" === e || "value-as-number" === e || "value-as-date" === e;
      }

    case "TEXTAREA":
    case "SELECT":
      return "value" === e;

    default:
      switch (e) {
        case "textcontent":
        case "innerhtml":
          return t.hasAttribute("contenteditable");

        case "scrolltop":
        case "scrollleft":
          return true;

        default:
          return false;
      }

  }
}

function Kt(t, e) {
  return new Error(`Attribute ${t} has been already registered for ${"*" === e ? "all elements" : `<${e}/>`}`);
}

class CallBinding {
  constructor(t, e, i, s, n) {
    this.sourceExpression = t;
    this.target = e;
    this.targetProperty = i;
    this.locator = n;
    this.interceptor = this;
    this.isBound = false;
    this.targetObserver = s.getAccessor(e, i);
  }

  callSource(t) {
    const e = this.$scope.overrideContext;
    e.$event = t;
    const i = this.sourceExpression.evaluate(8, this.$scope, this.locator, null);
    Reflect.deleteProperty(e, "$event");
    return i;
  }

  $bind(t, e) {
    if (this.isBound) {
      if (this.$scope === e) return;
      this.interceptor.$unbind(2 | t);
    }

    this.$scope = e;
    if (this.sourceExpression.hasBind) this.sourceExpression.bind(t, e, this.interceptor);
    this.targetObserver.setValue(t => this.interceptor.callSource(t), t, this.target, this.targetProperty);
    this.isBound = true;
  }

  $unbind(t) {
    if (!this.isBound) return;
    if (this.sourceExpression.hasUnbind) this.sourceExpression.unbind(t, this.$scope, this.interceptor);
    this.$scope = void 0;
    this.targetObserver.setValue(null, t, this.target, this.targetProperty);
    this.isBound = false;
  }

  observe(t, e) {
    return;
  }

  handleChange(t, e, i) {
    return;
  }

}

exports.CallBinding = CallBinding;

class AttributeObserver {
  constructor(t, e, i) {
    this.type = 2 | 1 | 4;
    this.v = null;
    this.ov = null;
    this.W = false;
    this.f = 0;
    this.o = t;
    this.H = e;
    this.G = i;
  }

  getValue() {
    return this.v;
  }

  setValue(t, e) {
    this.v = t;
    this.W = t !== this.ov;
    if (0 === (256 & e)) this.X();
  }

  X() {
    if (this.W) {
      this.W = false;
      this.ov = this.v;

      switch (this.G) {
        case "class":
          this.o.classList.toggle(this.H, !!this.v);
          break;

        case "style":
          {
            let t = "";
            let e = this.v;

            if (Ct(e) && e.includes("!important")) {
              t = "important";
              e = e.replace("!important", "");
            }

            this.o.style.setProperty(this.H, e, t);
            break;
          }

        default:
          if (null == this.v) this.o.removeAttribute(this.G);else this.o.setAttribute(this.G, String(this.v));
      }
    }
  }

  handleMutation(t) {
    let e = false;

    for (let i = 0, s = t.length; s > i; ++i) {
      const s = t[i];

      if ("attributes" === s.type && s.attributeName === this.H) {
        e = true;
        break;
      }
    }

    if (e) {
      let t;

      switch (this.G) {
        case "class":
          t = this.o.classList.contains(this.H);
          break;

        case "style":
          t = this.o.style.getPropertyValue(this.H);
          break;

        default:
          throw new Error(`AUR0651:${this.G}`);
      }

      if (t !== this.v) {
        this.ov = this.v;
        this.v = t;
        this.W = false;
        this.f = 0;
        this.queue.add(this);
      }
    }
  }

  subscribe(t) {
    if (this.subs.add(t) && 1 === this.subs.count) {
      this.v = this.ov = this.o.getAttribute(this.H);
      Yt(this.o.ownerDocument.defaultView.MutationObserver, this.o, this);
    }
  }

  unsubscribe(t) {
    if (this.subs.remove(t) && 0 === this.subs.count) Qt(this.o, this);
  }

  flush() {
    te = this.ov;
    this.ov = this.v;
    this.subs.notify(this.v, te, this.f);
  }

}

(0, _runtime.subscriberCollection)(AttributeObserver);
(0, _runtime.withFlushQueue)(AttributeObserver);

const Yt = (t, e, i) => {
  if (void 0 === e.$eMObs) e.$eMObs = new Set();
  if (void 0 === e.$mObs) (e.$mObs = new t(Zt)).observe(e, {
    attributes: true
  });
  e.$eMObs.add(i);
};

const Qt = (t, e) => {
  const i = t.$eMObs;

  if (i && i.delete(e)) {
    if (0 === i.size) {
      t.$mObs.disconnect();
      t.$mObs = void 0;
    }

    return true;
  }

  return false;
};

const Zt = t => {
  t[0].target.$eMObs.forEach(Jt, t);
};

function Jt(t) {
  t.handleMutation(this);
}

let te;

class BindingTargetSubscriber {
  constructor(t) {
    this.b = t;
  }

  handleChange(t, e, i) {
    const s = this.b;
    if (t !== s.sourceExpression.evaluate(i, s.$scope, s.locator, null)) s.updateSource(t, i);
  }

}

const {
  oneTime: ee,
  toView: ie,
  fromView: se
} = _runtime.BindingMode;
const ne = ie | ee;
const re = {
  reusable: false,
  preempt: true
};

class AttributeBinding {
  constructor(t, e, i, s, n, r, o) {
    this.sourceExpression = t;
    this.targetAttribute = i;
    this.targetProperty = s;
    this.mode = n;
    this.locator = o;
    this.interceptor = this;
    this.isBound = false;
    this.$scope = null;
    this.task = null;
    this.targetSubscriber = null;
    this.persistentFlags = 0;
    this.value = void 0;
    this.target = e;
    this.p = o.get(Wt);
    this.oL = r;
  }

  updateTarget(t, e) {
    e |= this.persistentFlags;
    this.targetObserver.setValue(t, e, this.target, this.targetProperty);
  }

  updateSource(t, e) {
    e |= this.persistentFlags;
    this.sourceExpression.assign(e, this.$scope, this.locator, t);
  }

  handleChange(t, e, i) {
    if (!this.isBound) return;
    i |= this.persistentFlags;
    const s = this.mode;
    const n = this.interceptor;
    const r = this.sourceExpression;
    const o = this.$scope;
    const l = this.locator;
    const h = this.targetObserver;
    const a = 0 === (2 & i) && (4 & h.type) > 0;
    let c = false;
    let u;

    if (10082 !== r.$kind || this.obs.count > 1) {
      c = 0 === (s & ee);
      if (c) this.obs.version++;
      t = r.evaluate(i, o, l, n);
      if (c) this.obs.clear();
    }

    if (t !== this.value) {
      this.value = t;

      if (a) {
        u = this.task;
        this.task = this.p.domWriteQueue.queueTask(() => {
          this.task = null;
          n.updateTarget(t, i);
        }, re);
        null === u || void 0 === u ? void 0 : u.cancel();
      } else n.updateTarget(t, i);
    }
  }

  $bind(t, e) {
    var i;

    if (this.isBound) {
      if (this.$scope === e) return;
      this.interceptor.$unbind(2 | t);
    }

    this.persistentFlags = 961 & t;
    this.$scope = e;
    let s = this.sourceExpression;
    if (s.hasBind) s.bind(t, e, this.interceptor);
    let n = this.targetObserver;
    if (!n) n = this.targetObserver = new AttributeObserver(this.target, this.targetProperty, this.targetAttribute);
    s = this.sourceExpression;
    const r = this.mode;
    const o = this.interceptor;
    let l = false;

    if (r & ne) {
      l = (r & ie) > 0;
      o.updateTarget(this.value = s.evaluate(t, e, this.locator, l ? o : null), t);
    }

    if (r & se) n.subscribe(null !== (i = this.targetSubscriber) && void 0 !== i ? i : this.targetSubscriber = new BindingTargetSubscriber(o));
    this.isBound = true;
  }

  $unbind(t) {
    var e;
    if (!this.isBound) return;
    this.persistentFlags = 0;
    if (this.sourceExpression.hasUnbind) this.sourceExpression.unbind(t, this.$scope, this.interceptor);
    this.$scope = null;
    this.value = void 0;
    if (this.targetSubscriber) this.targetObserver.unsubscribe(this.targetSubscriber);
    null === (e = this.task) || void 0 === e ? void 0 : e.cancel();
    this.task = null;
    this.obs.clearAll();
    this.isBound = false;
  }

}

exports.AttributeBinding = AttributeBinding;
(0, _runtime.connectable)(AttributeBinding);
const {
  toView: oe
} = _runtime.BindingMode;
const le = {
  reusable: false,
  preempt: true
};

class InterpolationBinding {
  constructor(t, e, i, s, n, r, o) {
    this.interpolation = e;
    this.target = i;
    this.targetProperty = s;
    this.mode = n;
    this.locator = r;
    this.taskQueue = o;
    this.interceptor = this;
    this.isBound = false;
    this.$scope = void 0;
    this.task = null;
    this.oL = t;
    this.targetObserver = t.getAccessor(i, s);
    const l = e.expressions;
    const h = this.partBindings = Array(l.length);
    const a = l.length;
    let c = 0;

    for (; a > c; ++c) h[c] = new InterpolationPartBinding(l[c], i, s, r, t, this);
  }

  updateTarget(t, e) {
    const i = this.partBindings;
    const s = this.interpolation.parts;
    const n = i.length;
    let r = "";
    let o = 0;
    if (1 === n) r = s[0] + i[0].value + s[1];else {
      r = s[0];

      for (; n > o; ++o) r += i[o].value + s[o + 1];
    }
    const l = this.targetObserver;
    const h = 0 === (2 & e) && (4 & l.type) > 0;
    let a;

    if (h) {
      a = this.task;
      this.task = this.taskQueue.queueTask(() => {
        this.task = null;
        l.setValue(r, e, this.target, this.targetProperty);
      }, le);
      null === a || void 0 === a ? void 0 : a.cancel();
      a = null;
    } else l.setValue(r, e, this.target, this.targetProperty);
  }

  $bind(t, e) {
    if (this.isBound) {
      if (this.$scope === e) return;
      this.interceptor.$unbind(t);
    }

    this.isBound = true;
    this.$scope = e;
    const i = this.partBindings;
    const s = i.length;
    let n = 0;

    for (; s > n; ++n) i[n].$bind(t, e);

    this.updateTarget(void 0, t);
  }

  $unbind(t) {
    var e;
    if (!this.isBound) return;
    this.isBound = false;
    this.$scope = void 0;
    const i = this.partBindings;
    const s = i.length;
    let n = 0;

    for (; s > n; ++n) i[n].interceptor.$unbind(t);

    null === (e = this.task) || void 0 === e ? void 0 : e.cancel();
    this.task = null;
  }

}

exports.InterpolationBinding = InterpolationBinding;

class InterpolationPartBinding {
  constructor(t, e, i, s, n, r) {
    this.sourceExpression = t;
    this.target = e;
    this.targetProperty = i;
    this.locator = s;
    this.owner = r;
    this.interceptor = this;
    this.mode = _runtime.BindingMode.toView;
    this.value = "";
    this.task = null;
    this.isBound = false;
    this.oL = n;
  }

  handleChange(t, e, i) {
    if (!this.isBound) return;
    const s = this.sourceExpression;
    const n = this.obs;
    const r = 10082 === s.$kind && 1 === n.count;
    let o = false;

    if (!r) {
      o = (this.mode & oe) > 0;
      if (o) n.version++;
      t = s.evaluate(i, this.$scope, this.locator, o ? this.interceptor : null);
      if (o) n.clear();
    }

    if (t != this.value) {
      this.value = t;
      if (t instanceof Array) this.observeCollection(t);
      this.owner.updateTarget(t, i);
    }
  }

  handleCollectionChange(t, e) {
    this.owner.updateTarget(void 0, e);
  }

  $bind(t, e) {
    if (this.isBound) {
      if (this.$scope === e) return;
      this.interceptor.$unbind(t);
    }

    this.isBound = true;
    this.$scope = e;
    if (this.sourceExpression.hasBind) this.sourceExpression.bind(t, e, this.interceptor);
    this.value = this.sourceExpression.evaluate(t, e, this.locator, (this.mode & oe) > 0 ? this.interceptor : null);
    if (this.value instanceof Array) this.observeCollection(this.value);
  }

  $unbind(t) {
    if (!this.isBound) return;
    this.isBound = false;
    if (this.sourceExpression.hasUnbind) this.sourceExpression.unbind(t, this.$scope, this.interceptor);
    this.$scope = void 0;
    this.obs.clearAll();
  }

}

(0, _runtime.connectable)(InterpolationPartBinding);

class ContentBinding {
  constructor(t, e, i, s, n, r) {
    this.sourceExpression = t;
    this.target = e;
    this.locator = i;
    this.p = n;
    this.strict = r;
    this.interceptor = this;
    this.mode = _runtime.BindingMode.toView;
    this.value = "";
    this.task = null;
    this.isBound = false;
    this.oL = s;
  }

  updateTarget(t, e) {
    var i, s;
    const n = this.target;
    const r = this.p.Node;
    const o = this.value;
    this.value = t;
    if (o instanceof r) null === (i = o.parentNode) || void 0 === i ? void 0 : i.removeChild(o);

    if (t instanceof r) {
      n.textContent = "";
      null === (s = n.parentNode) || void 0 === s ? void 0 : s.insertBefore(t, n);
    } else n.textContent = String(t);
  }

  handleChange(t, e, i) {
    var s;
    if (!this.isBound) return;
    const n = this.sourceExpression;
    const r = this.obs;
    const o = 10082 === n.$kind && 1 === r.count;
    let l = false;

    if (!o) {
      l = (this.mode & oe) > 0;
      if (l) r.version++;
      i |= this.strict ? 1 : 0;
      t = n.evaluate(i, this.$scope, this.locator, l ? this.interceptor : null);
      if (l) r.clear();
    }

    if (t === this.value) {
      null === (s = this.task) || void 0 === s ? void 0 : s.cancel();
      this.task = null;
      return;
    }

    const h = 0 === (2 & i);
    if (h) this.queueUpdate(t, i);else this.updateTarget(t, i);
  }

  handleCollectionChange() {
    this.queueUpdate(this.value, 0);
  }

  $bind(t, e) {
    if (this.isBound) {
      if (this.$scope === e) return;
      this.interceptor.$unbind(t);
    }

    this.isBound = true;
    this.$scope = e;
    if (this.sourceExpression.hasBind) this.sourceExpression.bind(t, e, this.interceptor);
    t |= this.strict ? 1 : 0;
    const i = this.value = this.sourceExpression.evaluate(t, e, this.locator, (this.mode & oe) > 0 ? this.interceptor : null);
    if (i instanceof Array) this.observeCollection(i);
    this.updateTarget(i, t);
  }

  $unbind(t) {
    var e;
    if (!this.isBound) return;
    this.isBound = false;
    if (this.sourceExpression.hasUnbind) this.sourceExpression.unbind(t, this.$scope, this.interceptor);
    this.$scope = void 0;
    this.obs.clearAll();
    null === (e = this.task) || void 0 === e ? void 0 : e.cancel();
    this.task = null;
  }

  queueUpdate(t, e) {
    const i = this.task;
    this.task = this.p.domWriteQueue.queueTask(() => {
      this.task = null;
      this.updateTarget(t, e);
    }, le);
    null === i || void 0 === i ? void 0 : i.cancel();
  }

}

(0, _runtime.connectable)(ContentBinding);

class LetBinding {
  constructor(t, e, i, s, n = false) {
    this.sourceExpression = t;
    this.targetProperty = e;
    this.locator = s;
    this.interceptor = this;
    this.isBound = false;
    this.$scope = void 0;
    this.task = null;
    this.target = null;
    this.oL = i;
    this.K = n;
  }

  handleChange(t, e, i) {
    if (!this.isBound) return;
    const s = this.target;
    const n = this.targetProperty;
    const r = s[n];
    this.obs.version++;
    t = this.sourceExpression.evaluate(i, this.$scope, this.locator, this.interceptor);
    this.obs.clear();
    if (t !== r) s[n] = t;
  }

  $bind(t, e) {
    if (this.isBound) {
      if (this.$scope === e) return;
      this.interceptor.$unbind(2 | t);
    }

    this.$scope = e;
    this.target = this.K ? e.bindingContext : e.overrideContext;
    const i = this.sourceExpression;
    if (i.hasBind) i.bind(t, e, this.interceptor);
    this.target[this.targetProperty] = this.sourceExpression.evaluate(2 | t, e, this.locator, this.interceptor);
    this.isBound = true;
  }

  $unbind(t) {
    if (!this.isBound) return;
    const e = this.sourceExpression;
    if (e.hasUnbind) e.unbind(t, this.$scope, this.interceptor);
    this.$scope = void 0;
    this.obs.clearAll();
    this.isBound = false;
  }

}

exports.LetBinding = LetBinding;
(0, _runtime.connectable)(LetBinding);
const {
  oneTime: he,
  toView: ae,
  fromView: ce
} = _runtime.BindingMode;
const ue = ae | he;
const fe = {
  reusable: false,
  preempt: true
};

class PropertyBinding {
  constructor(t, e, i, s, n, r, o) {
    this.sourceExpression = t;
    this.target = e;
    this.targetProperty = i;
    this.mode = s;
    this.locator = r;
    this.taskQueue = o;
    this.interceptor = this;
    this.isBound = false;
    this.$scope = void 0;
    this.targetObserver = void 0;
    this.persistentFlags = 0;
    this.task = null;
    this.targetSubscriber = null;
    this.oL = n;
  }

  updateTarget(t, e) {
    e |= this.persistentFlags;
    this.targetObserver.setValue(t, e, this.target, this.targetProperty);
  }

  updateSource(t, e) {
    e |= this.persistentFlags;
    this.sourceExpression.assign(e, this.$scope, this.locator, t);
  }

  handleChange(t, e, i) {
    if (!this.isBound) return;
    i |= this.persistentFlags;
    const s = 0 === (2 & i) && (4 & this.targetObserver.type) > 0;
    const n = this.obs;
    let r = false;

    if (10082 !== this.sourceExpression.$kind || n.count > 1) {
      r = this.mode > he;
      if (r) n.version++;
      t = this.sourceExpression.evaluate(i, this.$scope, this.locator, this.interceptor);
      if (r) n.clear();
    }

    if (s) {
      de = this.task;
      this.task = this.taskQueue.queueTask(() => {
        this.interceptor.updateTarget(t, i);
        this.task = null;
      }, fe);
      null === de || void 0 === de ? void 0 : de.cancel();
      de = null;
    } else this.interceptor.updateTarget(t, i);
  }

  $bind(t, e) {
    var i;

    if (this.isBound) {
      if (this.$scope === e) return;
      this.interceptor.$unbind(2 | t);
    }

    t |= 1;
    this.persistentFlags = 961 & t;
    this.$scope = e;
    let s = this.sourceExpression;
    if (s.hasBind) s.bind(t, e, this.interceptor);
    const n = this.oL;
    const r = this.mode;
    let o = this.targetObserver;

    if (!o) {
      if (r & ce) o = n.getObserver(this.target, this.targetProperty);else o = n.getAccessor(this.target, this.targetProperty);
      this.targetObserver = o;
    }

    s = this.sourceExpression;
    const l = this.interceptor;
    const h = (r & ae) > 0;
    if (r & ue) l.updateTarget(s.evaluate(t, e, this.locator, h ? l : null), t);

    if (r & ce) {
      o.subscribe(null !== (i = this.targetSubscriber) && void 0 !== i ? i : this.targetSubscriber = new BindingTargetSubscriber(l));
      if (!h) l.updateSource(o.getValue(this.target, this.targetProperty), t);
    }

    this.isBound = true;
  }

  $unbind(t) {
    if (!this.isBound) return;
    this.persistentFlags = 0;
    if (this.sourceExpression.hasUnbind) this.sourceExpression.unbind(t, this.$scope, this.interceptor);
    this.$scope = void 0;
    de = this.task;
    if (this.targetSubscriber) this.targetObserver.unsubscribe(this.targetSubscriber);

    if (null != de) {
      de.cancel();
      de = this.task = null;
    }

    this.obs.clearAll();
    this.isBound = false;
  }

}

exports.PropertyBinding = PropertyBinding;
(0, _runtime.connectable)(PropertyBinding);
let de = null;

class RefBinding {
  constructor(t, e, i) {
    this.sourceExpression = t;
    this.target = e;
    this.locator = i;
    this.interceptor = this;
    this.isBound = false;
    this.$scope = void 0;
  }

  $bind(t, e) {
    if (this.isBound) {
      if (this.$scope === e) return;
      this.interceptor.$unbind(2 | t);
    }

    this.$scope = e;
    if (this.sourceExpression.hasBind) this.sourceExpression.bind(t, e, this);
    this.sourceExpression.assign(t, this.$scope, this.locator, this.target);
    this.isBound = true;
  }

  $unbind(t) {
    if (!this.isBound) return;
    let e = this.sourceExpression;
    if (e.evaluate(t, this.$scope, this.locator, null) === this.target) e.assign(t, this.$scope, this.locator, null);
    e = this.sourceExpression;
    if (e.hasUnbind) e.unbind(t, this.$scope, this.interceptor);
    this.$scope = void 0;
    this.isBound = false;
  }

  observe(t, e) {
    return;
  }

  handleChange(t, e, i) {
    return;
  }

}

exports.RefBinding = RefBinding;

const me = _kernel.DI.createInterface("IAppTask");

exports.IAppTask = me;

class $AppTask {
  constructor(t, e, i) {
    this.c = void 0;
    this.slot = t;
    this.k = e;
    this.cb = i;
  }

  register(t) {
    return this.c = t.register(_kernel.Registration.instance(me, this));
  }

  run() {
    const t = this.k;
    const e = this.cb;
    return null === t ? e() : e(this.c.get(t));
  }

}

const ve = Object.freeze({
  beforeCreate: pe("beforeCreate"),
  hydrating: pe("hydrating"),
  hydrated: pe("hydrated"),
  beforeActivate: pe("beforeActivate"),
  afterActivate: pe("afterActivate"),
  beforeDeactivate: pe("beforeDeactivate"),
  afterDeactivate: pe("afterDeactivate")
});
exports.AppTask = ve;

function pe(t) {
  function e(e, i) {
    if (kt(i)) return new $AppTask(t, e, i);
    return new $AppTask(t, null, e);
  }

  return e;
}

function ge(t, e) {
  let i;

  function s(t, e) {
    if (arguments.length > 1) i.property = e;
    at(be, ChildrenDefinition.create(e, i), t.constructor, e);
    vt(t.constructor, xe.keyFrom(e));
  }

  if (arguments.length > 1) {
    i = {};
    s(t, e);
    return;
  } else if (Ct(t)) {
    i = {};
    return s;
  }

  i = void 0 === t ? {} : t;
  return s;
}

function we(t) {
  return t.startsWith(be);
}

const be = ft("children-observer");
const xe = Object.freeze({
  name: be,
  keyFrom: t => `${be}:${t}`,

  from(...t) {
    const e = {};
    const i = Array.isArray;

    function s(t) {
      e[t] = ChildrenDefinition.create(t);
    }

    function n(t, i) {
      e[t] = ChildrenDefinition.create(t, i);
    }

    function r(t) {
      if (i(t)) t.forEach(s);else if (t instanceof ChildrenDefinition) e[t.property] = t;else if (void 0 !== t) Object.keys(t).forEach(e => n(e, t));
    }

    t.forEach(r);
    return e;
  },

  getAll(t) {
    const e = be.length + 1;
    const i = [];
    const n = (0, _kernel.getPrototypeChain)(t);
    let r = n.length;
    let o = 0;
    let l;
    let h;
    let a;

    while (--r >= 0) {
      a = n[r];
      l = pt(a).filter(we);
      h = l.length;

      for (let t = 0; t < h; ++t) i[o++] = lt(be, a, l[t].slice(e));
    }

    return i;
  }

});
exports.Children = xe;
const ye = {
  childList: true
};

class ChildrenDefinition {
  constructor(t, e, i, s, n, r) {
    this.callback = t;
    this.property = e;
    this.options = i;
    this.query = s;
    this.filter = n;
    this.map = r;
  }

  static create(t, e = {}) {
    var i;
    return new ChildrenDefinition((0, _kernel.firstDefined)(e.callback, `${t}Changed`), (0, _kernel.firstDefined)(e.property, t), null !== (i = e.options) && void 0 !== i ? i : ye, e.query, e.filter, e.map);
  }

}

exports.ChildrenDefinition = ChildrenDefinition;

class ChildrenObserver {
  constructor(t, e, i, s, n = ke, r = Ce, o = Ae, l) {
    this.controller = t;
    this.obj = e;
    this.propertyKey = i;
    this.query = n;
    this.filter = r;
    this.map = o;
    this.options = l;
    this.observing = false;
    this.children = void 0;
    this.observer = void 0;
    this.callback = e[s];
    Reflect.defineProperty(this.obj, this.propertyKey, {
      enumerable: true,
      configurable: true,
      get: () => this.getValue(),
      set: () => {}
    });
  }

  getValue() {
    return this.observing ? this.children : this.get();
  }

  setValue(t) {}

  start() {
    var t;

    if (!this.observing) {
      this.observing = true;
      this.children = this.get();
      (null !== (t = this.observer) && void 0 !== t ? t : this.observer = new this.controller.host.ownerDocument.defaultView.MutationObserver(() => {
        this.Y();
      })).observe(this.controller.host, this.options);
    }
  }

  stop() {
    if (this.observing) {
      this.observing = false;
      this.observer.disconnect();
      this.children = _kernel.emptyArray;
    }
  }

  Y() {
    this.children = this.get();
    if (void 0 !== this.callback) this.callback.call(this.obj);
    this.subs.notify(this.children, void 0, 0);
  }

  get() {
    return Re(this.controller, this.query, this.filter, this.map);
  }

}

exports.ChildrenObserver = ChildrenObserver;
(0, _runtime.subscriberCollection)()(ChildrenObserver);

function ke(t) {
  return t.host.childNodes;
}

function Ce(t, e, i) {
  return !!i;
}

function Ae(t, e, i) {
  return i;
}

const Se = {
  optional: true
};

function Re(t, e, i, s) {
  var n;
  const r = e(t);
  const o = r.length;
  const l = [];
  let h;
  let a;
  let c;
  let u = 0;

  for (; u < o; ++u) {
    h = r[u];
    a = Ze.for(h, Se);
    c = null !== (n = null === a || void 0 === a ? void 0 : a.viewModel) && void 0 !== n ? n : null;
    if (i(h, a, c)) l.push(s(h, a, c));
  }

  return l;
}

function Ee(t) {
  return function (e) {
    return Pe.define(t, e);
  };
}

function Be(t) {
  return function (e) {
    return Pe.define(Ct(t) ? {
      isTemplateController: true,
      name: t
    } : {
      isTemplateController: true,
      ...t
    }, e);
  };
}

class CustomAttributeDefinition {
  constructor(t, e, i, s, n, r, o, l, h) {
    this.Type = t;
    this.name = e;
    this.aliases = i;
    this.key = s;
    this.defaultBindingMode = n;
    this.isTemplateController = r;
    this.bindables = o;
    this.noMultiBindings = l;
    this.watches = h;
  }

  get type() {
    return 2;
  }

  static create(t, e) {
    let i;
    let s;

    if (Ct(t)) {
      i = t;
      s = {
        name: i
      };
    } else {
      i = t.name;
      s = t;
    }

    return new CustomAttributeDefinition(e, (0, _kernel.firstDefined)(De(e, "name"), i), (0, _kernel.mergeArrays)(De(e, "aliases"), s.aliases, e.aliases), Pe.keyFrom(i), (0, _kernel.firstDefined)(De(e, "defaultBindingMode"), s.defaultBindingMode, e.defaultBindingMode, _runtime.BindingMode.toView), (0, _kernel.firstDefined)(De(e, "isTemplateController"), s.isTemplateController, e.isTemplateController, false), Et.from(...Et.getAll(e), De(e, "bindables"), e.bindables, s.bindables), (0, _kernel.firstDefined)(De(e, "noMultiBindings"), s.noMultiBindings, e.noMultiBindings, false), (0, _kernel.mergeArrays)(qe.getAnnotation(e), e.watches));
  }

  register(t) {
    const {
      Type: e,
      key: i,
      aliases: s
    } = this;

    _kernel.Registration.transient(i, e).register(t);

    _kernel.Registration.aliasTo(i, e).register(t);

    (0, _runtime.registerAliases)(s, Pe, i, t);
  }

}

exports.CustomAttributeDefinition = CustomAttributeDefinition;
const Ie = dt("custom-attribute");

const Te = t => `${Ie}:${t}`;

const De = (t, e) => lt(ft(e), t);

const Pe = Object.freeze({
  name: Ie,
  keyFrom: Te,

  isType(t) {
    return kt(t) && ht(Ie, t);
  },

  for(t, e) {
    var i;
    return null !== (i = Qi(t, Te(e))) && void 0 !== i ? i : void 0;
  },

  define(t, e) {
    const i = CustomAttributeDefinition.create(t, e);
    at(Ie, i, i.Type);
    at(Ie, i, i);
    mt(e, Ie);
    return i.Type;
  },

  getDefinition(t) {
    const e = lt(Ie, t);
    if (void 0 === e) throw new Error(`AUR0759:${t.name}`);
    return e;
  },

  annotate(t, e, i) {
    at(ft(e), i, t);
  },

  getAnnotation: De
});
exports.CustomAttribute = Pe;

function Oe(t, e) {
  if (!t) throw new Error("AUR0772");
  return function i(s, n, r) {
    const o = null == n;
    const l = o ? s : s.constructor;
    const h = new WatchDefinition(t, o ? e : r.value);

    if (o) {
      if (!kt(e) && (null == e || !(e in l.prototype))) throw new Error(`AUR0773:${String(e)}@${l.name}}`);
    } else if (!kt(null === r || void 0 === r ? void 0 : r.value)) throw new Error(`AUR0774:${String(n)}`);

    qe.add(l, h);
    if (Pe.isType(l)) Pe.getDefinition(l).watches.push(h);
    if (Ze.isType(l)) Ze.getDefinition(l).watches.push(h);
  };
}

class WatchDefinition {
  constructor(t, e) {
    this.expression = t;
    this.callback = e;
  }

}

const $e = _kernel.emptyArray;
const Le = ft("watch");
const qe = Object.freeze({
  name: Le,

  add(t, e) {
    let i = lt(Le, t);
    if (null == i) at(Le, i = [], t);
    i.push(e);
  },

  getAnnotation(t) {
    var e;
    return null !== (e = lt(Le, t)) && void 0 !== e ? e : $e;
  }

});
exports.Watch = qe;

function Me(t) {
  return function (e) {
    return Ze.define(t, e);
  };
}

function Ue(t) {
  if (void 0 === t) return function (t) {
    Ye(t, "shadowOptions", {
      mode: "open"
    });
  };
  if (!kt(t)) return function (e) {
    Ye(e, "shadowOptions", t);
  };
  Ye(t, "shadowOptions", {
    mode: "open"
  });
}

function Fe(t) {
  if (void 0 === t) return function (t) {
    Ye(t, "containerless", true);
  };
  Ye(t, "containerless", true);
}

const Ve = new WeakMap();

class CustomElementDefinition {
  constructor(t, e, i, s, n, r, o, l, h, a, c, u, f, d, m, v, p, g, w, b, x) {
    this.Type = t;
    this.name = e;
    this.aliases = i;
    this.key = s;
    this.cache = n;
    this.capture = r;
    this.template = o;
    this.instructions = l;
    this.dependencies = h;
    this.injectable = a;
    this.needsCompile = c;
    this.surrogates = u;
    this.bindables = f;
    this.childrenObservers = d;
    this.containerless = m;
    this.isStrictBinding = v;
    this.shadowOptions = p;
    this.hasSlots = g;
    this.enhance = w;
    this.watches = b;
    this.processContent = x;
  }

  get type() {
    return 1;
  }

  static create(t, e = null) {
    if (null === e) {
      const i = t;
      if (Ct(i)) throw new Error(`AUR0761:${t}`);
      const s = (0, _kernel.fromDefinitionOrDefault)("name", i, Ke);
      if (kt(i.Type)) e = i.Type;else e = Ze.generateType((0, _kernel.pascalCase)(s));
      return new CustomElementDefinition(e, s, (0, _kernel.mergeArrays)(i.aliases), (0, _kernel.fromDefinitionOrDefault)("key", i, () => Ze.keyFrom(s)), (0, _kernel.fromDefinitionOrDefault)("cache", i, je), (0, _kernel.fromDefinitionOrDefault)("capture", i, We), (0, _kernel.fromDefinitionOrDefault)("template", i, Ne), (0, _kernel.mergeArrays)(i.instructions), (0, _kernel.mergeArrays)(i.dependencies), (0, _kernel.fromDefinitionOrDefault)("injectable", i, Ne), (0, _kernel.fromDefinitionOrDefault)("needsCompile", i, He), (0, _kernel.mergeArrays)(i.surrogates), Et.from(i.bindables), xe.from(i.childrenObservers), (0, _kernel.fromDefinitionOrDefault)("containerless", i, We), (0, _kernel.fromDefinitionOrDefault)("isStrictBinding", i, We), (0, _kernel.fromDefinitionOrDefault)("shadowOptions", i, Ne), (0, _kernel.fromDefinitionOrDefault)("hasSlots", i, We), (0, _kernel.fromDefinitionOrDefault)("enhance", i, We), (0, _kernel.fromDefinitionOrDefault)("watches", i, ze), (0, _kernel.fromAnnotationOrTypeOrDefault)("processContent", e, Ne));
    }

    if (Ct(t)) return new CustomElementDefinition(e, t, (0, _kernel.mergeArrays)(Qe(e, "aliases"), e.aliases), Ze.keyFrom(t), (0, _kernel.fromAnnotationOrTypeOrDefault)("cache", e, je), (0, _kernel.fromAnnotationOrTypeOrDefault)("capture", e, We), (0, _kernel.fromAnnotationOrTypeOrDefault)("template", e, Ne), (0, _kernel.mergeArrays)(Qe(e, "instructions"), e.instructions), (0, _kernel.mergeArrays)(Qe(e, "dependencies"), e.dependencies), (0, _kernel.fromAnnotationOrTypeOrDefault)("injectable", e, Ne), (0, _kernel.fromAnnotationOrTypeOrDefault)("needsCompile", e, He), (0, _kernel.mergeArrays)(Qe(e, "surrogates"), e.surrogates), Et.from(...Et.getAll(e), Qe(e, "bindables"), e.bindables), xe.from(...xe.getAll(e), Qe(e, "childrenObservers"), e.childrenObservers), (0, _kernel.fromAnnotationOrTypeOrDefault)("containerless", e, We), (0, _kernel.fromAnnotationOrTypeOrDefault)("isStrictBinding", e, We), (0, _kernel.fromAnnotationOrTypeOrDefault)("shadowOptions", e, Ne), (0, _kernel.fromAnnotationOrTypeOrDefault)("hasSlots", e, We), (0, _kernel.fromAnnotationOrTypeOrDefault)("enhance", e, We), (0, _kernel.mergeArrays)(qe.getAnnotation(e), e.watches), (0, _kernel.fromAnnotationOrTypeOrDefault)("processContent", e, Ne));
    const i = (0, _kernel.fromDefinitionOrDefault)("name", t, Ke);
    return new CustomElementDefinition(e, i, (0, _kernel.mergeArrays)(Qe(e, "aliases"), t.aliases, e.aliases), Ze.keyFrom(i), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("cache", t, e, je), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("capture", t, e, We), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("template", t, e, Ne), (0, _kernel.mergeArrays)(Qe(e, "instructions"), t.instructions, e.instructions), (0, _kernel.mergeArrays)(Qe(e, "dependencies"), t.dependencies, e.dependencies), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("injectable", t, e, Ne), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("needsCompile", t, e, He), (0, _kernel.mergeArrays)(Qe(e, "surrogates"), t.surrogates, e.surrogates), Et.from(...Et.getAll(e), Qe(e, "bindables"), e.bindables, t.bindables), xe.from(...xe.getAll(e), Qe(e, "childrenObservers"), e.childrenObservers, t.childrenObservers), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("containerless", t, e, We), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("isStrictBinding", t, e, We), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("shadowOptions", t, e, Ne), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("hasSlots", t, e, We), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("enhance", t, e, We), (0, _kernel.mergeArrays)(t.watches, qe.getAnnotation(e), e.watches), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("processContent", t, e, Ne));
  }

  static getOrCreate(t) {
    if (t instanceof CustomElementDefinition) return t;
    if (Ve.has(t)) return Ve.get(t);
    const e = CustomElementDefinition.create(t);
    Ve.set(t, e);
    at(Ge, e, e.Type);
    return e;
  }

  register(t) {
    const {
      Type: e,
      key: i,
      aliases: s
    } = this;

    if (!t.has(i, false)) {
      _kernel.Registration.transient(i, e).register(t);

      _kernel.Registration.aliasTo(i, e).register(t);

      (0, _runtime.registerAliases)(s, Ze, i, t);
    }
  }

}

exports.CustomElementDefinition = CustomElementDefinition;
const _e = {
  name: void 0,
  searchParents: false,
  optional: false
};

const je = () => 0;

const Ne = () => null;

const We = () => false;

const He = () => true;

const ze = () => _kernel.emptyArray;

const Ge = dt("custom-element");

const Xe = t => `${Ge}:${t}`;

const Ke = (() => {
  let t = 0;
  return () => `unnamed-${++t}`;
})();

const Ye = (t, e, i) => {
  at(ft(e), i, t);
};

const Qe = (t, e) => lt(ft(e), t);

const Ze = Object.freeze({
  name: Ge,
  keyFrom: Xe,

  isType(t) {
    return kt(t) && ht(Ge, t);
  },

  for(t, e = _e) {
    if (void 0 === e.name && true !== e.searchParents) {
      const i = Qi(t, Ge);

      if (null === i) {
        if (true === e.optional) return null;
        throw new Error("AUR0762");
      }

      return i;
    }

    if (void 0 !== e.name) {
      if (true !== e.searchParents) {
        const i = Qi(t, Ge);
        if (null === i) throw new Error("AUR0763");
        if (i.is(e.name)) return i;
        return;
      }

      let i = t;
      let s = false;

      while (null !== i) {
        const t = Qi(i, Ge);

        if (null !== t) {
          s = true;
          if (t.is(e.name)) return t;
        }

        i = ns(i);
      }

      if (s) return;
      throw new Error("AUR0764");
    }

    let i = t;

    while (null !== i) {
      const t = Qi(i, Ge);
      if (null !== t) return t;
      i = ns(i);
    }

    throw new Error("AUR0765");
  },

  define(t, e) {
    const i = CustomElementDefinition.create(t, e);
    at(Ge, i, i.Type);
    at(Ge, i, i);
    mt(i.Type, Ge);
    return i.Type;
  },

  getDefinition(t) {
    const e = lt(Ge, t);
    if (void 0 === e) throw new Error(`AUR0760:${t.name}`);
    return e;
  },

  annotate: Ye,
  getAnnotation: Qe,
  generateName: Ke,

  createInjectable() {
    const t = function (e, i, s) {
      const n = _kernel.DI.getOrCreateAnnotationParamTypes(e);

      n[s] = t;
      return e;
    };

    t.register = function (e) {
      return {
        resolve(e, i) {
          if (i.has(t, true)) return i.get(t);else return null;
        }

      };
    };

    return t;
  },

  generateType: function () {
    const t = {
      value: "",
      writable: false,
      enumerable: false,
      configurable: true
    };
    const e = {};
    return function (i, s = e) {
      const n = class {};
      t.value = i;
      Reflect.defineProperty(n, "name", t);
      if (s !== e) Object.assign(n.prototype, s);
      return n;
    };
  }()
});
exports.CustomElement = Ze;
const Je = ft("processContent");

function ti(t) {
  return void 0 === t ? function (t, e, i) {
    at(Je, ei(t, e), t);
  } : function (e) {
    t = ei(e, t);
    const i = lt(Ge, e);
    if (void 0 !== i) i.processContent = t;else at(Je, t, e);
    return e;
  };
}

function ei(t, e) {
  if (Ct(e)) e = t[e];
  if (!kt(e)) throw new Error(`AUR0766:${typeof e}`);
  return e;
}

class ClassAttributeAccessor {
  constructor(t) {
    this.obj = t;
    this.type = 2 | 4;
    this.value = "";
    this.ov = "";
    this.Z = {};
    this.J = 0;
    this.W = false;
  }

  get doNotCache() {
    return true;
  }

  getValue() {
    return this.value;
  }

  setValue(t, e) {
    this.value = t;
    this.W = t !== this.ov;
    if (0 === (256 & e)) this.X();
  }

  X() {
    if (this.W) {
      this.W = false;
      const t = this.value;
      const e = this.Z;
      const i = ii(t);
      let s = this.J;
      this.ov = t;
      if (i.length > 0) this.tt(i);
      this.J += 1;
      if (0 === s) return;
      s -= 1;

      for (const t in e) {
        if (!Object.prototype.hasOwnProperty.call(e, t) || e[t] !== s) continue;
        this.obj.classList.remove(t);
      }
    }
  }

  tt(t) {
    const e = this.obj;
    const i = t.length;
    let s = 0;
    let n;

    for (; s < i; s++) {
      n = t[s];
      if (0 === n.length) continue;
      this.Z[n] = this.J;
      e.classList.add(n);
    }
  }

}

exports.ClassAttributeAccessor = ClassAttributeAccessor;

function ii(t) {
  if (Ct(t)) return si(t);
  if ("object" !== typeof t) return _kernel.emptyArray;

  if (t instanceof Array) {
    const e = t.length;

    if (e > 0) {
      const i = [];
      let s = 0;

      for (; e > s; ++s) i.push(...ii(t[s]));

      return i;
    } else return _kernel.emptyArray;
  }

  const e = [];
  let i;

  for (i in t) if (Boolean(t[i])) if (i.includes(" ")) e.push(...si(i));else e.push(i);

  return e;
}

function si(t) {
  const e = t.match(/\S+/g);
  if (null === e) return _kernel.emptyArray;
  return e;
}

function ni(...t) {
  return new CSSModulesProcessorRegistry(t);
}

class CSSModulesProcessorRegistry {
  constructor(t) {
    this.modules = t;
  }

  register(t) {
    var e;
    const i = Object.assign({}, ...this.modules);
    const s = Pe.define({
      name: "class",
      bindables: ["value"]
    }, (e = class CustomAttributeClass {
      constructor(t) {
        this.element = t;
      }

      binding() {
        this.valueChanged();
      }

      valueChanged() {
        if (!this.value) {
          this.element.className = "";
          return;
        }

        this.element.className = ii(this.value).map(t => i[t] || t).join(" ");
      }

    }, e.inject = [Ji], e));
    t.register(s);
  }

}

exports.CSSModulesProcessorRegistry = CSSModulesProcessorRegistry;

function ri(...t) {
  return new ShadowDOMRegistry(t);
}

const oi = _kernel.DI.createInterface("IShadowDOMStyleFactory", t => t.cachedCallback(t => {
  if (AdoptedStyleSheetsStyles.supported(t.get(Wt))) return t.get(AdoptedStyleSheetsStylesFactory);
  return t.get(StyleElementStylesFactory);
}));

exports.IShadowDOMStyleFactory = oi;

class ShadowDOMRegistry {
  constructor(t) {
    this.css = t;
  }

  register(t) {
    const e = t.get(hi);
    const i = t.get(oi);
    t.register(_kernel.Registration.instance(li, i.createStyles(this.css, e)));
  }

}

exports.ShadowDOMRegistry = ShadowDOMRegistry;

class AdoptedStyleSheetsStylesFactory {
  constructor(t) {
    this.p = t;
    this.cache = new Map();
  }

  createStyles(t, e) {
    return new AdoptedStyleSheetsStyles(this.p, t, this.cache, e);
  }

}

AdoptedStyleSheetsStylesFactory.inject = [Wt];

class StyleElementStylesFactory {
  constructor(t) {
    this.p = t;
  }

  createStyles(t, e) {
    return new StyleElementStyles(this.p, t, e);
  }

}

StyleElementStylesFactory.inject = [Wt];

const li = _kernel.DI.createInterface("IShadowDOMStyles");

exports.IShadowDOMStyles = li;

const hi = _kernel.DI.createInterface("IShadowDOMGlobalStyles", t => t.instance({
  applyTo: _kernel.noop
}));

exports.IShadowDOMGlobalStyles = hi;

class AdoptedStyleSheetsStyles {
  constructor(t, e, i, s = null) {
    this.sharedStyles = s;
    this.styleSheets = e.map(e => {
      let s;
      if (e instanceof t.CSSStyleSheet) s = e;else {
        s = i.get(e);

        if (void 0 === s) {
          s = new t.CSSStyleSheet();
          s.replaceSync(e);
          i.set(e, s);
        }
      }
      return s;
    });
  }

  static supported(t) {
    return "adoptedStyleSheets" in t.ShadowRoot.prototype;
  }

  applyTo(t) {
    if (null !== this.sharedStyles) this.sharedStyles.applyTo(t);
    t.adoptedStyleSheets = [...t.adoptedStyleSheets, ...this.styleSheets];
  }

}

exports.AdoptedStyleSheetsStyles = AdoptedStyleSheetsStyles;

class StyleElementStyles {
  constructor(t, e, i = null) {
    this.p = t;
    this.localStyles = e;
    this.sharedStyles = i;
  }

  applyTo(t) {
    const e = this.localStyles;
    const i = this.p;

    for (let s = e.length - 1; s > -1; --s) {
      const n = i.document.createElement("style");
      n.innerHTML = e[s];
      t.prepend(n);
    }

    if (null !== this.sharedStyles) this.sharedStyles.applyTo(t);
  }

}

exports.StyleElementStyles = StyleElementStyles;
const ai = {
  shadowDOM(t) {
    return ve.beforeCreate(_kernel.IContainer, e => {
      if (null != t.sharedStyles) {
        const i = e.get(oi);
        e.register(_kernel.Registration.instance(hi, i.createStyles(t.sharedStyles, null)));
      }
    });
  }

};
exports.StyleConfiguration = ai;
const {
  enter: ci,
  exit: ui
} = _runtime.ConnectableSwitcher;
const {
  wrap: fi,
  unwrap: di
} = _runtime.ProxyObservable;

class ComputedWatcher {
  constructor(t, e, i, s, n) {
    this.obj = t;
    this.get = i;
    this.cb = s;
    this.useProxy = n;
    this.interceptor = this;
    this.value = void 0;
    this.isBound = false;
    this.running = false;
    this.oL = e;
  }

  handleChange() {
    this.run();
  }

  handleCollectionChange() {
    this.run();
  }

  $bind() {
    if (this.isBound) return;
    this.isBound = true;
    this.compute();
  }

  $unbind() {
    if (!this.isBound) return;
    this.isBound = false;
    this.obs.clearAll();
  }

  run() {
    if (!this.isBound || this.running) return;
    const t = this.obj;
    const e = this.value;
    const i = this.compute();
    if (!Object.is(i, e)) this.cb.call(t, i, e, t);
  }

  compute() {
    this.running = true;
    this.obs.version++;

    try {
      ci(this);
      return this.value = di(this.get.call(void 0, this.useProxy ? fi(this.obj) : this.obj, this));
    } finally {
      this.obs.clear();
      this.running = false;
      ui(this);
    }
  }

}

exports.ComputedWatcher = ComputedWatcher;

class ExpressionWatcher {
  constructor(t, e, i, s, n) {
    this.scope = t;
    this.locator = e;
    this.oL = i;
    this.expression = s;
    this.callback = n;
    this.interceptor = this;
    this.isBound = false;
    this.obj = t.bindingContext;
  }

  handleChange(t) {
    const e = this.expression;
    const i = this.obj;
    const s = this.value;
    const n = 10082 === e.$kind && 1 === this.obs.count;

    if (!n) {
      this.obs.version++;
      t = e.evaluate(0, this.scope, this.locator, this);
      this.obs.clear();
    }

    if (!Object.is(t, s)) {
      this.value = t;
      this.callback.call(i, t, s, i);
    }
  }

  $bind() {
    if (this.isBound) return;
    this.isBound = true;
    this.obs.version++;
    this.value = this.expression.evaluate(0, this.scope, this.locator, this);
    this.obs.clear();
  }

  $unbind() {
    if (!this.isBound) return;
    this.isBound = false;
    this.obs.clearAll();
    this.value = void 0;
  }

}

exports.ExpressionWatcher = ExpressionWatcher;
(0, _runtime.connectable)(ComputedWatcher);
(0, _runtime.connectable)(ExpressionWatcher);

const mi = _kernel.DI.createInterface("ILifecycleHooks");

exports.ILifecycleHooks = mi;

class LifecycleHooksEntry {
  constructor(t, e) {
    this.definition = t;
    this.instance = e;
  }

}

exports.LifecycleHooksEntry = LifecycleHooksEntry;

class LifecycleHooksDefinition {
  constructor(t, e) {
    this.Type = t;
    this.propertyNames = e;
  }

  static create(t, e) {
    const i = new Set();
    let s = e.prototype;

    while (s !== Object.prototype) {
      for (const t of Object.getOwnPropertyNames(s)) if ("constructor" !== t) i.add(t);

      s = Object.getPrototypeOf(s);
    }

    return new LifecycleHooksDefinition(e, i);
  }

  register(t) {
    _kernel.Registration.singleton(mi, this.Type).register(t);
  }

}

exports.LifecycleHooksDefinition = LifecycleHooksDefinition;
const vi = new WeakMap();
const pi = ft("lifecycle-hooks");
const gi = Object.freeze({
  name: pi,

  define(t, e) {
    const i = LifecycleHooksDefinition.create(t, e);
    at(pi, i, e);
    mt(e, pi);
    return i.Type;
  },

  resolve(t) {
    let e = vi.get(t);

    if (void 0 === e) {
      e = new LifecycleHooksLookupImpl();
      const i = t.root;
      const s = i.id === t.id ? t.getAll(mi) : t.has(mi, false) ? [...i.getAll(mi), ...t.getAll(mi)] : i.getAll(mi);
      let n;
      let r;
      let o;
      let l;
      let h;

      for (n of s) {
        r = lt(pi, n.constructor);
        o = new LifecycleHooksEntry(r, n);

        for (l of r.propertyNames) {
          h = e[l];
          if (void 0 === h) e[l] = [o];else h.push(o);
        }
      }
    }

    return e;
  }

});
exports.LifecycleHooks = gi;

class LifecycleHooksLookupImpl {}

function wi() {
  return function t(e) {
    return gi.define({}, e);
  };
}

const bi = _kernel.DI.createInterface("IViewFactory");

exports.IViewFactory = bi;

class ViewFactory {
  constructor(t, e) {
    this.isCaching = false;
    this.cache = null;
    this.cacheSize = -1;
    this.name = e.name;
    this.container = t;
    this.def = e;
  }

  setCacheSize(t, e) {
    if (t) {
      if ("*" === t) t = ViewFactory.maxCacheSize;else if (Ct(t)) t = parseInt(t, 10);
      if (-1 === this.cacheSize || !e) this.cacheSize = t;
    }

    if (this.cacheSize > 0) this.cache = [];else this.cache = null;
    this.isCaching = this.cacheSize > 0;
  }

  canReturnToCache(t) {
    return null != this.cache && this.cache.length < this.cacheSize;
  }

  tryReturnToCache(t) {
    if (this.canReturnToCache(t)) {
      this.cache.push(t);
      return true;
    }

    return false;
  }

  create(t) {
    const e = this.cache;
    let i;

    if (null != e && e.length > 0) {
      i = e.pop();
      return i;
    }

    i = Controller.$view(this, t);
    return i;
  }

}

exports.ViewFactory = ViewFactory;
ViewFactory.maxCacheSize = 65535;
const xi = new WeakSet();

function yi(t) {
  return !xi.has(t);
}

function ki(t) {
  xi.add(t);
  return CustomElementDefinition.create(t);
}

const Ci = dt("views");
const Ai = Object.freeze({
  name: Ci,

  has(t) {
    return kt(t) && (ht(Ci, t) || "$views" in t);
  },

  get(t) {
    if (kt(t) && "$views" in t) {
      const e = t.$views;
      const i = e.filter(yi).map(ki);

      for (const e of i) Ai.add(t, e);
    }

    let e = lt(Ci, t);
    if (void 0 === e) at(Ci, e = [], t);
    return e;
  },

  add(t, e) {
    const i = CustomElementDefinition.create(e);
    let s = lt(Ci, t);
    if (void 0 === s) at(Ci, s = [i], t);else s.push(i);
    return s;
  }

});
exports.Views = Ai;

function Si(t) {
  return function (e) {
    Ai.add(e, t);
  };
}

const Ri = _kernel.DI.createInterface("IViewLocator", t => t.singleton(ViewLocator));

exports.IViewLocator = Ri;

class ViewLocator {
  constructor() {
    this.et = new WeakMap();
    this.it = new Map();
  }

  getViewComponentForObject(t, e) {
    if (t) {
      const i = Ai.has(t.constructor) ? Ai.get(t.constructor) : [];
      const s = kt(e) ? e(t, i) : this.st(i, e);
      return this.nt(t, i, s);
    }

    return null;
  }

  nt(t, e, i) {
    let s = this.et.get(t);
    let n;

    if (void 0 === s) {
      s = {};
      this.et.set(t, s);
    } else n = s[i];

    if (void 0 === n) {
      const r = this.rt(t, e, i);
      n = Ze.define(Ze.getDefinition(r), class extends r {
        constructor() {
          super(t);
        }

      });
      s[i] = n;
    }

    return n;
  }

  rt(t, e, i) {
    let s = this.it.get(t.constructor);
    let n;

    if (void 0 === s) {
      s = {};
      this.it.set(t.constructor, s);
    } else n = s[i];

    if (void 0 === n) {
      n = Ze.define(this.ot(e, i), class {
        constructor(t) {
          this.viewModel = t;
        }

        define(t, e, i) {
          const s = this.viewModel;
          t.scope = _runtime.Scope.fromParent(t.scope, s);
          if (void 0 !== s.define) return s.define(t, e, i);
        }

      });
      const r = n.prototype;
      if ("hydrating" in t) r.hydrating = function t(e) {
        this.viewModel.hydrating(e);
      };
      if ("hydrated" in t) r.hydrated = function t(e) {
        this.viewModel.hydrated(e);
      };
      if ("created" in t) r.created = function t(e) {
        this.viewModel.created(e);
      };
      if ("binding" in t) r.binding = function t(e, i, s) {
        return this.viewModel.binding(e, i, s);
      };
      if ("bound" in t) r.bound = function t(e, i, s) {
        return this.viewModel.bound(e, i, s);
      };
      if ("attaching" in t) r.attaching = function t(e, i, s) {
        return this.viewModel.attaching(e, i, s);
      };
      if ("attached" in t) r.attached = function t(e, i) {
        return this.viewModel.attached(e, i);
      };
      if ("detaching" in t) r.detaching = function t(e, i, s) {
        return this.viewModel.detaching(e, i, s);
      };
      if ("unbinding" in t) r.unbinding = function t(e, i, s) {
        return this.viewModel.unbinding(e, i, s);
      };
      if ("dispose" in t) r.dispose = function t() {
        this.viewModel.dispose();
      };
      s[i] = n;
    }

    return n;
  }

  st(t, e) {
    if (e) return e;
    if (1 === t.length) return t[0].name;
    return "default-view";
  }

  ot(t, e) {
    const i = t.find(t => t.name === e);
    if (void 0 === i) throw new Error(`Could not find view: ${e}`);
    return i;
  }

}

exports.ViewLocator = ViewLocator;

const Ei = _kernel.DI.createInterface("IRendering", t => t.singleton(Rendering));

exports.IRendering = Ei;

class Rendering {
  constructor(t) {
    this.lt = new WeakMap();
    this.ht = new WeakMap();
    this.at = (this.ct = t.root).get(Wt);
    this.ut = new FragmentNodeSequence(this.at, this.at.document.createDocumentFragment());
  }

  get renderers() {
    return null == this.rs ? this.rs = this.ct.getAll(xs, false).reduce((t, e) => {
      t[e.instructionType] = e;
      return t;
    }, gt()) : this.rs;
  }

  compile(t, e, i) {
    if (false !== t.needsCompile) {
      const s = this.lt;
      const n = e.get(bs);
      let r = s.get(t);
      if (null == r) s.set(t, r = n.compile(t, e, i));else e.register(...r.dependencies);
      return r;
    }

    return t;
  }

  getViewFactory(t, e) {
    return new ViewFactory(e, CustomElementDefinition.getOrCreate(t));
  }

  createNodes(t) {
    if (true === t.enhance) return new FragmentNodeSequence(this.at, t.template);
    let e;
    const i = this.ht;
    if (i.has(t)) e = i.get(t);else {
      const s = this.at;
      const n = s.document;
      const r = t.template;
      let o;
      if (null === r) e = null;else if (r instanceof s.Node) {
        if ("TEMPLATE" === r.nodeName) e = n.adoptNode(r.content);else (e = n.adoptNode(n.createDocumentFragment())).appendChild(r.cloneNode(true));
      } else {
        o = n.createElement("template");
        if (Ct(r)) o.innerHTML = r;
        n.adoptNode(e = o.content);
      }
      i.set(t, e);
    }
    return null == e ? this.ut : new FragmentNodeSequence(this.at, e.cloneNode(true));
  }

  render(t, e, i, s) {
    const n = i.instructions;
    const r = this.renderers;
    const o = e.length;
    if (e.length !== n.length) throw new Error(`AUR0757:${o}<>${n.length}`);
    let l = 0;
    let h = 0;
    let a = 0;
    let c;
    let u;
    let f;
    if (o > 0) while (o > l) {
      c = n[l];
      f = e[l];
      h = 0;
      a = c.length;

      while (a > h) {
        u = c[h];
        r[u.type].render(t, f, u);
        ++h;
      }

      ++l;
    }

    if (void 0 !== s && null !== s) {
      c = i.surrogates;

      if ((a = c.length) > 0) {
        h = 0;

        while (a > h) {
          u = c[h];
          r[u.type].render(t, s, u);
          ++h;
        }
      }
    }
  }

}

exports.Rendering = Rendering;
Rendering.inject = [_kernel.IContainer];
var Bi;

(function (t) {
  t[t["none"] = 0] = "none";
  t[t["host"] = 1] = "host";
  t[t["shadowRoot"] = 2] = "shadowRoot";
  t[t["location"] = 3] = "location";
})(Bi || (Bi = {}));

const Ii = {
  optional: true
};
const Ti = new WeakMap();

class Controller {
  constructor(t, e, i, s, n, r) {
    this.container = t;
    this.vmKind = e;
    this.definition = i;
    this.viewFactory = s;
    this.viewModel = n;
    this.host = r;
    this.id = (0, _kernel.nextId)("au$component");
    this.head = null;
    this.tail = null;
    this.next = null;
    this.parent = null;
    this.bindings = null;
    this.children = null;
    this.hasLockedScope = false;
    this.isStrictBinding = false;
    this.scope = null;
    this.isBound = false;
    this.hostController = null;
    this.mountTarget = 0;
    this.shadowRoot = null;
    this.nodes = null;
    this.location = null;
    this.lifecycleHooks = null;
    this.state = 0;
    this.ft = false;
    this.dt = _kernel.emptyArray;
    this.flags = 0;
    this.$initiator = null;
    this.$flags = 0;
    this.$resolve = void 0;
    this.$reject = void 0;
    this.$promise = void 0;
    this.vt = 0;
    this.gt = 0;
    this.wt = 0;
    this.r = t.root.get(Ei);

    switch (e) {
      case 1:
      case 0:
        this.hooks = new HooksDefinition(n);
        break;

      case 2:
        this.hooks = HooksDefinition.none;
        break;
    }
  }

  get isActive() {
    return (this.state & (1 | 2)) > 0 && 0 === (4 & this.state);
  }

  get name() {
    var t;
    if (null === this.parent) switch (this.vmKind) {
      case 1:
        return `[${this.definition.name}]`;

      case 0:
        return this.definition.name;

      case 2:
        return this.viewFactory.name;
    }

    switch (this.vmKind) {
      case 1:
        return `${this.parent.name}>[${this.definition.name}]`;

      case 0:
        return `${this.parent.name}>${this.definition.name}`;

      case 2:
        return this.viewFactory.name === (null === (t = this.parent.definition) || void 0 === t ? void 0 : t.name) ? `${this.parent.name}[view]` : `${this.parent.name}[view:${this.viewFactory.name}]`;
    }
  }

  static getCached(t) {
    return Ti.get(t);
  }

  static getCachedOrThrow(t) {
    const e = Controller.getCached(t);
    if (void 0 === e) throw new Error(`AUR0500:${t}`);
    return e;
  }

  static $el(t, e, i, s, n = void 0) {
    if (Ti.has(e)) return Ti.get(e);
    n = null !== n && void 0 !== n ? n : Ze.getDefinition(e.constructor);
    const r = new Controller(t, 0, n, null, e, i);
    const o = t.get((0, _kernel.optional)(Wi));
    if (n.dependencies.length > 0) t.register(...n.dependencies);
    t.registerResolver(Wi, new _kernel.InstanceProvider("IHydrationContext", new HydrationContext(r, s, o)));
    Ti.set(e, r);
    if (null == s || false !== s.hydrate) r.bt(s, o);
    return r;
  }

  static $attr(t, e, i, s) {
    if (Ti.has(e)) return Ti.get(e);
    s = null !== s && void 0 !== s ? s : Pe.getDefinition(e.constructor);
    const n = new Controller(t, 1, s, null, e, i);
    Ti.set(e, n);
    n.xt();
    return n;
  }

  static $view(t, e = void 0) {
    const i = new Controller(t.container, 2, null, t, null, null);
    i.parent = null !== e && void 0 !== e ? e : null;
    i.yt();
    return i;
  }

  bt(t, e) {
    const i = this.container;
    const s = this.flags;
    const n = this.viewModel;
    let r = this.definition;
    this.scope = _runtime.Scope.create(n, null, true);
    if (r.watches.length > 0) qi(this, i, r, n);
    Pi(this, r, s, n);
    this.dt = Oi(this, r, n);

    if (this.hooks.hasDefine) {
      const t = n.define(this, e, r);
      if (void 0 !== t && t !== r) r = CustomElementDefinition.getOrCreate(t);
    }

    this.lifecycleHooks = gi.resolve(i);
    r.register(i);
    if (null !== r.injectable) i.registerResolver(r.injectable, new _kernel.InstanceProvider("definition.injectable", n));

    if (null == t || false !== t.hydrate) {
      this.kt(t);
      this.Ct();
    }
  }

  kt(t) {
    if (this.hooks.hasHydrating) this.viewModel.hydrating(this);
    const e = this.At = this.r.compile(this.definition, this.container, t);
    const {
      shadowOptions: i,
      isStrictBinding: s,
      hasSlots: n,
      containerless: r
    } = e;
    this.isStrictBinding = s;
    if (null !== (this.hostController = Ze.for(this.host, Ii))) this.host = this.container.root.get(Wt).document.createElement(this.definition.name);
    Zi(this.host, Ze.name, this);
    Zi(this.host, this.definition.key, this);

    if (null !== i || n) {
      if (r) throw new Error("AUR0501");
      Zi(this.shadowRoot = this.host.attachShadow(null !== i && void 0 !== i ? i : Fi), Ze.name, this);
      Zi(this.shadowRoot, this.definition.key, this);
      this.mountTarget = 2;
    } else if (r) {
      Zi(this.location = os(this.host), Ze.name, this);
      Zi(this.location, this.definition.key, this);
      this.mountTarget = 3;
    } else this.mountTarget = 1;

    this.viewModel.$controller = this;
    this.nodes = this.r.createNodes(e);
    if (this.hooks.hasHydrated) this.viewModel.hydrated(this);
  }

  Ct() {
    this.r.render(this, this.nodes.findTargets(), this.At, this.host);
    if (this.hooks.hasCreated) this.viewModel.created(this);
  }

  xt() {
    const t = this.definition;
    const e = this.viewModel;
    if (t.watches.length > 0) qi(this, this.container, t, e);
    Pi(this, t, this.flags, e);
    e.$controller = this;
    this.lifecycleHooks = gi.resolve(this.container);
    if (this.hooks.hasCreated) this.viewModel.created(this);
  }

  yt() {
    this.At = this.r.compile(this.viewFactory.def, this.container, null);
    this.isStrictBinding = this.At.isStrictBinding;
    this.r.render(this, (this.nodes = this.r.createNodes(this.At)).findTargets(), this.At, void 0);
  }

  activate(t, e, i, s) {
    switch (this.state) {
      case 0:
      case 8:
        if (!(null === e || e.isActive)) return;
        this.state = 1;
        break;

      case 2:
        return;

      case 32:
        throw new Error(`AUR0502:${this.name}`);

      default:
        throw new Error(`AUR0503:${this.name} ${ji(this.state)}`);
    }

    this.parent = e;
    i |= 2;

    switch (this.vmKind) {
      case 0:
        this.scope.parentScope = null !== s && void 0 !== s ? s : null;
        break;

      case 1:
        this.scope = null !== s && void 0 !== s ? s : null;
        break;

      case 2:
        if (void 0 === s || null === s) throw new Error("AUR0504");
        if (!this.hasLockedScope) this.scope = s;
        break;
    }

    if (this.isStrictBinding) i |= 1;
    this.$initiator = t;
    this.$flags = i;
    this.St();

    if (this.hooks.hasBinding) {
      const t = this.viewModel.binding(this.$initiator, this.parent, this.$flags);

      if (t instanceof Promise) {
        this.Rt();
        t.then(() => {
          this.bind();
        }).catch(t => {
          this.Et(t);
        });
        return this.$promise;
      }
    }

    this.bind();
    return this.$promise;
  }

  bind() {
    let t = 0;
    let e = this.dt.length;
    let i;
    if (e > 0) while (e > t) {
      this.dt[t].start();
      ++t;
    }

    if (null !== this.bindings) {
      t = 0;
      e = this.bindings.length;

      while (e > t) {
        this.bindings[t].$bind(this.$flags, this.scope);
        ++t;
      }
    }

    if (this.hooks.hasBound) {
      i = this.viewModel.bound(this.$initiator, this.parent, this.$flags);

      if (i instanceof Promise) {
        this.Rt();
        i.then(() => {
          this.isBound = true;
          this.Bt();
        }).catch(t => {
          this.Et(t);
        });
        return;
      }
    }

    this.isBound = true;
    this.Bt();
  }

  It(...t) {
    switch (this.mountTarget) {
      case 1:
        this.host.append(...t);
        break;

      case 2:
        this.shadowRoot.append(...t);
        break;

      case 3:
        {
          let e = 0;

          for (; e < t.length; ++e) this.location.parentNode.insertBefore(t[e], this.location);

          break;
        }
    }
  }

  Bt() {
    if (null !== this.hostController) switch (this.mountTarget) {
      case 1:
      case 2:
        this.hostController.It(this.host);
        break;

      case 3:
        this.hostController.It(this.location.$start, this.location);
        break;
    }

    switch (this.mountTarget) {
      case 1:
        this.nodes.appendTo(this.host, null != this.definition && this.definition.enhance);
        break;

      case 2:
        {
          const t = this.container;
          const e = t.has(li, false) ? t.get(li) : t.get(hi);
          e.applyTo(this.shadowRoot);
          this.nodes.appendTo(this.shadowRoot);
          break;
        }

      case 3:
        this.nodes.insertBefore(this.location);
        break;
    }

    if (this.hooks.hasAttaching) {
      const t = this.viewModel.attaching(this.$initiator, this.parent, this.$flags);

      if (t instanceof Promise) {
        this.Rt();
        this.St();
        t.then(() => {
          this.Tt();
        }).catch(t => {
          this.Et(t);
        });
      }
    }

    if (null !== this.children) {
      let t = 0;

      for (; t < this.children.length; ++t) void this.children[t].activate(this.$initiator, this, this.$flags, this.scope);
    }

    this.Tt();
  }

  deactivate(t, e, i) {
    switch (~16 & this.state) {
      case 2:
        this.state = 4;
        break;

      case 0:
      case 8:
      case 32:
      case 8 | 32:
        return;

      default:
        throw new Error(`AUR0505:${this.name} ${ji(this.state)}`);
    }

    this.$initiator = t;
    this.$flags = i;
    if (t === this) this.Dt();
    let s = 0;
    if (this.dt.length) for (; s < this.dt.length; ++s) this.dt[s].stop();
    if (null !== this.children) for (s = 0; s < this.children.length; ++s) void this.children[s].deactivate(t, this, i);

    if (this.hooks.hasDetaching) {
      const e = this.viewModel.detaching(this.$initiator, this.parent, this.$flags);

      if (e instanceof Promise) {
        this.Rt();
        t.Dt();
        e.then(() => {
          t.Pt();
        }).catch(e => {
          t.Et(e);
        });
      }
    }

    if (null === t.head) t.head = this;else t.tail.next = this;
    t.tail = this;
    if (t !== this) return;
    this.Pt();
    return this.$promise;
  }

  removeNodes() {
    switch (this.vmKind) {
      case 0:
      case 2:
        this.nodes.remove();
        this.nodes.unlink();
    }

    if (null !== this.hostController) switch (this.mountTarget) {
      case 1:
      case 2:
        this.host.remove();
        break;

      case 3:
        this.location.$start.remove();
        this.location.remove();
        break;
    }
  }

  unbind() {
    const t = 4 | this.$flags;
    let e = 0;
    if (null !== this.bindings) for (; e < this.bindings.length; ++e) this.bindings[e].$unbind(t);
    this.parent = null;

    switch (this.vmKind) {
      case 1:
        this.scope = null;
        break;

      case 2:
        if (!this.hasLockedScope) this.scope = null;
        if (16 === (16 & this.state) && !this.viewFactory.tryReturnToCache(this) && this.$initiator === this) this.dispose();
        break;

      case 0:
        this.scope.parentScope = null;
        break;
    }

    if (32 === (32 & t) && this.$initiator === this) this.dispose();
    this.state = 32 & this.state | 8;
    this.$initiator = null;
    this.Ot();
  }

  Rt() {
    if (void 0 === this.$promise) {
      this.$promise = new Promise((t, e) => {
        this.$resolve = t;
        this.$reject = e;
      });
      if (this.$initiator !== this) this.parent.Rt();
    }
  }

  Ot() {
    if (void 0 !== this.$promise) {
      zi = this.$resolve;
      this.$resolve = this.$reject = this.$promise = void 0;
      zi();
      zi = void 0;
    }
  }

  Et(t) {
    if (void 0 !== this.$promise) {
      Gi = this.$reject;
      this.$resolve = this.$reject = this.$promise = void 0;
      Gi(t);
      Gi = void 0;
    }

    if (this.$initiator !== this) this.parent.Et(t);
  }

  St() {
    ++this.vt;
    if (this.$initiator !== this) this.parent.St();
  }

  Tt() {
    if (0 === --this.vt) {
      if (this.hooks.hasAttached) {
        Xi = this.viewModel.attached(this.$initiator, this.$flags);

        if (Xi instanceof Promise) {
          this.Rt();
          Xi.then(() => {
            this.state = 2;
            this.Ot();
            if (this.$initiator !== this) this.parent.Tt();
          }).catch(t => {
            this.Et(t);
          });
          Xi = void 0;
          return;
        }

        Xi = void 0;
      }

      this.state = 2;
      this.Ot();
    }

    if (this.$initiator !== this) this.parent.Tt();
  }

  Dt() {
    ++this.gt;
  }

  Pt() {
    if (0 === --this.gt) {
      this.$t();
      this.removeNodes();
      let t = this.$initiator.head;

      while (null !== t) {
        if (t !== this) {
          if (t.debug) t.logger.trace(`detach()`);
          t.removeNodes();
        }

        if (t.hooks.hasUnbinding) {
          if (t.debug) t.logger.trace("unbinding()");
          Xi = t.viewModel.unbinding(t.$initiator, t.parent, t.$flags);

          if (Xi instanceof Promise) {
            this.Rt();
            this.$t();
            Xi.then(() => {
              this.Lt();
            }).catch(t => {
              this.Et(t);
            });
          }

          Xi = void 0;
        }

        t = t.next;
      }

      this.Lt();
    }
  }

  $t() {
    ++this.wt;
  }

  Lt() {
    if (0 === --this.wt) {
      let t = this.$initiator.head;
      let e = null;

      while (null !== t) {
        if (t !== this) {
          t.isBound = false;
          t.unbind();
        }

        e = t.next;
        t.next = null;
        t = e;
      }

      this.head = this.tail = null;
      this.isBound = false;
      this.unbind();
    }
  }

  addBinding(t) {
    if (null === this.bindings) this.bindings = [t];else this.bindings[this.bindings.length] = t;
  }

  addChild(t) {
    if (null === this.children) this.children = [t];else this.children[this.children.length] = t;
  }

  is(t) {
    switch (this.vmKind) {
      case 1:
        return Pe.getDefinition(this.viewModel.constructor).name === t;

      case 0:
        return Ze.getDefinition(this.viewModel.constructor).name === t;

      case 2:
        return this.viewFactory.name === t;
    }
  }

  lockScope(t) {
    this.scope = t;
    this.hasLockedScope = true;
  }

  setHost(t) {
    if (0 === this.vmKind) {
      Zi(t, Ze.name, this);
      Zi(t, this.definition.key, this);
    }

    this.host = t;
    this.mountTarget = 1;
    return this;
  }

  setShadowRoot(t) {
    if (0 === this.vmKind) {
      Zi(t, Ze.name, this);
      Zi(t, this.definition.key, this);
    }

    this.shadowRoot = t;
    this.mountTarget = 2;
    return this;
  }

  setLocation(t) {
    if (0 === this.vmKind) {
      Zi(t, Ze.name, this);
      Zi(t, this.definition.key, this);
    }

    this.location = t;
    this.mountTarget = 3;
    return this;
  }

  release() {
    this.state |= 16;
  }

  dispose() {
    if (32 === (32 & this.state)) return;
    this.state |= 32;
    if (this.hooks.hasDispose) this.viewModel.dispose();

    if (null !== this.children) {
      this.children.forEach(Hi);
      this.children = null;
    }

    this.hostController = null;
    this.scope = null;
    this.nodes = null;
    this.location = null;
    this.viewFactory = null;

    if (null !== this.viewModel) {
      Ti.delete(this.viewModel);
      this.viewModel = null;
    }

    this.viewModel = null;
    this.host = null;
    this.shadowRoot = null;
    this.container.disposeResolvers();
  }

  accept(t) {
    if (true === t(this)) return true;
    if (this.hooks.hasAccept && true === this.viewModel.accept(t)) return true;

    if (null !== this.children) {
      const {
        children: e
      } = this;

      for (let i = 0, s = e.length; i < s; ++i) if (true === e[i].accept(t)) return true;
    }
  }

}

exports.Controller = Controller;

function Di(t) {
  let e = t.$observers;
  if (void 0 === e) Reflect.defineProperty(t, "$observers", {
    enumerable: false,
    value: e = {}
  });
  return e;
}

function Pi(t, e, i, s) {
  const n = e.bindables;
  const r = Object.getOwnPropertyNames(n);
  const o = r.length;

  if (o > 0) {
    let e;
    let i;
    let l = 0;
    const h = Di(s);

    for (; l < o; ++l) {
      e = r[l];

      if (void 0 === h[e]) {
        i = n[e];
        h[e] = new BindableObserver(s, e, i.callback, i.set, t);
      }
    }
  }
}

function Oi(t, e, i) {
  const s = e.childrenObservers;
  const n = Object.getOwnPropertyNames(s);
  const r = n.length;

  if (r > 0) {
    const e = Di(i);
    const o = [];
    let l;
    let h = 0;
    let a;

    for (; h < r; ++h) {
      l = n[h];

      if (void 0 == e[l]) {
        a = s[l];
        o[o.length] = e[l] = new ChildrenObserver(t, i, l, a.callback, a.query, a.filter, a.map, a.options);
      }
    }

    return o;
  }

  return _kernel.emptyArray;
}

const $i = new Map();

const Li = t => {
  let e = $i.get(t);

  if (null == e) {
    e = new _runtime.AccessScopeExpression(t, 0);
    $i.set(t, e);
  }

  return e;
};

function qi(t, e, i, s) {
  const n = e.get(_runtime.IObserverLocator);
  const r = e.get(_runtime.IExpressionParser);
  const o = i.watches;
  const l = 0 === t.vmKind ? t.scope : _runtime.Scope.create(s, null, true);
  const h = o.length;
  let a;
  let c;
  let u;
  let f = 0;

  for (; h > f; ++f) {
    ({
      expression: a,
      callback: c
    } = o[f]);
    c = kt(c) ? c : Reflect.get(s, c);
    if (!kt(c)) throw new Error(`AUR0506:${String(c)}`);
    if (kt(a)) t.addBinding(new ComputedWatcher(s, n, a, c, true));else {
      u = Ct(a) ? r.parse(a, 8) : Li(a);
      t.addBinding(new ExpressionWatcher(l, e, n, u, c));
    }
  }
}

function Mi(t) {
  return t instanceof Controller && 0 === t.vmKind;
}

function Ui(t) {
  return (0, _kernel.isObject)(t) && Ze.isType(t.constructor);
}

class HooksDefinition {
  constructor(t) {
    this.hasDefine = "define" in t;
    this.hasHydrating = "hydrating" in t;
    this.hasHydrated = "hydrated" in t;
    this.hasCreated = "created" in t;
    this.hasBinding = "binding" in t;
    this.hasBound = "bound" in t;
    this.hasAttaching = "attaching" in t;
    this.hasAttached = "attached" in t;
    this.hasDetaching = "detaching" in t;
    this.hasUnbinding = "unbinding" in t;
    this.hasDispose = "dispose" in t;
    this.hasAccept = "accept" in t;
  }

}

HooksDefinition.none = new HooksDefinition({});
const Fi = {
  mode: "open"
};
var Vi;
exports.ViewModelKind = Vi;

(function (t) {
  t[t["customElement"] = 0] = "customElement";
  t[t["customAttribute"] = 1] = "customAttribute";
  t[t["synthetic"] = 2] = "synthetic";
})(Vi || (exports.ViewModelKind = Vi = {}));

var _i;

(function (t) {
  t[t["none"] = 0] = "none";
  t[t["activating"] = 1] = "activating";
  t[t["activated"] = 2] = "activated";
  t[t["deactivating"] = 4] = "deactivating";
  t[t["deactivated"] = 8] = "deactivated";
  t[t["released"] = 16] = "released";
  t[t["disposed"] = 32] = "disposed";
})(_i || (_i = {}));

function ji(t) {
  const e = [];
  if (1 === (1 & t)) e.push("activating");
  if (2 === (2 & t)) e.push("activated");
  if (4 === (4 & t)) e.push("deactivating");
  if (8 === (8 & t)) e.push("deactivated");
  if (16 === (16 & t)) e.push("released");
  if (32 === (32 & t)) e.push("disposed");
  return 0 === e.length ? "none" : e.join("|");
}

const Ni = _kernel.DI.createInterface("IController");

exports.IController = Ni;

const Wi = _kernel.DI.createInterface("IHydrationContext");

exports.IHydrationContext = Wi;

class HydrationContext {
  constructor(t, e, i) {
    this.instruction = e;
    this.parent = i;
    this.controller = t;
  }

}

function Hi(t) {
  t.dispose();
}

let zi;
let Gi;
let Xi;

const Ki = _kernel.DI.createInterface("IAppRoot");

exports.IAppRoot = Ki;

const Yi = _kernel.DI.createInterface("IWorkTracker", t => t.singleton(WorkTracker));

exports.IWorkTracker = Yi;

class WorkTracker {
  constructor(t) {
    this.qt = 0;
    this.Mt = null;
    this.Ot = null;
    this.Ut = t.scopeTo("WorkTracker");
  }

  start() {
    this.Ut.trace(`start(stack:${this.qt})`);
    ++this.qt;
  }

  finish() {
    this.Ut.trace(`finish(stack:${this.qt})`);

    if (0 === --this.qt) {
      const t = this.Ot;

      if (null !== t) {
        this.Ot = this.Mt = null;
        t();
      }
    }
  }

  wait() {
    this.Ut.trace(`wait(stack:${this.qt})`);

    if (null === this.Mt) {
      if (0 === this.qt) return Promise.resolve();
      this.Mt = new Promise(t => {
        this.Ot = t;
      });
    }

    return this.Mt;
  }

}

WorkTracker.inject = [_kernel.ILogger];

class AppRoot {
  constructor(t, e, i, s) {
    this.config = t;
    this.platform = e;
    this.container = i;
    this.controller = void 0;
    this.Ft = void 0;
    this.host = t.host;
    this.work = i.get(Yi);
    s.prepare(this);
    i.registerResolver(e.HTMLElement, i.registerResolver(e.Element, i.registerResolver(Ji, new _kernel.InstanceProvider("ElementResolver", t.host))));
    this.Ft = (0, _kernel.onResolve)(this.Vt("beforeCreate"), () => {
      const e = t.component;
      const s = i.createChild();
      let n;
      if (Ze.isType(e)) n = this.container.get(e);else n = t.component;
      const r = {
        hydrate: false,
        projections: null
      };
      const o = this.controller = Controller.$el(s, n, this.host, r);
      o.bt(r, null);
      return (0, _kernel.onResolve)(this.Vt("hydrating"), () => {
        o.kt(null);
        return (0, _kernel.onResolve)(this.Vt("hydrated"), () => {
          o.Ct();
          this.Ft = void 0;
        });
      });
    });
  }

  activate() {
    return (0, _kernel.onResolve)(this.Ft, () => (0, _kernel.onResolve)(this.Vt("beforeActivate"), () => (0, _kernel.onResolve)(this.controller.activate(this.controller, null, 2, void 0), () => this.Vt("afterActivate"))));
  }

  deactivate() {
    return (0, _kernel.onResolve)(this.Vt("beforeDeactivate"), () => (0, _kernel.onResolve)(this.controller.deactivate(this.controller, null, 0), () => this.Vt("afterDeactivate")));
  }

  Vt(t) {
    return (0, _kernel.resolveAll)(...this.container.getAll(me).reduce((e, i) => {
      if (i.slot === t) e.push(i.run());
      return e;
    }, []));
  }

  dispose() {
    var t;
    null === (t = this.controller) || void 0 === t ? void 0 : t.dispose();
  }

}

exports.AppRoot = AppRoot;

class Refs {}

function Qi(t, e) {
  var i, s;
  return null !== (s = null === (i = t.$au) || void 0 === i ? void 0 : i[e]) && void 0 !== s ? s : null;
}

function Zi(t, e, i) {
  var s;
  var n;
  (null !== (s = (n = t).$au) && void 0 !== s ? s : n.$au = new Refs())[e] = i;
}

const Ji = _kernel.DI.createInterface("INode");

exports.INode = Ji;

const ts = _kernel.DI.createInterface("IEventTarget", t => t.cachedCallback(t => {
  if (t.has(Ki, true)) return t.get(Ki).host;
  return t.get(Wt).document;
}));

exports.IEventTarget = ts;

const es = _kernel.DI.createInterface("IRenderLocation");

exports.IRenderLocation = es;
var is;
exports.NodeType = is;

(function (t) {
  t[t["Element"] = 1] = "Element";
  t[t["Attr"] = 2] = "Attr";
  t[t["Text"] = 3] = "Text";
  t[t["CDATASection"] = 4] = "CDATASection";
  t[t["EntityReference"] = 5] = "EntityReference";
  t[t["Entity"] = 6] = "Entity";
  t[t["ProcessingInstruction"] = 7] = "ProcessingInstruction";
  t[t["Comment"] = 8] = "Comment";
  t[t["Document"] = 9] = "Document";
  t[t["DocumentType"] = 10] = "DocumentType";
  t[t["DocumentFragment"] = 11] = "DocumentFragment";
  t[t["Notation"] = 12] = "Notation";
})(is || (exports.NodeType = is = {}));

const ss = new WeakMap();

function ns(t) {
  if (ss.has(t)) return ss.get(t);
  let e = 0;
  let i = t.nextSibling;

  while (null !== i) {
    if (8 === i.nodeType) switch (i.textContent) {
      case "au-start":
        ++e;
        break;

      case "au-end":
        if (0 === e--) return i;
    }
    i = i.nextSibling;
  }

  if (null === t.parentNode && 11 === t.nodeType) {
    const e = Ze.for(t);
    if (void 0 === e) return null;
    if (2 === e.mountTarget) return ns(e.host);
  }

  return t.parentNode;
}

function rs(t, e) {
  if (void 0 !== t.platform && !(t instanceof t.platform.Node)) {
    const i = t.childNodes;

    for (let t = 0, s = i.length; t < s; ++t) ss.set(i[t], e);
  } else ss.set(t, e);
}

function os(t) {
  if (ls(t)) return t;
  const e = t.ownerDocument.createComment("au-end");
  const i = t.ownerDocument.createComment("au-start");

  if (null !== t.parentNode) {
    t.parentNode.replaceChild(e, t);
    e.parentNode.insertBefore(i, e);
  }

  e.$start = i;
  return e;
}

function ls(t) {
  return "au-end" === t.textContent;
}

class FragmentNodeSequence {
  constructor(t, e) {
    this.platform = t;
    this.fragment = e;
    this.isMounted = false;
    this.isLinked = false;
    this.next = void 0;
    this.refNode = void 0;
    const i = e.querySelectorAll(".au");
    let s = 0;
    let n = i.length;
    let r;
    let o = this.targets = Array(n);

    while (n > s) {
      r = i[s];
      if ("AU-M" === r.nodeName) o[s] = os(r);else o[s] = r;
      ++s;
    }

    const l = e.childNodes;
    const h = this.childNodes = Array(n = l.length);
    s = 0;

    while (n > s) {
      h[s] = l[s];
      ++s;
    }

    this.firstChild = e.firstChild;
    this.lastChild = e.lastChild;
  }

  findTargets() {
    return this.targets;
  }

  insertBefore(t) {
    if (this.isLinked && !!this.refNode) this.addToLinked();else {
      const e = t.parentNode;

      if (this.isMounted) {
        let i = this.firstChild;
        let s;
        const n = this.lastChild;

        while (null != i) {
          s = i.nextSibling;
          e.insertBefore(i, t);
          if (i === n) break;
          i = s;
        }
      } else {
        this.isMounted = true;
        t.parentNode.insertBefore(this.fragment, t);
      }
    }
  }

  appendTo(t, e = false) {
    if (this.isMounted) {
      let e = this.firstChild;
      let i;
      const s = this.lastChild;

      while (null != e) {
        i = e.nextSibling;
        t.appendChild(e);
        if (e === s) break;
        e = i;
      }
    } else {
      this.isMounted = true;
      if (!e) t.appendChild(this.fragment);
    }
  }

  remove() {
    if (this.isMounted) {
      this.isMounted = false;
      const t = this.fragment;
      const e = this.lastChild;
      let i;
      let s = this.firstChild;

      while (null !== s) {
        i = s.nextSibling;
        t.appendChild(s);
        if (s === e) break;
        s = i;
      }
    }
  }

  addToLinked() {
    const t = this.refNode;
    const e = t.parentNode;

    if (this.isMounted) {
      let i = this.firstChild;
      let s;
      const n = this.lastChild;

      while (null != i) {
        s = i.nextSibling;
        e.insertBefore(i, t);
        if (i === n) break;
        i = s;
      }
    } else {
      this.isMounted = true;
      e.insertBefore(this.fragment, t);
    }
  }

  unlink() {
    this.isLinked = false;
    this.next = void 0;
    this.refNode = void 0;
  }

  link(t) {
    this.isLinked = true;
    if (ls(t)) this.refNode = t;else {
      this.next = t;
      this.obtainRefNode();
    }
  }

  obtainRefNode() {
    if (void 0 !== this.next) this.refNode = this.next.firstChild;else this.refNode = void 0;
  }

}

exports.FragmentNodeSequence = FragmentNodeSequence;

const hs = _kernel.DI.createInterface("IWindow", t => t.callback(t => t.get(Wt).window));

exports.IWindow = hs;

const as = _kernel.DI.createInterface("ILocation", t => t.callback(t => t.get(hs).location));

exports.ILocation = as;

const cs = _kernel.DI.createInterface("IHistory", t => t.callback(t => t.get(hs).history));

exports.IHistory = cs;
const us = {
  [_runtime.DelegationStrategy.capturing]: {
    capture: true
  },
  [_runtime.DelegationStrategy.bubbling]: {
    capture: false
  }
};

class Listener {
  constructor(t, e, i, s, n, r, o, l) {
    this.platform = t;
    this.targetEvent = e;
    this.delegationStrategy = i;
    this.sourceExpression = s;
    this.target = n;
    this.preventDefault = r;
    this.eventDelegator = o;
    this.locator = l;
    this.interceptor = this;
    this.isBound = false;
    this.handler = null;
  }

  callSource(t) {
    const e = this.$scope.overrideContext;
    e.$event = t;
    const i = this.sourceExpression.evaluate(8, this.$scope, this.locator, null);
    Reflect.deleteProperty(e, "$event");
    if (true !== i && this.preventDefault) t.preventDefault();
    return i;
  }

  handleEvent(t) {
    this.interceptor.callSource(t);
  }

  $bind(t, e) {
    if (this.isBound) {
      if (this.$scope === e) return;
      this.interceptor.$unbind(2 | t);
    }

    this.$scope = e;
    const i = this.sourceExpression;
    if (i.hasBind) i.bind(t, e, this.interceptor);
    if (this.delegationStrategy === _runtime.DelegationStrategy.none) this.target.addEventListener(this.targetEvent, this);else this.handler = this.eventDelegator.addEventListener(this.locator.get(ts), this.target, this.targetEvent, this, us[this.delegationStrategy]);
    this.isBound = true;
  }

  $unbind(t) {
    if (!this.isBound) return;
    const e = this.sourceExpression;
    if (e.hasUnbind) e.unbind(t, this.$scope, this.interceptor);
    this.$scope = null;
    if (this.delegationStrategy === _runtime.DelegationStrategy.none) this.target.removeEventListener(this.targetEvent, this);else {
      this.handler.dispose();
      this.handler = null;
    }
    this.isBound = false;
  }

  observe(t, e) {
    return;
  }

  handleChange(t, e, i) {
    return;
  }

}

exports.Listener = Listener;
const fs = {
  capture: false
};

class ListenerTracker {
  constructor(t, e, i = fs) {
    this._t = t;
    this.jt = e;
    this.Nt = i;
    this.Wt = 0;
    this.Ht = new Map();
    this.zt = new Map();
  }

  Gt() {
    if (1 === ++this.Wt) this._t.addEventListener(this.jt, this, this.Nt);
  }

  Xt() {
    if (0 === --this.Wt) this._t.removeEventListener(this.jt, this, this.Nt);
  }

  dispose() {
    if (this.Wt > 0) {
      this.Wt = 0;

      this._t.removeEventListener(this.jt, this, this.Nt);
    }

    this.Ht.clear();
    this.zt.clear();
  }

  Kt(t) {
    const e = true === this.Nt.capture ? this.Ht : this.zt;
    let i = e.get(t);
    if (void 0 === i) e.set(t, i = gt());
    return i;
  }

  handleEvent(t) {
    const e = true === this.Nt.capture ? this.Ht : this.zt;
    const i = t.composedPath();
    if (true === this.Nt.capture) i.reverse();

    for (const s of i) {
      const i = e.get(s);
      if (void 0 === i) continue;
      const n = i[this.jt];
      if (void 0 === n) continue;
      if (kt(n)) n(t);else n.handleEvent(t);
      if (true === t.cancelBubble) return;
    }
  }

}

class DelegateSubscription {
  constructor(t, e, i, s) {
    this.Yt = t;
    this.Qt = e;
    this.jt = i;
    t.Gt();
    e[i] = s;
  }

  dispose() {
    this.Yt.Xt();
    this.Qt[this.jt] = void 0;
  }

}

class EventSubscriber {
  constructor(t) {
    this.config = t;
    this.target = null;
    this.handler = null;
  }

  subscribe(t, e) {
    this.target = t;
    this.handler = e;
    let i;

    for (i of this.config.events) t.addEventListener(i, e);
  }

  dispose() {
    const {
      target: t,
      handler: e
    } = this;
    let i;
    if (null !== t && null !== e) for (i of this.config.events) t.removeEventListener(i, e);
    this.target = this.handler = null;
  }

}

exports.EventSubscriber = EventSubscriber;

const ds = _kernel.DI.createInterface("IEventDelegator", t => t.singleton(EventDelegator));

exports.IEventDelegator = ds;

class EventDelegator {
  constructor() {
    this.Zt = gt();
  }

  addEventListener(t, e, i, s, n) {
    var r;
    var o;
    const l = null !== (r = (o = this.Zt)[i]) && void 0 !== r ? r : o[i] = new Map();
    let h = l.get(t);
    if (void 0 === h) l.set(t, h = new ListenerTracker(t, i, n));
    return new DelegateSubscription(h, h.Kt(e), i, s);
  }

  dispose() {
    for (const t in this.Zt) {
      const e = this.Zt[t];

      for (const t of e.values()) t.dispose();

      e.clear();
    }
  }

}

exports.EventDelegator = EventDelegator;

const ms = _kernel.DI.createInterface("IProjections");

exports.IProjections = ms;

const vs = _kernel.DI.createInterface("IAuSlotsInfo");

exports.IAuSlotsInfo = vs;

class AuSlotsInfo {
  constructor(t) {
    this.projectedSlots = t;
  }

}

exports.AuSlotsInfo = AuSlotsInfo;
var ps;
exports.InstructionType = ps;

(function (t) {
  t["hydrateElement"] = "ra";
  t["hydrateAttribute"] = "rb";
  t["hydrateTemplateController"] = "rc";
  t["hydrateLetElement"] = "rd";
  t["setProperty"] = "re";
  t["interpolation"] = "rf";
  t["propertyBinding"] = "rg";
  t["callBinding"] = "rh";
  t["letBinding"] = "ri";
  t["refBinding"] = "rj";
  t["iteratorBinding"] = "rk";
  t["textBinding"] = "ha";
  t["listenerBinding"] = "hb";
  t["attributeBinding"] = "hc";
  t["stylePropertyBinding"] = "hd";
  t["setAttribute"] = "he";
  t["setClassAttribute"] = "hf";
  t["setStyleAttribute"] = "hg";
  t["spreadBinding"] = "hs";
  t["spreadElementProp"] = "hp";
})(ps || (exports.InstructionType = ps = {}));

const gs = _kernel.DI.createInterface("Instruction");

exports.IInstruction = gs;

function ws(t) {
  const e = t.type;
  return Ct(e) && 2 === e.length;
}

class InterpolationInstruction {
  constructor(t, e) {
    this.from = t;
    this.to = e;
  }

  get type() {
    return "rf";
  }

}

exports.InterpolationInstruction = InterpolationInstruction;

class PropertyBindingInstruction {
  constructor(t, e, i) {
    this.from = t;
    this.to = e;
    this.mode = i;
  }

  get type() {
    return "rg";
  }

}

exports.PropertyBindingInstruction = PropertyBindingInstruction;

class IteratorBindingInstruction {
  constructor(t, e) {
    this.from = t;
    this.to = e;
  }

  get type() {
    return "rk";
  }

}

exports.IteratorBindingInstruction = IteratorBindingInstruction;

class CallBindingInstruction {
  constructor(t, e) {
    this.from = t;
    this.to = e;
  }

  get type() {
    return "rh";
  }

}

exports.CallBindingInstruction = CallBindingInstruction;

class RefBindingInstruction {
  constructor(t, e) {
    this.from = t;
    this.to = e;
  }

  get type() {
    return "rj";
  }

}

exports.RefBindingInstruction = RefBindingInstruction;

class SetPropertyInstruction {
  constructor(t, e) {
    this.value = t;
    this.to = e;
  }

  get type() {
    return "re";
  }

}

exports.SetPropertyInstruction = SetPropertyInstruction;

class HydrateElementInstruction {
  constructor(t, e, i, s, n, r) {
    this.res = t;
    this.alias = e;
    this.props = i;
    this.projections = s;
    this.containerless = n;
    this.captures = r;
    this.auSlot = null;
  }

  get type() {
    return "ra";
  }

}

exports.HydrateElementInstruction = HydrateElementInstruction;

class HydrateAttributeInstruction {
  constructor(t, e, i) {
    this.res = t;
    this.alias = e;
    this.props = i;
  }

  get type() {
    return "rb";
  }

}

exports.HydrateAttributeInstruction = HydrateAttributeInstruction;

class HydrateTemplateController {
  constructor(t, e, i, s) {
    this.def = t;
    this.res = e;
    this.alias = i;
    this.props = s;
  }

  get type() {
    return "rc";
  }

}

exports.HydrateTemplateController = HydrateTemplateController;

class HydrateLetElementInstruction {
  constructor(t, e) {
    this.instructions = t;
    this.toBindingContext = e;
  }

  get type() {
    return "rd";
  }

}

exports.HydrateLetElementInstruction = HydrateLetElementInstruction;

class LetBindingInstruction {
  constructor(t, e) {
    this.from = t;
    this.to = e;
  }

  get type() {
    return "ri";
  }

}

exports.LetBindingInstruction = LetBindingInstruction;

class TextBindingInstruction {
  constructor(t, e) {
    this.from = t;
    this.strict = e;
  }

  get type() {
    return "ha";
  }

}

exports.TextBindingInstruction = TextBindingInstruction;

class ListenerBindingInstruction {
  constructor(t, e, i, s) {
    this.from = t;
    this.to = e;
    this.preventDefault = i;
    this.strategy = s;
  }

  get type() {
    return "hb";
  }

}

exports.ListenerBindingInstruction = ListenerBindingInstruction;

class StylePropertyBindingInstruction {
  constructor(t, e) {
    this.from = t;
    this.to = e;
  }

  get type() {
    return "hd";
  }

}

exports.StylePropertyBindingInstruction = StylePropertyBindingInstruction;

class SetAttributeInstruction {
  constructor(t, e) {
    this.value = t;
    this.to = e;
  }

  get type() {
    return "he";
  }

}

exports.SetAttributeInstruction = SetAttributeInstruction;

class SetClassAttributeInstruction {
  constructor(t) {
    this.value = t;
    this.type = "hf";
  }

}

exports.SetClassAttributeInstruction = SetClassAttributeInstruction;

class SetStyleAttributeInstruction {
  constructor(t) {
    this.value = t;
    this.type = "hg";
  }

}

exports.SetStyleAttributeInstruction = SetStyleAttributeInstruction;

class AttributeBindingInstruction {
  constructor(t, e, i) {
    this.attr = t;
    this.from = e;
    this.to = i;
  }

  get type() {
    return "hc";
  }

}

exports.AttributeBindingInstruction = AttributeBindingInstruction;

class SpreadBindingInstruction {
  get type() {
    return "hs";
  }

}

class SpreadElementPropBindingInstruction {
  constructor(t) {
    this.instructions = t;
  }

  get type() {
    return "hp";
  }

}

const bs = _kernel.DI.createInterface("ITemplateCompiler");

exports.ITemplateCompiler = bs;

const xs = _kernel.DI.createInterface("IRenderer");

exports.IRenderer = xs;

function ys(t) {
  return function i(s) {
    const n = function (...e) {
      const i = new s(...e);
      i.instructionType = t;
      return i;
    };

    n.register = function t(e) {
      _kernel.Registration.singleton(xs, n).register(e);
    };

    const r = _kernel.Metadata.getOwnKeys(s);

    for (const t of r) at(t, lt(t, s), n);

    const o = Object.getOwnPropertyDescriptors(s);
    Object.keys(o).filter(t => "prototype" !== t).forEach(t => {
      Reflect.defineProperty(n, t, o[t]);
    });
    return n;
  };
}

function ks(t, e, i) {
  if (Ct(e)) return t.parse(e, i);
  return e;
}

function Cs(t) {
  if (null != t.viewModel) return t.viewModel;
  return t;
}

function As(t, e) {
  if ("element" === e) return t;

  switch (e) {
    case "controller":
      return Ze.for(t);

    case "view":
      throw new Error("AUR0750");

    case "view-model":
      return Ze.for(t).viewModel;

    default:
      {
        const i = Pe.for(t, e);
        if (void 0 !== i) return i.viewModel;
        const s = Ze.for(t, {
          name: e
        });
        if (void 0 === s) throw new Error(`AUR0751:${e}`);
        return s.viewModel;
      }
  }
}

let Ss = class SetPropertyRenderer {
  render(t, e, i) {
    const s = Cs(e);
    if (void 0 !== s.$observers && void 0 !== s.$observers[i.to]) s.$observers[i.to].setValue(i.value, 2);else s[i.to] = i.value;
  }

};
Ss = rt([ys("re")], Ss);
let Rs = class CustomElementRenderer {
  constructor(t, e) {
    this.r = t;
    this.p = e;
  }

  static get inject() {
    return [Ei, Wt];
  }

  render(t, e, i) {
    let s;
    let n;
    let r;
    let o;
    const l = i.res;
    const h = i.projections;
    const a = t.container;
    const c = Zs(this.p, t, e, i, e, null == h ? void 0 : new AuSlotsInfo(Object.keys(h)));

    switch (typeof l) {
      case "string":
        s = a.find(Ze, l);
        if (null == s) throw new Error(`AUR0752:${l}@${t["name"]}`);
        break;

      default:
        s = l;
    }

    n = s.Type;
    r = c.invoke(n);
    c.registerResolver(n, new _kernel.InstanceProvider(s.key, r));
    o = Controller.$el(c, r, e, i, s);
    Zi(e, s.key, o);
    const u = this.r.renderers;
    const f = i.props;
    const d = f.length;
    let m = 0;
    let v;

    while (d > m) {
      v = f[m];
      u[v.type].render(t, o, v);
      ++m;
    }

    t.addChild(o);
  }

};
Rs = rt([ys("ra")], Rs);
let Es = class CustomAttributeRenderer {
  constructor(t, e) {
    this.r = t;
    this.p = e;
  }

  static get inject() {
    return [Ei, Wt];
  }

  render(t, e, i) {
    let s = t.container;
    let n;

    switch (typeof i.res) {
      case "string":
        n = s.find(Pe, i.res);
        if (null == n) throw new Error(`AUR0753:${i.res}@${t["name"]}`);
        break;

      default:
        n = i.res;
    }

    const r = Js(this.p, n, t, e, i, void 0, void 0);
    const o = Controller.$attr(t.container, r, e, n);
    Zi(e, n.key, o);
    const l = this.r.renderers;
    const h = i.props;
    const a = h.length;
    let c = 0;
    let u;

    while (a > c) {
      u = h[c];
      l[u.type].render(t, o, u);
      ++c;
    }

    t.addChild(o);
  }

};
Es = rt([ys("rb")], Es);
let Bs = class TemplateControllerRenderer {
  constructor(t, e) {
    this.r = t;
    this.p = e;
  }

  static get inject() {
    return [Ei, Wt];
  }

  render(t, e, i) {
    var s;
    let n = t.container;
    let r;

    switch (typeof i.res) {
      case "string":
        r = n.find(Pe, i.res);
        if (null == r) throw new Error(`AUR0754:${i.res}@${t["name"]}`);
        break;

      default:
        r = i.res;
    }

    const o = this.r.getViewFactory(i.def, n);
    const l = os(e);
    const h = Js(this.p, r, t, e, i, o, l);
    const a = Controller.$attr(t.container, h, e, r);
    Zi(l, r.key, a);
    null === (s = h.link) || void 0 === s ? void 0 : s.call(h, t, a, e, i);
    const c = this.r.renderers;
    const u = i.props;
    const f = u.length;
    let d = 0;
    let m;

    while (f > d) {
      m = u[d];
      c[m.type].render(t, a, m);
      ++d;
    }

    t.addChild(a);
  }

};
Bs = rt([ys("rc")], Bs);
let Is = class LetElementRenderer {
  constructor(t, e) {
    this.ep = t;
    this.oL = e;
  }

  render(t, e, i) {
    e.remove();
    const s = i.instructions;
    const n = i.toBindingContext;
    const r = t.container;
    const o = s.length;
    let l;
    let h;
    let a;
    let c = 0;

    while (o > c) {
      l = s[c];
      h = ks(this.ep, l.from, 8);
      a = new LetBinding(h, l.to, this.oL, r, n);
      t.addBinding(38962 === h.$kind ? Ms(a, h, r) : a);
      ++c;
    }
  }

};
Is.inject = [_runtime.IExpressionParser, _runtime.IObserverLocator];
Is = rt([ys("rd")], Is);
let Ts = class CallBindingRenderer {
  constructor(t, e) {
    this.ep = t;
    this.oL = e;
  }

  render(t, e, i) {
    const s = ks(this.ep, i.from, 8 | 4);
    const n = new CallBinding(s, Cs(e), i.to, this.oL, t.container);
    t.addBinding(38962 === s.$kind ? Ms(n, s, t.container) : n);
  }

};
Ts.inject = [_runtime.IExpressionParser, _runtime.IObserverLocator];
Ts = rt([ys("rh")], Ts);
let Ds = class RefBindingRenderer {
  constructor(t) {
    this.ep = t;
  }

  render(t, e, i) {
    const s = ks(this.ep, i.from, 8);
    const n = new RefBinding(s, As(e, i.to), t.container);
    t.addBinding(38962 === s.$kind ? Ms(n, s, t.container) : n);
  }

};
Ds.inject = [_runtime.IExpressionParser];
Ds = rt([ys("rj")], Ds);
let Ps = class InterpolationBindingRenderer {
  constructor(t, e, i) {
    this.ep = t;
    this.oL = e;
    this.p = i;
  }

  render(t, e, i) {
    const s = t.container;
    const n = ks(this.ep, i.from, 1);
    const r = new InterpolationBinding(this.oL, n, Cs(e), i.to, _runtime.BindingMode.toView, s, this.p.domWriteQueue);
    const o = r.partBindings;
    const l = o.length;
    let h = 0;
    let a;

    for (; l > h; ++h) {
      a = o[h];
      if (38962 === a.sourceExpression.$kind) o[h] = Ms(a, a.sourceExpression, s);
    }

    t.addBinding(r);
  }

};
Ps.inject = [_runtime.IExpressionParser, _runtime.IObserverLocator, Wt];
Ps = rt([ys("rf")], Ps);
let Os = class PropertyBindingRenderer {
  constructor(t, e, i) {
    this.ep = t;
    this.oL = e;
    this.p = i;
  }

  render(t, e, i) {
    const s = ks(this.ep, i.from, 8);
    const n = new PropertyBinding(s, Cs(e), i.to, i.mode, this.oL, t.container, this.p.domWriteQueue);
    t.addBinding(38962 === s.$kind ? Ms(n, s, t.container) : n);
  }

};
Os.inject = [_runtime.IExpressionParser, _runtime.IObserverLocator, Wt];
Os = rt([ys("rg")], Os);
let $s = class IteratorBindingRenderer {
  constructor(t, e, i) {
    this.ep = t;
    this.oL = e;
    this.p = i;
  }

  render(t, e, i) {
    const s = ks(this.ep, i.from, 2);
    const n = new PropertyBinding(s, Cs(e), i.to, _runtime.BindingMode.toView, this.oL, t.container, this.p.domWriteQueue);
    t.addBinding(38962 === s.iterable.$kind ? Ms(n, s.iterable, t.container) : n);
  }

};
$s.inject = [_runtime.IExpressionParser, _runtime.IObserverLocator, Wt];
$s = rt([ys("rk")], $s);
let Ls = 0;
const qs = [];

function Ms(t, e, i) {
  while (e instanceof _runtime.BindingBehaviorExpression) {
    qs[Ls++] = e;
    e = e.expression;
  }

  while (Ls > 0) {
    const e = qs[--Ls];
    const s = i.get(e.behaviorKey);
    if (s instanceof _runtime.BindingBehaviorFactory) t = s.construct(t, e);
  }

  qs.length = 0;
  return t;
}

let Us = class TextBindingRenderer {
  constructor(t, e, i) {
    this.ep = t;
    this.oL = e;
    this.p = i;
  }

  render(t, e, i) {
    const s = t.container;
    const n = e.nextSibling;
    const r = e.parentNode;
    const o = this.p.document;
    const l = ks(this.ep, i.from, 1);
    const h = l.parts;
    const a = l.expressions;
    const c = a.length;
    let u = 0;
    let f = h[0];
    let d;
    let m;
    if ("" !== f) r.insertBefore(o.createTextNode(f), n);

    for (; c > u; ++u) {
      m = a[u];
      d = new ContentBinding(m, r.insertBefore(o.createTextNode(""), n), s, this.oL, this.p, i.strict);
      t.addBinding(38962 === m.$kind ? Ms(d, m, s) : d);
      f = h[u + 1];
      if ("" !== f) r.insertBefore(o.createTextNode(f), n);
    }

    if ("AU-M" === e.nodeName) e.remove();
  }

};
Us.inject = [_runtime.IExpressionParser, _runtime.IObserverLocator, Wt];
Us = rt([ys("ha")], Us);
let Fs = class ListenerBindingRenderer {
  constructor(t, e, i) {
    this.ep = t;
    this.Jt = e;
    this.p = i;
  }

  render(t, e, i) {
    const s = ks(this.ep, i.from, 4);
    const n = new Listener(this.p, i.to, i.strategy, s, e, i.preventDefault, this.Jt, t.container);
    t.addBinding(38962 === s.$kind ? Ms(n, s, t.container) : n);
  }

};
Fs.inject = [_runtime.IExpressionParser, ds, Wt];
Fs = rt([ys("hb")], Fs);
let Vs = class SetAttributeRenderer {
  render(t, e, i) {
    e.setAttribute(i.to, i.value);
  }

};
Vs = rt([ys("he")], Vs);

let _s = class SetClassAttributeRenderer {
  render(t, e, i) {
    zs(e.classList, i.value);
  }

};

_s = rt([ys("hf")], _s);
let js = class SetStyleAttributeRenderer {
  render(t, e, i) {
    e.style.cssText += i.value;
  }

};
js = rt([ys("hg")], js);
let Ns = class StylePropertyBindingRenderer {
  constructor(t, e, i) {
    this.ep = t;
    this.oL = e;
    this.p = i;
  }

  render(t, e, i) {
    const s = ks(this.ep, i.from, 8);
    const n = new PropertyBinding(s, e.style, i.to, _runtime.BindingMode.toView, this.oL, t.container, this.p.domWriteQueue);
    t.addBinding(38962 === s.$kind ? Ms(n, s, t.container) : n);
  }

};
Ns.inject = [_runtime.IExpressionParser, _runtime.IObserverLocator, Wt];
Ns = rt([ys("hd")], Ns);
let Ws = class AttributeBindingRenderer {
  constructor(t, e) {
    this.ep = t;
    this.oL = e;
  }

  render(t, e, i) {
    const s = ks(this.ep, i.from, 8);
    const n = new AttributeBinding(s, e, i.attr, i.to, _runtime.BindingMode.toView, this.oL, t.container);
    t.addBinding(38962 === s.$kind ? Ms(n, s, t.container) : n);
  }

};
Ws.inject = [_runtime.IExpressionParser, _runtime.IObserverLocator];
Ws = rt([ys("hc")], Ws);
let Hs = class SpreadRenderer {
  constructor(t, e) {
    this.te = t;
    this.r = e;
  }

  static get inject() {
    return [bs, Ei];
  }

  render(t, e, i) {
    const s = t.container;
    const n = s.get(Wi);
    const r = this.r.renderers;

    const o = t => {
      let e = t;
      let i = n;

      while (null != i && e > 0) {
        i = i.parent;
        --e;
      }

      if (null == i) throw new Error("No scope context for spread binding.");
      return i;
    };

    const l = i => {
      var s, n;
      const a = o(i);
      const c = Gs(a);
      const u = this.te.compileSpread(a.controller.definition, null !== (n = null === (s = a.instruction) || void 0 === s ? void 0 : s.captures) && void 0 !== n ? n : _kernel.emptyArray, a.controller.container, e);
      let f;

      for (f of u) switch (f.type) {
        case "hs":
          l(i + 1);
          break;

        case "hp":
          r[f.instructions.type].render(c, Ze.for(e), f.instructions);
          break;

        default:
          r[f.type].render(c, e, f);
      }

      t.addBinding(c);
    };

    l(0);
  }

};
Hs = rt([ys("hs")], Hs);

class SpreadBinding {
  constructor(t, e) {
    this.ee = t;
    this.ie = e;
    this.interceptor = this;
    this.isBound = false;
    this.ctrl = e.controller;
    this.locator = this.ctrl.container;
  }

  get container() {
    return this.locator;
  }

  get definition() {
    return this.ctrl.definition;
  }

  get isStrictBinding() {
    return this.ctrl.isStrictBinding;
  }

  $bind(t, e) {
    var i;
    if (this.isBound) return;
    this.isBound = true;
    const s = this.$scope = null !== (i = this.ie.controller.scope.parentScope) && void 0 !== i ? i : void 0;
    if (null == s) throw new Error("Invalid spreading. Context scope is null/undefined");
    this.ee.forEach(e => e.$bind(t, s));
  }

  $unbind(t) {
    this.ee.forEach(e => e.$unbind(t));
    this.isBound = false;
  }

  addBinding(t) {
    this.ee.push(t);
  }

  addChild(t) {
    if (1 !== t.vmKind) throw new Error("Spread binding does not support spreading custom attributes/template controllers");
    this.ctrl.addChild(t);
  }

}

function zs(t, e) {
  const i = e.length;
  let s = 0;

  for (let n = 0; n < i; ++n) if (32 === e.charCodeAt(n)) {
    if (n !== s) t.add(e.slice(s, n));
    s = n + 1;
  } else if (n + 1 === i) t.add(e.slice(s));
}

const Gs = t => new SpreadBinding([], t);

const Xs = "IController";
const Ks = "IInstruction";
const Ys = "IRenderLocation";
const Qs = "IAuSlotsInfo";

function Zs(t, e, i, s, n, r) {
  const o = e.container.createChild();
  o.registerResolver(t.HTMLElement, o.registerResolver(t.Element, o.registerResolver(Ji, new _kernel.InstanceProvider("ElementResolver", i))));
  o.registerResolver(Ni, new _kernel.InstanceProvider(Xs, e));
  o.registerResolver(gs, new _kernel.InstanceProvider(Ks, s));
  o.registerResolver(es, null == n ? tn : new _kernel.InstanceProvider(Ys, n));
  o.registerResolver(bi, en);
  o.registerResolver(vs, null == r ? sn : new _kernel.InstanceProvider(Qs, r));
  return o;
}

class ViewFactoryProvider {
  constructor(t) {
    this.f = t;
  }

  get $isResolver() {
    return true;
  }

  resolve() {
    const t = this.f;
    if (null === t) throw new Error("AUR7055");
    if (!Ct(t.name) || 0 === t.name.length) throw new Error("AUR0756");
    return t;
  }

}

function Js(t, e, i, s, n, r, o, l) {
  const h = i.container.createChild();
  h.registerResolver(t.HTMLElement, h.registerResolver(t.Element, h.registerResolver(Ji, new _kernel.InstanceProvider("ElementResolver", s))));
  i = i instanceof Controller ? i : i.ctrl;
  h.registerResolver(Ni, new _kernel.InstanceProvider(Xs, i));
  h.registerResolver(gs, new _kernel.InstanceProvider(Ks, n));
  h.registerResolver(es, null == o ? tn : new _kernel.InstanceProvider(Ys, o));
  h.registerResolver(bi, null == r ? en : new ViewFactoryProvider(r));
  h.registerResolver(vs, null == l ? sn : new _kernel.InstanceProvider(Qs, l));
  return h.invoke(e.Type);
}

const tn = new _kernel.InstanceProvider(Ys);
const en = new ViewFactoryProvider(null);
const sn = new _kernel.InstanceProvider(Qs, new AuSlotsInfo(_kernel.emptyArray));
var nn;
exports.CommandType = nn;

(function (t) {
  t[t["None"] = 0] = "None";
  t[t["IgnoreAttr"] = 1] = "IgnoreAttr";
})(nn || (exports.CommandType = nn = {}));

function rn(t) {
  return function (e) {
    return an.define(t, e);
  };
}

class BindingCommandDefinition {
  constructor(t, e, i, s, n) {
    this.Type = t;
    this.name = e;
    this.aliases = i;
    this.key = s;
    this.type = n;
  }

  static create(t, e) {
    let i;
    let s;

    if (Ct(t)) {
      i = t;
      s = {
        name: i
      };
    } else {
      i = t.name;
      s = t;
    }

    return new BindingCommandDefinition(e, (0, _kernel.firstDefined)(hn(e, "name"), i), (0, _kernel.mergeArrays)(hn(e, "aliases"), s.aliases, e.aliases), ln(i), (0, _kernel.firstDefined)(hn(e, "type"), s.type, e.type, null));
  }

  register(t) {
    const {
      Type: e,
      key: i,
      aliases: s
    } = this;

    _kernel.Registration.singleton(i, e).register(t);

    _kernel.Registration.aliasTo(i, e).register(t);

    (0, _runtime.registerAliases)(s, an, i, t);
  }

}

exports.BindingCommandDefinition = BindingCommandDefinition;
const on = dt("binding-command");

const ln = t => `${on}:${t}`;

const hn = (t, e) => lt(ft(e), t);

const an = Object.freeze({
  name: on,
  keyFrom: ln,

  define(t, e) {
    const i = BindingCommandDefinition.create(t, e);
    at(on, i, i.Type);
    at(on, i, i);
    mt(e, on);
    return i.Type;
  },

  getAnnotation: hn
});
exports.BindingCommand = an;
let cn = class OneTimeBindingCommand {
  constructor(t, e) {
    this.type = 0;
    this.m = t;
    this.ep = e;
  }

  get name() {
    return "one-time";
  }

  build(t) {
    var e;
    const i = t.attr;
    let s = i.target;
    let n = t.attr.rawValue;
    if (null == t.bindable) s = null !== (e = this.m.map(t.node, s)) && void 0 !== e ? e : (0, _kernel.camelCase)(s);else {
      if ("" === n && 1 === t.def.type) n = (0, _kernel.camelCase)(s);
      s = t.bindable.property;
    }
    return new PropertyBindingInstruction(this.ep.parse(n, 8), s, _runtime.BindingMode.oneTime);
  }

};
exports.OneTimeBindingCommand = cn;
cn.inject = [Gt, _runtime.IExpressionParser];
exports.OneTimeBindingCommand = cn = rt([rn("one-time")], cn);
let un = class ToViewBindingCommand {
  constructor(t, e) {
    this.type = 0;
    this.m = t;
    this.ep = e;
  }

  get name() {
    return "to-view";
  }

  build(t) {
    var e;
    const i = t.attr;
    let s = i.target;
    let n = t.attr.rawValue;
    if (null == t.bindable) s = null !== (e = this.m.map(t.node, s)) && void 0 !== e ? e : (0, _kernel.camelCase)(s);else {
      if ("" === n && 1 === t.def.type) n = (0, _kernel.camelCase)(s);
      s = t.bindable.property;
    }
    return new PropertyBindingInstruction(this.ep.parse(n, 8), s, _runtime.BindingMode.toView);
  }

};
exports.ToViewBindingCommand = un;
un.inject = [Gt, _runtime.IExpressionParser];
exports.ToViewBindingCommand = un = rt([rn("to-view")], un);
let fn = class FromViewBindingCommand {
  constructor(t, e) {
    this.type = 0;
    this.m = t;
    this.ep = e;
  }

  get name() {
    return "from-view";
  }

  build(t) {
    var e;
    const i = t.attr;
    let s = i.target;
    let n = i.rawValue;
    if (null == t.bindable) s = null !== (e = this.m.map(t.node, s)) && void 0 !== e ? e : (0, _kernel.camelCase)(s);else {
      if ("" === n && 1 === t.def.type) n = (0, _kernel.camelCase)(s);
      s = t.bindable.property;
    }
    return new PropertyBindingInstruction(this.ep.parse(n, 8), s, _runtime.BindingMode.fromView);
  }

};
exports.FromViewBindingCommand = fn;
fn.inject = [Gt, _runtime.IExpressionParser];
exports.FromViewBindingCommand = fn = rt([rn("from-view")], fn);
let dn = class TwoWayBindingCommand {
  constructor(t, e) {
    this.type = 0;
    this.m = t;
    this.ep = e;
  }

  get name() {
    return "two-way";
  }

  build(t) {
    var e;
    const i = t.attr;
    let s = i.target;
    let n = i.rawValue;
    if (null == t.bindable) s = null !== (e = this.m.map(t.node, s)) && void 0 !== e ? e : (0, _kernel.camelCase)(s);else {
      if ("" === n && 1 === t.def.type) n = (0, _kernel.camelCase)(s);
      s = t.bindable.property;
    }
    return new PropertyBindingInstruction(this.ep.parse(n, 8), s, _runtime.BindingMode.twoWay);
  }

};
exports.TwoWayBindingCommand = dn;
dn.inject = [Gt, _runtime.IExpressionParser];
exports.TwoWayBindingCommand = dn = rt([rn("two-way")], dn);
let mn = class DefaultBindingCommand {
  constructor(t, e) {
    this.type = 0;
    this.m = t;
    this.ep = e;
  }

  get name() {
    return "bind";
  }

  build(t) {
    var e;
    const i = t.attr;
    const s = t.bindable;
    let n;
    let r;
    let o = i.target;
    let l = i.rawValue;

    if (null == s) {
      r = this.m.isTwoWay(t.node, o) ? _runtime.BindingMode.twoWay : _runtime.BindingMode.toView;
      o = null !== (e = this.m.map(t.node, o)) && void 0 !== e ? e : (0, _kernel.camelCase)(o);
    } else {
      if ("" === l && 1 === t.def.type) l = (0, _kernel.camelCase)(o);
      n = t.def.defaultBindingMode;
      r = s.mode === _runtime.BindingMode.default || null == s.mode ? null == n || n === _runtime.BindingMode.default ? _runtime.BindingMode.toView : n : s.mode;
      o = s.property;
    }

    return new PropertyBindingInstruction(this.ep.parse(l, 8), o, r);
  }

};
exports.DefaultBindingCommand = mn;
mn.inject = [Gt, _runtime.IExpressionParser];
exports.DefaultBindingCommand = mn = rt([rn("bind")], mn);
let vn = class CallBindingCommand {
  constructor(t) {
    this.type = 0;
    this.ep = t;
  }

  get name() {
    return "call";
  }

  build(t) {
    const e = null === t.bindable ? (0, _kernel.camelCase)(t.attr.target) : t.bindable.property;
    return new CallBindingInstruction(this.ep.parse(t.attr.rawValue, 8 | 4), e);
  }

};
exports.CallBindingCommand = vn;
vn.inject = [_runtime.IExpressionParser];
exports.CallBindingCommand = vn = rt([rn("call")], vn);
let pn = class ForBindingCommand {
  constructor(t) {
    this.type = 0;
    this.ep = t;
  }

  get name() {
    return "for";
  }

  build(t) {
    const e = null === t.bindable ? (0, _kernel.camelCase)(t.attr.target) : t.bindable.property;
    return new IteratorBindingInstruction(this.ep.parse(t.attr.rawValue, 2), e);
  }

};
exports.ForBindingCommand = pn;
pn.inject = [_runtime.IExpressionParser];
exports.ForBindingCommand = pn = rt([rn("for")], pn);
let gn = class TriggerBindingCommand {
  constructor(t) {
    this.type = 1;
    this.ep = t;
  }

  get name() {
    return "trigger";
  }

  build(t) {
    return new ListenerBindingInstruction(this.ep.parse(t.attr.rawValue, 4), t.attr.target, true, _runtime.DelegationStrategy.none);
  }

};
exports.TriggerBindingCommand = gn;
gn.inject = [_runtime.IExpressionParser];
exports.TriggerBindingCommand = gn = rt([rn("trigger")], gn);
let wn = class DelegateBindingCommand {
  constructor(t) {
    this.type = 1;
    this.ep = t;
  }

  get name() {
    return "delegate";
  }

  build(t) {
    return new ListenerBindingInstruction(this.ep.parse(t.attr.rawValue, 4), t.attr.target, false, _runtime.DelegationStrategy.bubbling);
  }

};
exports.DelegateBindingCommand = wn;
wn.inject = [_runtime.IExpressionParser];
exports.DelegateBindingCommand = wn = rt([rn("delegate")], wn);
let bn = class CaptureBindingCommand {
  constructor(t) {
    this.type = 1;
    this.ep = t;
  }

  get name() {
    return "capture";
  }

  build(t) {
    return new ListenerBindingInstruction(this.ep.parse(t.attr.rawValue, 4), t.attr.target, false, _runtime.DelegationStrategy.capturing);
  }

};
exports.CaptureBindingCommand = bn;
bn.inject = [_runtime.IExpressionParser];
exports.CaptureBindingCommand = bn = rt([rn("capture")], bn);
let xn = class AttrBindingCommand {
  constructor(t) {
    this.type = 1;
    this.ep = t;
  }

  get name() {
    return "attr";
  }

  build(t) {
    return new AttributeBindingInstruction(t.attr.target, this.ep.parse(t.attr.rawValue, 8), t.attr.target);
  }

};
exports.AttrBindingCommand = xn;
xn.inject = [_runtime.IExpressionParser];
exports.AttrBindingCommand = xn = rt([rn("attr")], xn);
let yn = class StyleBindingCommand {
  constructor(t) {
    this.type = 1;
    this.ep = t;
  }

  get name() {
    return "style";
  }

  build(t) {
    return new AttributeBindingInstruction("style", this.ep.parse(t.attr.rawValue, 8), t.attr.target);
  }

};
exports.StyleBindingCommand = yn;
yn.inject = [_runtime.IExpressionParser];
exports.StyleBindingCommand = yn = rt([rn("style")], yn);
let kn = class ClassBindingCommand {
  constructor(t) {
    this.type = 1;
    this.ep = t;
  }

  get name() {
    return "class";
  }

  build(t) {
    return new AttributeBindingInstruction("class", this.ep.parse(t.attr.rawValue, 8), t.attr.target);
  }

};
exports.ClassBindingCommand = kn;
kn.inject = [_runtime.IExpressionParser];
exports.ClassBindingCommand = kn = rt([rn("class")], kn);
let Cn = class RefBindingCommand {
  constructor(t) {
    this.type = 1;
    this.ep = t;
  }

  get name() {
    return "ref";
  }

  build(t) {
    return new RefBindingInstruction(this.ep.parse(t.attr.rawValue, 8), t.attr.target);
  }

};
Cn.inject = [_runtime.IExpressionParser];
Cn = rt([rn("ref")], Cn);
let An = class SpreadBindingCommand {
  constructor() {
    this.type = 1;
  }

  get name() {
    return "...$attrs";
  }

  build(t) {
    return new SpreadBindingInstruction();
  }

};
An = rt([rn("...$attrs")], An);

const Sn = _kernel.DI.createInterface("ITemplateElementFactory", t => t.singleton(TemplateElementFactory));

exports.ITemplateElementFactory = Sn;
const Rn = {};

class TemplateElementFactory {
  constructor(t) {
    this.p = t;
    this.se = t.document.createElement("template");
  }

  createTemplate(t) {
    var e;

    if (Ct(t)) {
      let e = Rn[t];

      if (void 0 === e) {
        const i = this.se;
        i.innerHTML = t;
        const s = i.content.firstElementChild;

        if (null == s || "TEMPLATE" !== s.nodeName || null != s.nextElementSibling) {
          this.se = this.p.document.createElement("template");
          e = i;
        } else {
          i.content.removeChild(s);
          e = s;
        }

        Rn[t] = e;
      }

      return e.cloneNode(true);
    }

    if ("TEMPLATE" !== t.nodeName) {
      const e = this.p.document.createElement("template");
      e.content.appendChild(t);
      return e;
    }

    null === (e = t.parentNode) || void 0 === e ? void 0 : e.removeChild(t);
    return t.cloneNode(true);
  }

}

TemplateElementFactory.inject = [Wt];

const En = function (t) {
  function e(t, i, s) {
    _kernel.DI.inject(e)(t, i, s);
  }

  e.$isResolver = true;

  e.resolve = function (e, i) {
    if (i.root === i) return i.getAll(t, false);
    return i.has(t, false) ? i.getAll(t, false).concat(i.root.getAll(t, false)) : i.root.getAll(t, false);
  };

  return e;
};

exports.allResources = En;

class TemplateCompiler {
  constructor() {
    this.debug = false;
    this.resolveResources = true;
  }

  static register(t) {
    return _kernel.Registration.singleton(bs, this).register(t);
  }

  compile(t, e, i) {
    var s, n, r, o;
    const l = CustomElementDefinition.getOrCreate(t);
    if (null === l.template || void 0 === l.template) return l;
    if (false === l.needsCompile) return l;
    null !== i && void 0 !== i ? i : i = Tn;
    const a = new CompilationContext(t, e, i, null, null, void 0);
    const c = Ct(l.template) || !t.enhance ? a.ne.createTemplate(l.template) : l.template;
    const u = "TEMPLATE" === c.nodeName && null != c.content;
    const f = u ? c.content : c;
    const d = e.get(En(_n));
    const m = d.length;
    let v = 0;
    if (m > 0) while (m > v) {
      null === (n = (s = d[v]).compiling) || void 0 === n ? void 0 : n.call(s, c);
      ++v;
    }
    if (c.hasAttribute(Un)) throw new Error("AUR0701");
    this.re(f, a);
    this.oe(f, a);
    return CustomElementDefinition.create({ ...t,
      name: t.name || zn(),
      dependencies: (null !== (r = t.dependencies) && void 0 !== r ? r : _kernel.emptyArray).concat(null !== (o = a.deps) && void 0 !== o ? o : _kernel.emptyArray),
      instructions: a.rows,
      surrogates: u ? this.le(c, a) : _kernel.emptyArray,
      template: c,
      hasSlots: a.hasSlot,
      needsCompile: false
    });
  }

  compileSpread(t, e, i, s) {
    var n;
    const r = new CompilationContext(t, i, Tn, null, null, void 0);
    const o = [];
    const l = r.he(s.nodeName.toLowerCase());
    const h = r.ep;
    const a = e.length;
    let c = 0;
    let u;
    let f = null;
    let d;
    let m;
    let v;
    let p;
    let g;
    let w = null;
    let b;
    let x;
    let y;
    let k;

    for (; a > c; ++c) {
      u = e[c];
      y = u.target;
      k = u.rawValue;
      w = r.ae(u);

      if (null !== w && (1 & w.type) > 0) {
        Pn.node = s;
        Pn.attr = u;
        Pn.bindable = null;
        Pn.def = null;
        o.push(w.build(Pn));
        continue;
      }

      f = r.ce(y);

      if (null !== f) {
        if (f.isTemplateController) throw new Error(`AUR0703:${y}`);
        v = BindablesInfo.from(f, true);
        x = false === f.noMultiBindings && null === w && Bn(k);
        if (x) m = this.ue(s, k, f, r);else {
          g = v.primary;

          if (null === w) {
            b = h.parse(k, 1);
            m = [null === b ? new SetPropertyInstruction(k, g.property) : new InterpolationInstruction(b, g.property)];
          } else {
            Pn.node = s;
            Pn.attr = u;
            Pn.bindable = g;
            Pn.def = f;
            m = [w.build(Pn)];
          }
        }
        (null !== d && void 0 !== d ? d : d = []).push(new HydrateAttributeInstruction(this.resolveResources ? f : f.name, null != f.aliases && f.aliases.includes(y) ? y : void 0, m));
        continue;
      }

      if (null === w) {
        b = h.parse(k, 1);

        if (null !== l) {
          v = BindablesInfo.from(l, false);
          p = v.attrs[y];

          if (void 0 !== p) {
            b = h.parse(k, 1);
            o.push(new SpreadElementPropBindingInstruction(null == b ? new SetPropertyInstruction(k, p.property) : new InterpolationInstruction(b, p.property)));
            continue;
          }
        }

        if (null != b) o.push(new InterpolationInstruction(b, null !== (n = r.m.map(s, y)) && void 0 !== n ? n : (0, _kernel.camelCase)(y)));else switch (y) {
          case "class":
            o.push(new SetClassAttributeInstruction(k));
            break;

          case "style":
            o.push(new SetStyleAttributeInstruction(k));
            break;

          default:
            o.push(new SetAttributeInstruction(k, y));
        }
      } else {
        if (null !== l) {
          v = BindablesInfo.from(l, false);
          p = v.attrs[y];

          if (void 0 !== p) {
            Pn.node = s;
            Pn.attr = u;
            Pn.bindable = p;
            Pn.def = l;
            o.push(new SpreadElementPropBindingInstruction(w.build(Pn)));
            continue;
          }
        }

        Pn.node = s;
        Pn.attr = u;
        Pn.bindable = null;
        Pn.def = null;
        o.push(w.build(Pn));
      }
    }

    In();
    if (null != d) return d.concat(o);
    return o;
  }

  le(t, e) {
    var i;
    const s = [];
    const n = t.attributes;
    const r = e.ep;
    let o = n.length;
    let l = 0;
    let h;
    let a;
    let c;
    let u;
    let f = null;
    let d;
    let m;
    let v;
    let p;
    let g = null;
    let w;
    let b;
    let x;
    let y;

    for (; o > l; ++l) {
      h = n[l];
      a = h.name;
      c = h.value;
      u = e.fe.parse(a, c);
      x = u.target;
      y = u.rawValue;
      if (On[x]) throw new Error(`AUR0702:${a}`);
      g = e.ae(u);

      if (null !== g && (1 & g.type) > 0) {
        Pn.node = t;
        Pn.attr = u;
        Pn.bindable = null;
        Pn.def = null;
        s.push(g.build(Pn));
        continue;
      }

      f = e.ce(x);

      if (null !== f) {
        if (f.isTemplateController) throw new Error(`AUR0703:${x}`);
        v = BindablesInfo.from(f, true);
        b = false === f.noMultiBindings && null === g && Bn(y);
        if (b) m = this.ue(t, y, f, e);else {
          p = v.primary;

          if (null === g) {
            w = r.parse(y, 1);
            m = [null === w ? new SetPropertyInstruction(y, p.property) : new InterpolationInstruction(w, p.property)];
          } else {
            Pn.node = t;
            Pn.attr = u;
            Pn.bindable = p;
            Pn.def = f;
            m = [g.build(Pn)];
          }
        }
        t.removeAttribute(a);
        --l;
        --o;
        (null !== d && void 0 !== d ? d : d = []).push(new HydrateAttributeInstruction(this.resolveResources ? f : f.name, null != f.aliases && f.aliases.includes(x) ? x : void 0, m));
        continue;
      }

      if (null === g) {
        w = r.parse(y, 1);

        if (null != w) {
          t.removeAttribute(a);
          --l;
          --o;
          s.push(new InterpolationInstruction(w, null !== (i = e.m.map(t, x)) && void 0 !== i ? i : (0, _kernel.camelCase)(x)));
        } else switch (a) {
          case "class":
            s.push(new SetClassAttributeInstruction(y));
            break;

          case "style":
            s.push(new SetStyleAttributeInstruction(y));
            break;

          default:
            s.push(new SetAttributeInstruction(y, a));
        }
      } else {
        Pn.node = t;
        Pn.attr = u;
        Pn.bindable = null;
        Pn.def = null;
        s.push(g.build(Pn));
      }
    }

    In();
    if (null != d) return d.concat(s);
    return s;
  }

  oe(t, e) {
    switch (t.nodeType) {
      case 1:
        switch (t.nodeName) {
          case "LET":
            return this.de(t, e);

          default:
            return this.me(t, e);
        }

      case 3:
        return this.ve(t, e);

      case 11:
        {
          let i = t.firstChild;

          while (null !== i) i = this.oe(i, e);

          break;
        }
    }

    return t.nextSibling;
  }

  de(t, e) {
    const i = t.attributes;
    const s = i.length;
    const n = [];
    const r = e.ep;
    let o = false;
    let l = 0;
    let h;
    let a;
    let c;
    let u;
    let f;
    let d;
    let m;
    let v;

    for (; s > l; ++l) {
      h = i[l];
      c = h.name;
      u = h.value;

      if ("to-binding-context" === c) {
        o = true;
        continue;
      }

      a = e.fe.parse(c, u);
      d = a.target;
      m = a.rawValue;
      f = e.ae(a);
      if (null !== f) switch (f.name) {
        case "to-view":
        case "bind":
          n.push(new LetBindingInstruction(r.parse(m, 8), (0, _kernel.camelCase)(d)));
          continue;

        default:
          throw new Error(`AUR0704:${a.command}`);
      }
      v = r.parse(m, 1);
      n.push(new LetBindingInstruction(null === v ? new _runtime.PrimitiveLiteralExpression(m) : v, (0, _kernel.camelCase)(d)));
    }

    e.rows.push([new HydrateLetElementInstruction(n, o)]);
    return this.pe(t).nextSibling;
  }

  me(t, e) {
    var i, s, n, r, l, a;
    var c, u;
    const f = t.nextSibling;
    const d = (null !== (i = t.getAttribute("as-element")) && void 0 !== i ? i : t.nodeName).toLowerCase();
    const m = e.he(d);
    const v = !!(null === m || void 0 === m ? void 0 : m.capture);
    const p = v ? [] : _kernel.emptyArray;
    const g = e.ep;
    const w = this.debug ? _kernel.noop : () => {
      t.removeAttribute(A);
      --k;
      --y;
    };
    let b = t.attributes;
    let x;
    let y = b.length;
    let k = 0;
    let C;
    let A;
    let R;
    let E;
    let B;
    let I;
    let T = null;
    let D = false;
    let P;
    let O;
    let $;
    let L;
    let q;
    let M;
    let U;
    let F = null;
    let V;

    let _;

    let j;
    let N;
    let W = true;
    let H = false;
    if ("slot" === d) e.root.hasSlot = true;

    if (null !== m) {
      W = null === (s = m.processContent) || void 0 === s ? void 0 : s.call(m.Type, t, e.p);
      b = t.attributes;
      y = b.length;
    }

    if (e.root.def.enhance && t.classList.contains("au")) throw new Error(`AUR0705`);

    for (; y > k; ++k) {
      C = b[k];
      A = C.name;
      R = C.value;

      switch (A) {
        case "as-element":
        case "containerless":
          w();
          if (!H) H = "containerless" === A;
          continue;
      }

      E = e.fe.parse(A, R);
      F = e.ae(E);
      j = E.target;
      N = E.rawValue;

      if (v) {
        if (null != F && 1 & F.type) {
          w();
          p.push(E);
          continue;
        }

        if ("au-slot" !== j) {
          V = BindablesInfo.from(m, false);

          if (null == V.attrs[j] && !(null === (n = e.ce(j)) || void 0 === n ? void 0 : n.isTemplateController)) {
            w();
            p.push(E);
            continue;
          }
        }
      }

      if (null !== F && 1 & F.type) {
        Pn.node = t;
        Pn.attr = E;
        Pn.bindable = null;
        Pn.def = null;
        (null !== B && void 0 !== B ? B : B = []).push(F.build(Pn));
        w();
        continue;
      }

      T = e.ce(j);

      if (null !== T) {
        V = BindablesInfo.from(T, true);
        D = false === T.noMultiBindings && null === F && Bn(R);
        if (D) $ = this.ue(t, R, T, e);else {
          _ = V.primary;

          if (null === F) {
            M = g.parse(R, 1);
            $ = [null === M ? new SetPropertyInstruction(R, _.property) : new InterpolationInstruction(M, _.property)];
          } else {
            Pn.node = t;
            Pn.attr = E;
            Pn.bindable = _;
            Pn.def = T;
            $ = [F.build(Pn)];
          }
        }
        w();
        if (T.isTemplateController) (null !== L && void 0 !== L ? L : L = []).push(new HydrateTemplateController(Dn, this.resolveResources ? T : T.name, void 0, $));else (null !== O && void 0 !== O ? O : O = []).push(new HydrateAttributeInstruction(this.resolveResources ? T : T.name, null != T.aliases && T.aliases.includes(j) ? j : void 0, $));
        continue;
      }

      if (null === F) {
        if (null !== m) {
          V = BindablesInfo.from(m, false);
          P = V.attrs[j];

          if (void 0 !== P) {
            M = g.parse(N, 1);
            (null !== I && void 0 !== I ? I : I = []).push(null == M ? new SetPropertyInstruction(N, P.property) : new InterpolationInstruction(M, P.property));
            w();
            continue;
          }
        }

        M = g.parse(N, 1);

        if (null != M) {
          w();
          (null !== B && void 0 !== B ? B : B = []).push(new InterpolationInstruction(M, null !== (r = e.m.map(t, j)) && void 0 !== r ? r : (0, _kernel.camelCase)(j)));
        }

        continue;
      }

      w();

      if (null !== m) {
        V = BindablesInfo.from(m, false);
        P = V.attrs[j];

        if (void 0 !== P) {
          Pn.node = t;
          Pn.attr = E;
          Pn.bindable = P;
          Pn.def = m;
          (null !== I && void 0 !== I ? I : I = []).push(F.build(Pn));
          continue;
        }
      }

      Pn.node = t;
      Pn.attr = E;
      Pn.bindable = null;
      Pn.def = null;
      (null !== B && void 0 !== B ? B : B = []).push(F.build(Pn));
    }

    In();
    if (this.ge(t) && null != B && B.length > 1) this.we(t, B);

    if (null !== m) {
      U = new HydrateElementInstruction(this.resolveResources ? m : m.name, void 0, null !== I && void 0 !== I ? I : _kernel.emptyArray, null, H, p);

      if ("au-slot" === d) {
        const i = t.getAttribute("name") || "default";
        const s = e.h("template");
        const n = e.be();
        let r = t.firstChild;

        while (null !== r) {
          if (1 === r.nodeType && r.hasAttribute("au-slot")) t.removeChild(r);else s.content.appendChild(r);
          r = t.firstChild;
        }

        this.oe(s.content, n);
        U.auSlot = {
          name: i,
          fallback: CustomElementDefinition.create({
            name: zn(),
            template: s,
            instructions: n.rows,
            needsCompile: false
          })
        };
        t = this.xe(t, e);
      }
    }

    if (null != B || null != U || null != O) {
      x = _kernel.emptyArray.concat(null !== U && void 0 !== U ? U : _kernel.emptyArray, null !== O && void 0 !== O ? O : _kernel.emptyArray, null !== B && void 0 !== B ? B : _kernel.emptyArray);
      this.pe(t);
    }

    let z;

    if (null != L) {
      y = L.length - 1;
      k = y;
      q = L[k];
      let i;
      this.xe(t, e);
      if ("TEMPLATE" === t.nodeName) i = t;else {
        i = e.h("template");
        i.content.appendChild(t);
      }
      const s = i;
      const n = e.be(null == x ? [] : [x]);
      let r;
      let o;
      let h;
      let a;
      let u;
      let f;
      let v;
      let p;
      let g = 0,
          w = 0;
      let b = t.firstChild;
      if (false !== W) while (null !== b) if (1 === b.nodeType) {
        r = b;
        b = b.nextSibling;
        o = r.getAttribute("au-slot");

        if (null !== o) {
          if (null === m) throw new Error(`AUR0706:${d}[${o}]`);
          if ("" === o) o = "default";
          r.removeAttribute("au-slot");
          t.removeChild(r);
          (null !== (l = (c = null !== a && void 0 !== a ? a : a = {})[o]) && void 0 !== l ? l : c[o] = []).push(r);
        }
      } else b = b.nextSibling;

      if (null != a) {
        h = {};

        for (o in a) {
          i = e.h("template");
          u = a[o];

          for (g = 0, w = u.length; w > g; ++g) {
            f = u[g];
            if ("TEMPLATE" === f.nodeName) {
              if (f.attributes.length > 0) i.content.appendChild(f);else i.content.appendChild(f.content);
            } else i.content.appendChild(f);
          }

          p = e.be();
          this.oe(i.content, p);
          h[o] = CustomElementDefinition.create({
            name: zn(),
            template: i,
            instructions: p.rows,
            needsCompile: false,
            isStrictBinding: e.root.def.isStrictBinding
          });
        }

        U.projections = h;
      }

      if (null !== m && m.containerless) this.xe(t, e);
      z = null === m || !m.containerless && !H && false !== W;
      if (z) if ("TEMPLATE" === t.nodeName) this.oe(t.content, n);else {
        b = t.firstChild;

        while (null !== b) b = this.oe(b, n);
      }
      q.def = CustomElementDefinition.create({
        name: zn(),
        template: s,
        instructions: n.rows,
        needsCompile: false,
        isStrictBinding: e.root.def.isStrictBinding
      });

      while (k-- > 0) {
        q = L[k];
        i = e.h("template");
        v = e.h("au-m");
        v.classList.add("au");
        i.content.appendChild(v);
        q.def = CustomElementDefinition.create({
          name: zn(),
          template: i,
          needsCompile: false,
          instructions: [[L[k + 1]]],
          isStrictBinding: e.root.def.isStrictBinding
        });
      }

      e.rows.push([q]);
    } else {
      if (null != x) e.rows.push(x);
      let i = t.firstChild;
      let s;
      let n;
      let r = null;
      let o;
      let l;
      let h;
      let c;
      let f;
      let d = 0,
          v = 0;
      if (false !== W) while (null !== i) if (1 === i.nodeType) {
        s = i;
        i = i.nextSibling;
        n = s.getAttribute("au-slot");

        if (null !== n) {
          if (null === m) throw new Error(`AUR0706:${t.nodeName}[${n}]`);
          if ("" === n) n = "default";
          t.removeChild(s);
          s.removeAttribute("au-slot");
          (null !== (a = (u = null !== o && void 0 !== o ? o : o = {})[n]) && void 0 !== a ? a : u[n] = []).push(s);
        }
      } else i = i.nextSibling;

      if (null != o) {
        r = {};

        for (n in o) {
          c = e.h("template");
          l = o[n];

          for (d = 0, v = l.length; v > d; ++d) {
            h = l[d];
            if ("TEMPLATE" === h.nodeName) {
              if (h.attributes.length > 0) c.content.appendChild(h);else c.content.appendChild(h.content);
            } else c.content.appendChild(h);
          }

          f = e.be();
          this.oe(c.content, f);
          r[n] = CustomElementDefinition.create({
            name: zn(),
            template: c,
            instructions: f.rows,
            needsCompile: false,
            isStrictBinding: e.root.def.isStrictBinding
          });
        }

        U.projections = r;
      }

      if (null !== m && m.containerless) this.xe(t, e);
      z = null === m || !m.containerless && !H && false !== W;

      if (z && t.childNodes.length > 0) {
        i = t.firstChild;

        while (null !== i) i = this.oe(i, e);
      }
    }

    return f;
  }

  ve(t, e) {
    let i = "";
    let s = t;

    while (null !== s && 3 === s.nodeType) {
      i += s.textContent;
      s = s.nextSibling;
    }

    const n = e.ep.parse(i, 1);
    if (null === n) return s;
    const r = t.parentNode;
    r.insertBefore(this.pe(e.h("au-m")), t);
    e.rows.push([new TextBindingInstruction(n, !!e.def.isStrictBinding)]);
    t.textContent = "";
    s = t.nextSibling;

    while (null !== s && 3 === s.nodeType) {
      r.removeChild(s);
      s = t.nextSibling;
    }

    return t.nextSibling;
  }

  ue(t, e, i, s) {
    const n = BindablesInfo.from(i, true);
    const r = e.length;
    const o = [];
    let l;
    let h;
    let a = 0;
    let c = 0;
    let u;
    let f;
    let d;
    let m;

    for (let v = 0; v < r; ++v) {
      c = e.charCodeAt(v);
      if (92 === c) ++v;else if (58 === c) {
        l = e.slice(a, v);

        while (e.charCodeAt(++v) <= 32);

        a = v;

        for (; v < r; ++v) {
          c = e.charCodeAt(v);
          if (92 === c) ++v;else if (59 === c) {
            h = e.slice(a, v);
            break;
          }
        }

        if (void 0 === h) h = e.slice(a);
        f = s.fe.parse(l, h);
        d = s.ae(f);
        m = n.attrs[f.target];
        if (null == m) throw new Error(`AUR0707:${i.name}.${f.target}`);

        if (null === d) {
          u = s.ep.parse(h, 1);
          o.push(null === u ? new SetPropertyInstruction(h, m.property) : new InterpolationInstruction(u, m.property));
        } else {
          Pn.node = t;
          Pn.attr = f;
          Pn.bindable = m;
          Pn.def = i;
          o.push(d.build(Pn));
        }

        while (v < r && e.charCodeAt(++v) <= 32);

        a = v;
        l = void 0;
        h = void 0;
      }
    }

    In();
    return o;
  }

  re(t, e) {
    const i = t;
    const s = (0, _kernel.toArray)(i.querySelectorAll("template[as-custom-element]"));
    const n = s.length;
    if (0 === n) return;
    if (n === i.childElementCount) throw new Error("AUR0708");
    const r = new Set();

    for (const t of s) {
      if (t.parentNode !== i) throw new Error("AUR0709");
      const s = Fn(t, r);
      const n = class LocalTemplate {};
      const o = t.content;
      const l = (0, _kernel.toArray)(o.querySelectorAll("bindable"));
      const h = Et.for(n);
      const a = new Set();
      const c = new Set();

      for (const t of l) {
        if (t.parentNode !== o) throw new Error("AUR0710");
        const e = t.getAttribute("property");
        if (null === e) throw new Error("AUR0711");
        const i = t.getAttribute("attribute");
        if (null !== i && c.has(i) || a.has(e)) throw new Error(`AUR0712:${e}+${i}`);else {
          if (null !== i) c.add(i);
          a.add(e);
        }
        h.add({
          property: e,
          attribute: null !== i && void 0 !== i ? i : void 0,
          mode: Vn(t)
        });
        const s = t.getAttributeNames().filter(t => !Mn.includes(t));
        if (s.length > 0) ;
        o.removeChild(t);
      }

      e.ye(Ze.define({
        name: s,
        template: t
      }, n));
      i.removeChild(t);
    }
  }

  ge(t) {
    return "INPUT" === t.nodeName && 1 === $n[t.type];
  }

  we(t, e) {
    switch (t.nodeName) {
      case "INPUT":
        {
          const t = e;
          let i;
          let s;
          let n = 0;
          let r;

          for (let e = 0; e < t.length && n < 3; e++) {
            r = t[e];

            switch (r.to) {
              case "model":
              case "value":
              case "matcher":
                i = e;
                n++;
                break;

              case "checked":
                s = e;
                n++;
                break;
            }
          }

          if (void 0 !== s && void 0 !== i && s < i) [t[i], t[s]] = [t[s], t[i]];
        }
    }
  }

  pe(t) {
    t.classList.add("au");
    return t;
  }

  xe(t, e) {
    const i = t.parentNode;
    const s = e.h("au-m");
    this.pe(i.insertBefore(s, t));
    i.removeChild(t);
    return s;
  }

}

exports.TemplateCompiler = TemplateCompiler;

class CompilationContext {
  constructor(t, e, i, s, n, r) {
    this.hasSlot = false;
    this.ke = gt();
    const o = null !== s;
    this.c = e;
    this.root = null === n ? this : n;
    this.def = t;
    this.ci = i;
    this.parent = s;
    this.ne = o ? s.ne : e.get(Sn);
    this.fe = o ? s.fe : e.get(Ot);
    this.ep = o ? s.ep : e.get(_runtime.IExpressionParser);
    this.m = o ? s.m : e.get(Gt);
    this.Ut = o ? s.Ut : e.get(_kernel.ILogger);
    this.p = o ? s.p : e.get(Wt);
    this.localEls = o ? s.localEls : new Set();
    this.rows = null !== r && void 0 !== r ? r : [];
  }

  ye(t) {
    var e;
    var i;
    (null !== (e = (i = this.root).deps) && void 0 !== e ? e : i.deps = []).push(t);
    this.root.c.register(t);
  }

  h(t) {
    const e = this.p.document.createElement(t);
    if ("template" === t) this.p.document.adoptNode(e.content);
    return e;
  }

  he(t) {
    return this.c.find(Ze, t);
  }

  ce(t) {
    return this.c.find(Pe, t);
  }

  be(t) {
    return new CompilationContext(this.def, this.c, this.ci, this, this.root, t);
  }

  ae(t) {
    if (this.root !== this) return this.root.ae(t);
    const e = t.command;
    if (null === e) return null;
    let i = this.ke[e];

    if (void 0 === i) {
      i = this.c.create(an, e);
      if (null === i) throw new Error(`AUR0713:${e}`);
      this.ke[e] = i;
    }

    return i;
  }

}

function Bn(t) {
  const e = t.length;
  let i = 0;
  let s = 0;

  while (e > s) {
    i = t.charCodeAt(s);
    if (92 === i) ++s;else if (58 === i) return true;else if (36 === i && 123 === t.charCodeAt(s + 1)) return false;
    ++s;
  }

  return false;
}

function In() {
  Pn.node = Pn.attr = Pn.bindable = Pn.def = null;
}

const Tn = {
  projections: null
};
const Dn = {
  name: "unnamed"
};
const Pn = {
  node: null,
  attr: null,
  bindable: null,
  def: null
};
const On = Object.assign(gt(), {
  id: true,
  name: true,
  "au-slot": true,
  "as-element": true
});
const $n = {
  checkbox: 1,
  radio: 1
};
const Ln = new WeakMap();

class BindablesInfo {
  constructor(t, e, i) {
    this.attrs = t;
    this.bindables = e;
    this.primary = i;
  }

  static from(t, e) {
    let i = Ln.get(t);

    if (null == i) {
      const s = t.bindables;
      const n = gt();
      const r = e ? void 0 === t.defaultBindingMode ? _runtime.BindingMode.default : t.defaultBindingMode : _runtime.BindingMode.default;
      let o;
      let l;
      let h = false;
      let a;
      let c;

      for (l in s) {
        o = s[l];
        c = o.attribute;

        if (true === o.primary) {
          if (h) throw new Error(`AUR0714:${t.name}`);
          h = true;
          a = o;
        } else if (!h && null == a) a = o;

        n[c] = BindableDefinition.create(l, o);
      }

      if (null == o && e) a = n.value = BindableDefinition.create("value", {
        mode: r
      });
      Ln.set(t, i = new BindablesInfo(n, s, a));
    }

    return i;
  }

}

exports.BindablesInfo = BindablesInfo;
var qn;

(function (t) {
  t["property"] = "property";
  t["attribute"] = "attribute";
  t["mode"] = "mode";
})(qn || (qn = {}));

const Mn = Object.freeze(["property", "attribute", "mode"]);
const Un = "as-custom-element";

function Fn(t, e) {
  const i = t.getAttribute(Un);
  if (null === i || "" === i) throw new Error("AUR0715");
  if (e.has(i)) throw new Error(`AUR0716:${i}`);else {
    e.add(i);
    t.removeAttribute(Un);
  }
  return i;
}

function Vn(t) {
  switch (t.getAttribute("mode")) {
    case "oneTime":
      return _runtime.BindingMode.oneTime;

    case "toView":
      return _runtime.BindingMode.toView;

    case "fromView":
      return _runtime.BindingMode.fromView;

    case "twoWay":
      return _runtime.BindingMode.twoWay;

    case "default":
    default:
      return _runtime.BindingMode.default;
  }
}

const _n = _kernel.DI.createInterface("ITemplateCompilerHooks");

exports.ITemplateCompilerHooks = _n;
const jn = new WeakMap();
const Nn = dt("compiler-hooks");
const Wn = Object.freeze({
  name: Nn,

  define(t) {
    let e = jn.get(t);

    if (void 0 === e) {
      jn.set(t, e = new TemplateCompilerHooksDefinition(t));
      at(Nn, e, t);
      mt(t, Nn);
    }

    return t;
  }

});
exports.TemplateCompilerHooks = Wn;

class TemplateCompilerHooksDefinition {
  constructor(t) {
    this.Type = t;
  }

  get name() {
    return "";
  }

  register(t) {
    t.register(_kernel.Registration.singleton(_n, this.Type));
  }

}

const Hn = t => {
  return void 0 === t ? e : e(t);

  function e(t) {
    return Wn.define(t);
  }
};

exports.templateCompilerHooks = Hn;
const zn = Ze.generateName;

class BindingModeBehavior {
  constructor(t) {
    this.mode = t;
    this.Ce = new Map();
  }

  bind(t, e, i) {
    this.Ce.set(i, i.mode);
    i.mode = this.mode;
  }

  unbind(t, e, i) {
    i.mode = this.Ce.get(i);
    this.Ce.delete(i);
  }

}

exports.BindingModeBehavior = BindingModeBehavior;

class OneTimeBindingBehavior extends BindingModeBehavior {
  constructor() {
    super(_runtime.BindingMode.oneTime);
  }

}

exports.OneTimeBindingBehavior = OneTimeBindingBehavior;

class ToViewBindingBehavior extends BindingModeBehavior {
  constructor() {
    super(_runtime.BindingMode.toView);
  }

}

exports.ToViewBindingBehavior = ToViewBindingBehavior;

class FromViewBindingBehavior extends BindingModeBehavior {
  constructor() {
    super(_runtime.BindingMode.fromView);
  }

}

exports.FromViewBindingBehavior = FromViewBindingBehavior;

class TwoWayBindingBehavior extends BindingModeBehavior {
  constructor() {
    super(_runtime.BindingMode.twoWay);
  }

}

exports.TwoWayBindingBehavior = TwoWayBindingBehavior;
(0, _runtime.bindingBehavior)("oneTime")(OneTimeBindingBehavior);
(0, _runtime.bindingBehavior)("toView")(ToViewBindingBehavior);
(0, _runtime.bindingBehavior)("fromView")(FromViewBindingBehavior);
(0, _runtime.bindingBehavior)("twoWay")(TwoWayBindingBehavior);
const Gn = 200;

class DebounceBindingBehavior extends _runtime.BindingInterceptor {
  constructor(t, e) {
    super(t, e);
    this.opts = {
      delay: Gn
    };
    this.firstArg = null;
    this.task = null;
    this.taskQueue = t.locator.get(_kernel.IPlatform).taskQueue;
    if (e.args.length > 0) this.firstArg = e.args[0];
  }

  callSource(t) {
    this.queueTask(() => this.binding.callSource(t));
    return;
  }

  handleChange(t, e, i) {
    if (null !== this.task) {
      this.task.cancel();
      this.task = null;
    }

    this.binding.handleChange(t, e, i);
  }

  updateSource(t, e) {
    this.queueTask(() => this.binding.updateSource(t, e));
  }

  queueTask(t) {
    const e = this.task;
    this.task = this.taskQueue.queueTask(() => {
      this.task = null;
      return t();
    }, this.opts);
    null === e || void 0 === e ? void 0 : e.cancel();
  }

  $bind(t, e) {
    if (null !== this.firstArg) {
      const i = Number(this.firstArg.evaluate(t, e, this.locator, null));
      this.opts.delay = isNaN(i) ? Gn : i;
    }

    this.binding.$bind(t, e);
  }

  $unbind(t) {
    var e;
    null === (e = this.task) || void 0 === e ? void 0 : e.cancel();
    this.task = null;
    this.binding.$unbind(t);
  }

}

exports.DebounceBindingBehavior = DebounceBindingBehavior;
(0, _runtime.bindingBehavior)("debounce")(DebounceBindingBehavior);

class SignalBindingBehavior {
  constructor(t) {
    this.Qt = new Map();
    this.Ae = t;
  }

  bind(t, e, i, ...s) {
    if (!("handleChange" in i)) throw new Error("AUR0817");
    if (0 === s.length) throw new Error("AUR0818");
    this.Qt.set(i, s);
    let n;

    for (n of s) this.Ae.addSignalListener(n, i);
  }

  unbind(t, e, i) {
    const s = this.Qt.get(i);
    this.Qt.delete(i);
    let n;

    for (n of s) this.Ae.removeSignalListener(n, i);
  }

}

exports.SignalBindingBehavior = SignalBindingBehavior;
SignalBindingBehavior.inject = [_runtime.ISignaler];
(0, _runtime.bindingBehavior)("signal")(SignalBindingBehavior);
const Xn = 200;

class ThrottleBindingBehavior extends _runtime.BindingInterceptor {
  constructor(t, e) {
    super(t, e);
    this.opts = {
      delay: Xn
    };
    this.firstArg = null;
    this.task = null;
    this.lastCall = 0;
    this.delay = 0;
    this.p = t.locator.get(_kernel.IPlatform);
    this.Se = this.p.taskQueue;
    if (e.args.length > 0) this.firstArg = e.args[0];
  }

  callSource(t) {
    this.Re(() => this.binding.callSource(t));
    return;
  }

  handleChange(t, e, i) {
    if (null !== this.task) {
      this.task.cancel();
      this.task = null;
      this.lastCall = this.p.performanceNow();
    }

    this.binding.handleChange(t, e, i);
  }

  updateSource(t, e) {
    this.Re(() => this.binding.updateSource(t, e));
  }

  Re(t) {
    const e = this.opts;
    const i = this.p;
    const s = this.lastCall + e.delay - i.performanceNow();

    if (s > 0) {
      const n = this.task;
      e.delay = s;
      this.task = this.Se.queueTask(() => {
        this.lastCall = i.performanceNow();
        this.task = null;
        e.delay = this.delay;
        t();
      }, e);
      null === n || void 0 === n ? void 0 : n.cancel();
    } else {
      this.lastCall = i.performanceNow();
      t();
    }
  }

  $bind(t, e) {
    if (null !== this.firstArg) {
      const i = Number(this.firstArg.evaluate(t, e, this.locator, null));
      this.opts.delay = this.delay = isNaN(i) ? Xn : i;
    }

    this.binding.$bind(t, e);
  }

  $unbind(t) {
    var e;
    null === (e = this.task) || void 0 === e ? void 0 : e.cancel();
    this.task = null;
    super.$unbind(t);
  }

}

exports.ThrottleBindingBehavior = ThrottleBindingBehavior;
(0, _runtime.bindingBehavior)("throttle")(ThrottleBindingBehavior);

class DataAttributeAccessor {
  constructor() {
    this.type = 2 | 4;
  }

  getValue(t, e) {
    return t.getAttribute(e);
  }

  setValue(t, e, i, s) {
    if (void 0 == t) i.removeAttribute(s);else i.setAttribute(s, t);
  }

}

exports.DataAttributeAccessor = DataAttributeAccessor;
const Kn = new DataAttributeAccessor();

class AttrBindingBehavior {
  bind(t, e, i) {
    i.targetObserver = Kn;
  }

  unbind(t, e, i) {
    return;
  }

}

exports.AttrBindingBehavior = AttrBindingBehavior;
(0, _runtime.bindingBehavior)("attr")(AttrBindingBehavior);

function Yn(t) {
  const e = t.composedPath()[0];
  if (this.target !== e) return;
  return this.selfEventCallSource(t);
}

class SelfBindingBehavior {
  bind(t, e, i) {
    if (!i.callSource || !i.targetEvent) throw new Error("AUR0801");
    i.selfEventCallSource = i.callSource;
    i.callSource = Yn;
  }

  unbind(t, e, i) {
    i.callSource = i.selfEventCallSource;
    i.selfEventCallSource = null;
  }

}

exports.SelfBindingBehavior = SelfBindingBehavior;
(0, _runtime.bindingBehavior)("self")(SelfBindingBehavior);
const Qn = gt();

class AttributeNSAccessor {
  constructor(t) {
    this.ns = t;
    this.type = 2 | 4;
  }

  static forNs(t) {
    var e;
    return null !== (e = Qn[t]) && void 0 !== e ? e : Qn[t] = new AttributeNSAccessor(t);
  }

  getValue(t, e) {
    return t.getAttributeNS(this.ns, e);
  }

  setValue(t, e, i, s) {
    if (void 0 == t) i.removeAttributeNS(this.ns, s);else i.setAttributeNS(this.ns, s, t);
  }

}

exports.AttributeNSAccessor = AttributeNSAccessor;

function Zn(t, e) {
  return t === e;
}

class CheckedObserver {
  constructor(t, e, i, s) {
    this.handler = i;
    this.type = 2 | 1 | 4;
    this.v = void 0;
    this.ov = void 0;
    this.Ee = void 0;
    this.Be = void 0;
    this.f = 0;
    this.o = t;
    this.oL = s;
  }

  getValue() {
    return this.v;
  }

  setValue(t, e) {
    const i = this.v;
    if (t === i) return;
    this.v = t;
    this.ov = i;
    this.f = e;
    this.Ie();
    this.Te();
    this.queue.add(this);
  }

  handleCollectionChange(t, e) {
    this.Te();
  }

  handleChange(t, e, i) {
    this.Te();
  }

  Te() {
    const t = this.v;
    const e = this.o;
    const i = wt.call(e, "model") ? e.model : e.value;
    const s = "radio" === e.type;
    const n = void 0 !== e.matcher ? e.matcher : Zn;
    if (s) e.checked = !!n(t, i);else if (true === t) e.checked = true;else {
      let s = false;
      if (t instanceof Array) s = -1 !== t.findIndex(t => !!n(t, i));else if (t instanceof Set) {
        for (const e of t) if (n(e, i)) {
          s = true;
          break;
        }
      } else if (t instanceof Map) for (const e of t) {
        const t = e[0];
        const r = e[1];

        if (n(t, i) && true === r) {
          s = true;
          break;
        }
      }
      e.checked = s;
    }
  }

  handleEvent() {
    let t = this.ov = this.v;
    const e = this.o;
    const i = wt.call(e, "model") ? e.model : e.value;
    const s = e.checked;
    const n = void 0 !== e.matcher ? e.matcher : Zn;

    if ("checkbox" === e.type) {
      if (t instanceof Array) {
        const e = t.findIndex(t => !!n(t, i));
        if (s && -1 === e) t.push(i);else if (!s && -1 !== e) t.splice(e, 1);
        return;
      } else if (t instanceof Set) {
        const e = {};
        let r = e;

        for (const e of t) if (true === n(e, i)) {
          r = e;
          break;
        }

        if (s && r === e) t.add(i);else if (!s && r !== e) t.delete(r);
        return;
      } else if (t instanceof Map) {
        let e;

        for (const s of t) {
          const t = s[0];

          if (true === n(t, i)) {
            e = t;
            break;
          }
        }

        t.set(e, s);
        return;
      }

      t = s;
    } else if (s) t = i;else return;

    this.v = t;
    this.queue.add(this);
  }

  start() {
    this.handler.subscribe(this.o, this);
    this.Ie();
  }

  stop() {
    var t, e;
    this.handler.dispose();
    null === (t = this.Ee) || void 0 === t ? void 0 : t.unsubscribe(this);
    this.Ee = void 0;
    null === (e = this.Be) || void 0 === e ? void 0 : e.unsubscribe(this);
  }

  subscribe(t) {
    if (this.subs.add(t) && 1 === this.subs.count) this.start();
  }

  unsubscribe(t) {
    if (this.subs.remove(t) && 0 === this.subs.count) this.stop();
  }

  flush() {
    Jn = this.ov;
    this.ov = this.v;
    this.subs.notify(this.v, Jn, this.f);
  }

  Ie() {
    var t, e, i, s, n, r, o;
    const l = this.o;
    null === (n = null !== (t = this.Be) && void 0 !== t ? t : this.Be = null !== (i = null === (e = l.$observers) || void 0 === e ? void 0 : e.model) && void 0 !== i ? i : null === (s = l.$observers) || void 0 === s ? void 0 : s.value) || void 0 === n ? void 0 : n.subscribe(this);
    null === (r = this.Ee) || void 0 === r ? void 0 : r.unsubscribe(this);
    this.Ee = void 0;
    if ("checkbox" === l.type) null === (o = this.Ee = fr(this.v, this.oL)) || void 0 === o ? void 0 : o.subscribe(this);
  }

}

exports.CheckedObserver = CheckedObserver;
(0, _runtime.subscriberCollection)(CheckedObserver);
(0, _runtime.withFlushQueue)(CheckedObserver);
let Jn;
const tr = Object.prototype.hasOwnProperty;
const er = {
  childList: true,
  subtree: true,
  characterData: true
};

function ir(t, e) {
  return t === e;
}

class SelectValueObserver {
  constructor(t, e, i, s) {
    this.type = 2 | 1 | 4;
    this.v = void 0;
    this.ov = void 0;
    this.W = false;
    this.De = void 0;
    this.Pe = void 0;
    this.iO = false;
    this.o = t;
    this.oL = s;
    this.handler = i;
  }

  getValue() {
    return this.iO ? this.v : this.o.multiple ? sr(this.o.options) : this.o.value;
  }

  setValue(t, e) {
    this.ov = this.v;
    this.v = t;
    this.W = t !== this.ov;
    this.Oe(t instanceof Array ? t : null);
    if (0 === (256 & e)) this.X();
  }

  X() {
    if (this.W) {
      this.W = false;
      this.syncOptions();
    }
  }

  handleCollectionChange() {
    this.syncOptions();
  }

  syncOptions() {
    var t;
    const e = this.v;
    const i = this.o;
    const s = Array.isArray(e);
    const n = null !== (t = i.matcher) && void 0 !== t ? t : ir;
    const r = i.options;
    let o = r.length;

    while (o-- > 0) {
      const t = r[o];
      const i = tr.call(t, "model") ? t.model : t.value;

      if (s) {
        t.selected = -1 !== e.findIndex(t => !!n(i, t));
        continue;
      }

      t.selected = !!n(i, e);
    }
  }

  syncValue() {
    const t = this.o;
    const e = t.options;
    const i = e.length;
    const s = this.v;
    let n = 0;

    if (t.multiple) {
      if (!(s instanceof Array)) return true;
      let r;
      const o = t.matcher || ir;
      const l = [];

      while (n < i) {
        r = e[n];
        if (r.selected) l.push(tr.call(r, "model") ? r.model : r.value);
        ++n;
      }

      let h;
      n = 0;

      while (n < s.length) {
        h = s[n];
        if (-1 === l.findIndex(t => !!o(h, t))) s.splice(n, 1);else ++n;
      }

      n = 0;

      while (n < l.length) {
        h = l[n];
        if (-1 === s.findIndex(t => !!o(h, t))) s.push(h);
        ++n;
      }

      return false;
    }

    let r = null;
    let o;

    while (n < i) {
      o = e[n];

      if (o.selected) {
        r = tr.call(o, "model") ? o.model : o.value;
        break;
      }

      ++n;
    }

    this.ov = this.v;
    this.v = r;
    return true;
  }

  $e() {
    (this.Pe = new this.o.ownerDocument.defaultView.MutationObserver(this.Le.bind(this))).observe(this.o, er);
    this.Oe(this.v instanceof Array ? this.v : null);
    this.iO = true;
  }

  qe() {
    var t;
    this.Pe.disconnect();
    null === (t = this.De) || void 0 === t ? void 0 : t.unsubscribe(this);
    this.Pe = this.De = void 0;
    this.iO = false;
  }

  Oe(t) {
    var e;
    null === (e = this.De) || void 0 === e ? void 0 : e.unsubscribe(this);
    this.De = void 0;

    if (null != t) {
      if (!this.o.multiple) throw new Error("AUR0654");
      (this.De = this.oL.getArrayObserver(t)).subscribe(this);
    }
  }

  handleEvent() {
    const t = this.syncValue();
    if (t) this.queue.add(this);
  }

  Le(t) {
    this.syncOptions();
    const e = this.syncValue();
    if (e) this.queue.add(this);
  }

  subscribe(t) {
    if (this.subs.add(t) && 1 === this.subs.count) {
      this.handler.subscribe(this.o, this);
      this.$e();
    }
  }

  unsubscribe(t) {
    if (this.subs.remove(t) && 0 === this.subs.count) {
      this.handler.dispose();
      this.qe();
    }
  }

  flush() {
    nr = this.ov;
    this.ov = this.v;
    this.subs.notify(this.v, nr, 0);
  }

}

exports.SelectValueObserver = SelectValueObserver;
(0, _runtime.subscriberCollection)(SelectValueObserver);
(0, _runtime.withFlushQueue)(SelectValueObserver);

function sr(t) {
  const e = [];
  if (0 === t.length) return e;
  const i = t.length;
  let s = 0;
  let n;

  while (i > s) {
    n = t[s];
    if (n.selected) e[e.length] = tr.call(n, "model") ? n.model : n.value;
    ++s;
  }

  return e;
}

let nr;
const rr = "--";

class StyleAttributeAccessor {
  constructor(t) {
    this.obj = t;
    this.type = 2 | 4;
    this.value = "";
    this.ov = "";
    this.styles = {};
    this.version = 0;
    this.W = false;
  }

  getValue() {
    return this.obj.style.cssText;
  }

  setValue(t, e) {
    this.value = t;
    this.W = t !== this.ov;
    if (0 === (256 & e)) this.X();
  }

  Me(t) {
    const e = [];
    const i = /url\([^)]+$/;
    let s = 0;
    let n = "";
    let r;
    let o;
    let l;
    let h;

    while (s < t.length) {
      r = t.indexOf(";", s);
      if (-1 === r) r = t.length;
      n += t.substring(s, r);
      s = r + 1;

      if (i.test(n)) {
        n += ";";
        continue;
      }

      o = n.indexOf(":");
      l = n.substring(0, o).trim();
      h = n.substring(o + 1).trim();
      e.push([l, h]);
      n = "";
    }

    return e;
  }

  Ue(t) {
    let e;
    let i;
    const s = [];

    for (i in t) {
      e = t[i];
      if (null == e) continue;

      if (Ct(e)) {
        if (i.startsWith(rr)) {
          s.push([i, e]);
          continue;
        }

        s.push([(0, _kernel.kebabCase)(i), e]);
        continue;
      }

      s.push(...this.Fe(e));
    }

    return s;
  }

  Ve(t) {
    const e = t.length;

    if (e > 0) {
      const i = [];
      let s = 0;

      for (; e > s; ++s) i.push(...this.Fe(t[s]));

      return i;
    }

    return _kernel.emptyArray;
  }

  Fe(t) {
    if (Ct(t)) return this.Me(t);
    if (t instanceof Array) return this.Ve(t);
    if (t instanceof Object) return this.Ue(t);
    return _kernel.emptyArray;
  }

  X() {
    if (this.W) {
      this.W = false;
      const t = this.value;
      const e = this.styles;
      const i = this.Fe(t);
      let s;
      let n = this.version;
      this.ov = t;
      let r;
      let o;
      let l;
      let h = 0;
      const a = i.length;

      for (; h < a; ++h) {
        r = i[h];
        o = r[0];
        l = r[1];
        this.setProperty(o, l);
        e[o] = n;
      }

      this.styles = e;
      this.version += 1;
      if (0 === n) return;
      n -= 1;

      for (s in e) {
        if (!Object.prototype.hasOwnProperty.call(e, s) || e[s] !== n) continue;
        this.obj.style.removeProperty(s);
      }
    }
  }

  setProperty(t, e) {
    let i = "";

    if (null != e && kt(e.indexOf) && e.includes("!important")) {
      i = "important";
      e = e.replace("!important", "");
    }

    this.obj.style.setProperty(t, e, i);
  }

  bind(t) {
    this.value = this.ov = this.obj.style.cssText;
  }

}

exports.StyleAttributeAccessor = StyleAttributeAccessor;

class ValueAttributeObserver {
  constructor(t, e, i) {
    this.handler = i;
    this.type = 2 | 1 | 4;
    this.v = "";
    this.ov = "";
    this.W = false;
    this.o = t;
    this.k = e;
  }

  getValue() {
    return this.v;
  }

  setValue(t, e) {
    if (Object.is(t, this.v)) return;
    this.ov = this.v;
    this.v = t;
    this.W = true;
    if (!this.handler.config.readonly && 0 === (256 & e)) this.X(e);
  }

  X(t) {
    var e;

    if (this.W) {
      this.W = false;
      this.o[this.k] = null !== (e = this.v) && void 0 !== e ? e : this.handler.config.default;
      if (0 === (2 & t)) this.queue.add(this);
    }
  }

  handleEvent() {
    this.ov = this.v;
    this.v = this.o[this.k];

    if (this.ov !== this.v) {
      this.W = false;
      this.queue.add(this);
    }
  }

  subscribe(t) {
    if (this.subs.add(t) && 1 === this.subs.count) {
      this.handler.subscribe(this.o, this);
      this.v = this.ov = this.o[this.k];
    }
  }

  unsubscribe(t) {
    if (this.subs.remove(t) && 0 === this.subs.count) this.handler.dispose();
  }

  flush() {
    or = this.ov;
    this.ov = this.v;
    this.subs.notify(this.v, or, 0);
  }

}

exports.ValueAttributeObserver = ValueAttributeObserver;
(0, _runtime.subscriberCollection)(ValueAttributeObserver);
(0, _runtime.withFlushQueue)(ValueAttributeObserver);
let or;
const lr = "http://www.w3.org/1999/xlink";
const hr = "http://www.w3.org/XML/1998/namespace";
const ar = "http://www.w3.org/2000/xmlns/";
const cr = Object.assign(gt(), {
  "xlink:actuate": ["actuate", lr],
  "xlink:arcrole": ["arcrole", lr],
  "xlink:href": ["href", lr],
  "xlink:role": ["role", lr],
  "xlink:show": ["show", lr],
  "xlink:title": ["title", lr],
  "xlink:type": ["type", lr],
  "xml:lang": ["lang", hr],
  "xml:space": ["space", hr],
  xmlns: ["xmlns", ar],
  "xmlns:xlink": ["xlink", ar]
});
const ur = new _runtime.PropertyAccessor();
ur.type = 2 | 4;

class NodeObserverConfig {
  constructor(t) {
    var e;
    this.type = null !== (e = t.type) && void 0 !== e ? e : ValueAttributeObserver;
    this.events = t.events;
    this.readonly = t.readonly;
    this.default = t.default;
  }

}

exports.NodeObserverConfig = NodeObserverConfig;

class NodeObserverLocator {
  constructor(t, e, i, s) {
    this.locator = t;
    this.platform = e;
    this.dirtyChecker = i;
    this.svgAnalyzer = s;
    this.allowDirtyCheck = true;
    this._e = gt();
    this.je = gt();
    this.Ne = gt();
    this.We = gt();
    const n = ["change", "input"];
    const r = {
      events: n,
      default: ""
    };
    this.useConfig({
      INPUT: {
        value: r,
        valueAsNumber: {
          events: n,
          default: 0
        },
        checked: {
          type: CheckedObserver,
          events: n
        },
        files: {
          events: n,
          readonly: true
        }
      },
      SELECT: {
        value: {
          type: SelectValueObserver,
          events: ["change"],
          default: ""
        }
      },
      TEXTAREA: {
        value: r
      }
    });
    const o = {
      events: ["change", "input", "blur", "keyup", "paste"],
      default: ""
    };
    const l = {
      events: ["scroll"],
      default: 0
    };
    this.useConfigGlobal({
      scrollTop: l,
      scrollLeft: l,
      textContent: o,
      innerHTML: o
    });
    this.overrideAccessorGlobal("css", "style", "class");
    this.overrideAccessor({
      INPUT: ["value", "checked", "model"],
      SELECT: ["value"],
      TEXTAREA: ["value"]
    });
  }

  static register(t) {
    _kernel.Registration.aliasTo(_runtime.INodeObserverLocator, NodeObserverLocator).register(t);

    _kernel.Registration.singleton(_runtime.INodeObserverLocator, NodeObserverLocator).register(t);
  }

  handles(t, e) {
    return t instanceof this.platform.Node;
  }

  useConfig(t, e, i) {
    var s, n;
    const r = this._e;
    let o;

    if (Ct(t)) {
      o = null !== (s = r[t]) && void 0 !== s ? s : r[t] = gt();
      if (null == o[e]) o[e] = new NodeObserverConfig(i);else dr(t, e);
    } else for (const i in t) {
      o = null !== (n = r[i]) && void 0 !== n ? n : r[i] = gt();
      const s = t[i];

      for (e in s) if (null == o[e]) o[e] = new NodeObserverConfig(s[e]);else dr(i, e);
    }
  }

  useConfigGlobal(t, e) {
    const i = this.je;
    if ("object" === typeof t) {
      for (const e in t) if (null == i[e]) i[e] = new NodeObserverConfig(t[e]);else dr("*", e);
    } else if (null == i[t]) i[t] = new NodeObserverConfig(e);else dr("*", t);
  }

  getAccessor(t, e, i) {
    var s;
    if (e in this.We || e in (null !== (s = this.Ne[t.tagName]) && void 0 !== s ? s : _kernel.emptyObject)) return this.getObserver(t, e, i);

    switch (e) {
      case "src":
      case "href":
      case "role":
        return Kn;

      default:
        {
          const i = cr[e];
          if (void 0 !== i) return AttributeNSAccessor.forNs(i[1]);
          if (xt(t, e, this.svgAnalyzer)) return Kn;
          return ur;
        }
    }
  }

  overrideAccessor(t, e) {
    var i, s;
    var n, r;
    let o;

    if (Ct(t)) {
      o = null !== (i = (n = this.Ne)[t]) && void 0 !== i ? i : n[t] = gt();
      o[e] = true;
    } else for (const e in t) for (const i of t[e]) {
      o = null !== (s = (r = this.Ne)[e]) && void 0 !== s ? s : r[e] = gt();
      o[i] = true;
    }
  }

  overrideAccessorGlobal(...t) {
    for (const e of t) this.We[e] = true;
  }

  getObserver(t, e, i) {
    var s, n;

    switch (e) {
      case "role":
        return Kn;

      case "class":
        return new ClassAttributeAccessor(t);

      case "css":
      case "style":
        return new StyleAttributeAccessor(t);
    }

    const r = null !== (n = null === (s = this._e[t.tagName]) || void 0 === s ? void 0 : s[e]) && void 0 !== n ? n : this.je[e];
    if (null != r) return new r.type(t, e, new EventSubscriber(r), i, this.locator);
    const o = cr[e];
    if (void 0 !== o) return AttributeNSAccessor.forNs(o[1]);
    if (xt(t, e, this.svgAnalyzer)) return Kn;

    if (e in t.constructor.prototype) {
      if (this.allowDirtyCheck) return this.dirtyChecker.createProperty(t, e);
      throw new Error(`AUR0652:${String(e)}`);
    } else return new _runtime.SetterObserver(t, e);
  }

}

exports.NodeObserverLocator = NodeObserverLocator;
NodeObserverLocator.inject = [_kernel.IServiceLocator, Wt, _runtime.IDirtyChecker, Ht];

function fr(t, e) {
  if (t instanceof Array) return e.getArrayObserver(t);
  if (t instanceof Map) return e.getMapObserver(t);
  if (t instanceof Set) return e.getSetObserver(t);
}

function dr(t, e) {
  throw new Error(`AUR0653:${String(e)}@${t}`);
}

class UpdateTriggerBindingBehavior {
  constructor(t) {
    this.oL = t;
  }

  bind(t, e, i, ...s) {
    if (0 === s.length) throw new Error(`AUR0802`);
    if (i.mode !== _runtime.BindingMode.twoWay && i.mode !== _runtime.BindingMode.fromView) throw new Error("AUR0803");
    const n = this.oL.getObserver(i.target, i.targetProperty);
    if (!n.handler) throw new Error("AUR0804");
    i.targetObserver = n;
    const r = n.handler;
    n.originalHandler = r;
    n.handler = new EventSubscriber(new NodeObserverConfig({
      default: r.config.default,
      events: s,
      readonly: r.config.readonly
    }));
  }

  unbind(t, e, i) {
    i.targetObserver.handler.dispose();
    i.targetObserver.handler = i.targetObserver.originalHandler;
    i.targetObserver.originalHandler = null;
  }

}

exports.UpdateTriggerBindingBehavior = UpdateTriggerBindingBehavior;
UpdateTriggerBindingBehavior.inject = [_runtime.IObserverLocator];
(0, _runtime.bindingBehavior)("updateTrigger")(UpdateTriggerBindingBehavior);

class Focus {
  constructor(t, e) {
    this.He = t;
    this.p = e;
    this.ze = false;
  }

  binding() {
    this.valueChanged();
  }

  valueChanged() {
    if (this.$controller.isActive) this.Ge();else this.ze = true;
  }

  attached() {
    if (this.ze) {
      this.ze = false;
      this.Ge();
    }

    this.He.addEventListener("focus", this);
    this.He.addEventListener("blur", this);
  }

  afterDetachChildren() {
    const t = this.He;
    t.removeEventListener("focus", this);
    t.removeEventListener("blur", this);
  }

  handleEvent(t) {
    if ("focus" === t.type) this.value = true;else if (!this.Xe) this.value = false;
  }

  Ge() {
    const t = this.He;
    const e = this.Xe;
    const i = this.value;
    if (i && !e) t.focus();else if (!i && e) t.blur();
  }

  get Xe() {
    return this.He === this.p.document.activeElement;
  }

}

exports.Focus = Focus;
Focus.inject = [Ji, Wt];
rt([At({
  mode: _runtime.BindingMode.twoWay
})], Focus.prototype, "value", void 0);
Ee("focus")(Focus);
let mr = class Show {
  constructor(t, e, i) {
    this.el = t;
    this.p = e;
    this.Ke = false;
    this.Ye = null;
    this.$val = "";
    this.$prio = "";

    this.update = () => {
      this.Ye = null;
      if (Boolean(this.value) !== this.Qe) if (this.Qe === this.Ze) {
        this.Qe = !this.Ze;
        this.$val = this.el.style.getPropertyValue("display");
        this.$prio = this.el.style.getPropertyPriority("display");
        this.el.style.setProperty("display", "none", "important");
      } else {
        this.Qe = this.Ze;
        this.el.style.setProperty("display", this.$val, this.$prio);
        if ("" === this.el.getAttribute("style")) this.el.removeAttribute("style");
      }
    };

    this.Qe = this.Ze = "hide" !== i.alias;
  }

  binding() {
    this.Ke = true;
    this.update();
  }

  detaching() {
    var t;
    this.Ke = false;
    null === (t = this.Ye) || void 0 === t ? void 0 : t.cancel();
    this.Ye = null;
  }

  valueChanged() {
    if (this.Ke && null === this.Ye) this.Ye = this.p.domWriteQueue.queueTask(this.update);
  }

};
rt([At], mr.prototype, "value", void 0);
mr = rt([ot(0, Ji), ot(1, Wt), ot(2, gs)], mr);
(0, _runtime.alias)("hide")(mr);
Ee("show")(mr);

class Portal {
  constructor(t, e, i) {
    this.id = (0, _kernel.nextId)("au$component");
    this.strict = false;
    this.p = i;
    this.Je = i.document.createElement("div");
    this.view = t.create();
    rs(this.view.nodes, e);
  }

  attaching(t, e, i) {
    if (null == this.callbackContext) this.callbackContext = this.$controller.scope.bindingContext;
    const s = this.Je = this.ti();
    this.view.setHost(s);
    return this.ei(t, s, i);
  }

  detaching(t, e, i) {
    return this.ii(t, this.Je, i);
  }

  targetChanged() {
    const {
      $controller: t
    } = this;
    if (!t.isActive) return;
    const e = this.Je;
    const i = this.Je = this.ti();
    if (e === i) return;
    this.view.setHost(i);
    const s = (0, _kernel.onResolve)(this.ii(null, i, t.flags), () => this.ei(null, i, t.flags));
    if (s instanceof Promise) s.catch(t => {
      throw t;
    });
  }

  ei(t, e, i) {
    const {
      activating: s,
      callbackContext: n,
      view: r
    } = this;
    r.setHost(e);
    return (0, _kernel.onResolve)(null === s || void 0 === s ? void 0 : s.call(n, e, r), () => this.si(t, e, i));
  }

  si(t, e, i) {
    const {
      $controller: s,
      view: n
    } = this;
    if (null === t) n.nodes.appendTo(e);else return (0, _kernel.onResolve)(n.activate(null !== t && void 0 !== t ? t : n, s, i, s.scope), () => this.ni(e));
    return this.ni(e);
  }

  ni(t) {
    const {
      activated: e,
      callbackContext: i,
      view: s
    } = this;
    return null === e || void 0 === e ? void 0 : e.call(i, t, s);
  }

  ii(t, e, i) {
    const {
      deactivating: s,
      callbackContext: n,
      view: r
    } = this;
    return (0, _kernel.onResolve)(null === s || void 0 === s ? void 0 : s.call(n, e, r), () => this.ri(t, e, i));
  }

  ri(t, e, i) {
    const {
      $controller: s,
      view: n
    } = this;
    if (null === t) n.nodes.remove();else return (0, _kernel.onResolve)(n.deactivate(t, s, i), () => this.oi(e));
    return this.oi(e);
  }

  oi(t) {
    const {
      deactivated: e,
      callbackContext: i,
      view: s
    } = this;
    return null === e || void 0 === e ? void 0 : e.call(i, t, s);
  }

  ti() {
    const t = this.p;
    const e = t.document;
    let i = this.target;
    let s = this.renderContext;

    if ("" === i) {
      if (this.strict) throw new Error("AUR0811");
      return e.body;
    }

    if (Ct(i)) {
      let n = e;
      if (Ct(s)) s = e.querySelector(s);
      if (s instanceof t.Node) n = s;
      i = n.querySelector(i);
    }

    if (i instanceof t.Node) return i;

    if (null == i) {
      if (this.strict) throw new Error("AUR0812");
      return e.body;
    }

    return i;
  }

  dispose() {
    this.view.dispose();
    this.view = void 0;
    this.callbackContext = null;
  }

  accept(t) {
    var e;
    if (true === (null === (e = this.view) || void 0 === e ? void 0 : e.accept(t))) return true;
  }

}

exports.Portal = Portal;
Portal.inject = [bi, es, Wt];
rt([At({
  primary: true
})], Portal.prototype, "target", void 0);
rt([At({
  callback: "targetChanged"
})], Portal.prototype, "renderContext", void 0);
rt([At()], Portal.prototype, "strict", void 0);
rt([At()], Portal.prototype, "deactivating", void 0);
rt([At()], Portal.prototype, "activating", void 0);
rt([At()], Portal.prototype, "deactivated", void 0);
rt([At()], Portal.prototype, "activated", void 0);
rt([At()], Portal.prototype, "callbackContext", void 0);
Be("portal")(Portal);

class FlagsTemplateController {
  constructor(t, e, i) {
    this.fs = i;
    this.id = (0, _kernel.nextId)("au$component");
    this.view = t.create().setLocation(e);
  }

  attaching(t, e, i) {
    const {
      $controller: s
    } = this;
    return this.view.activate(t, s, i | this.fs, s.scope);
  }

  detaching(t, e, i) {
    return this.view.deactivate(t, this.$controller, i);
  }

  dispose() {
    this.view.dispose();
    this.view = void 0;
  }

  accept(t) {
    var e;
    if (true === (null === (e = this.view) || void 0 === e ? void 0 : e.accept(t))) return true;
  }

}

class FrequentMutations extends FlagsTemplateController {
  constructor(t, e) {
    super(t, e, 512);
  }

}

exports.FrequentMutations = FrequentMutations;
FrequentMutations.inject = [bi, es];

class ObserveShallow extends FlagsTemplateController {
  constructor(t, e) {
    super(t, e, 128);
  }

}

exports.ObserveShallow = ObserveShallow;
ObserveShallow.inject = [bi, es];
Be("frequent-mutations")(FrequentMutations);
Be("observe-shallow")(ObserveShallow);

class If {
  constructor(t, e, i) {
    this.ifFactory = t;
    this.location = e;
    this.work = i;
    this.id = (0, _kernel.nextId)("au$component");
    this.elseFactory = void 0;
    this.elseView = void 0;
    this.ifView = void 0;
    this.view = void 0;
    this.value = false;
    this.cache = true;
    this.pending = void 0;
    this.li = false;
    this.hi = 0;
  }

  attaching(t, e, i) {
    let s;
    const n = this.$controller;
    const r = this.hi++;

    const o = () => !this.li && this.hi === r + 1;

    return (0, _kernel.onResolve)(this.pending, () => {
      var e;
      if (!o()) return;
      this.pending = void 0;
      if (this.value) s = this.view = this.ifView = this.cache && null != this.ifView ? this.ifView : this.ifFactory.create();else s = this.view = this.elseView = this.cache && null != this.elseView ? this.elseView : null === (e = this.elseFactory) || void 0 === e ? void 0 : e.create();
      if (null == s) return;
      s.setLocation(this.location);
      this.pending = (0, _kernel.onResolve)(s.activate(t, n, i, n.scope), () => {
        if (o()) this.pending = void 0;
      });
    });
  }

  detaching(t, e, i) {
    this.li = true;
    return (0, _kernel.onResolve)(this.pending, () => {
      var e;
      this.li = false;
      this.pending = void 0;
      void (null === (e = this.view) || void 0 === e ? void 0 : e.deactivate(t, this.$controller, i));
    });
  }

  valueChanged(t, e, i) {
    if (!this.$controller.isActive) return;
    t = !!t;
    e = !!e;
    if (t === e) return;
    this.work.start();
    const s = this.view;
    const n = this.$controller;
    const r = this.hi++;

    const o = () => !this.li && this.hi === r + 1;

    let l;
    return (0, _kernel.onResolve)((0, _kernel.onResolve)(this.pending, () => this.pending = (0, _kernel.onResolve)(null === s || void 0 === s ? void 0 : s.deactivate(s, n, i), () => {
      var e;
      if (!o()) return;
      if (t) l = this.view = this.ifView = this.cache && null != this.ifView ? this.ifView : this.ifFactory.create();else l = this.view = this.elseView = this.cache && null != this.elseView ? this.elseView : null === (e = this.elseFactory) || void 0 === e ? void 0 : e.create();
      if (null == l) return;
      l.setLocation(this.location);
      return (0, _kernel.onResolve)(l.activate(l, n, i, n.scope), () => {
        if (o()) this.pending = void 0;
      });
    })), () => this.work.finish());
  }

  dispose() {
    var t, e;
    null === (t = this.ifView) || void 0 === t ? void 0 : t.dispose();
    null === (e = this.elseView) || void 0 === e ? void 0 : e.dispose();
    this.ifView = this.elseView = this.view = void 0;
  }

  accept(t) {
    var e;
    if (true === (null === (e = this.view) || void 0 === e ? void 0 : e.accept(t))) return true;
  }

}

exports.If = If;
If.inject = [bi, es, Yi];
rt([At], If.prototype, "value", void 0);
rt([At({
  set: t => "" === t || !!t && "false" !== t
})], If.prototype, "cache", void 0);
Be("if")(If);

class Else {
  constructor(t) {
    this.factory = t;
    this.id = (0, _kernel.nextId)("au$component");
  }

  link(t, e, i, s) {
    const n = t.children;
    const r = n[n.length - 1];
    if (r instanceof If) r.elseFactory = this.factory;else if (r.viewModel instanceof If) r.viewModel.elseFactory = this.factory;else throw new Error("AUR0810");
  }

}

exports.Else = Else;
Else.inject = [bi];
Be({
  name: "else"
})(Else);

function vr(t) {
  t.dispose();
}

const pr = [38962, 36913];

class Repeat {
  constructor(t, e, i) {
    this.l = t;
    this.ai = e;
    this.f = i;
    this.id = (0, _kernel.nextId)("au$component");
    this.views = [];
    this.key = void 0;
    this.ui = void 0;
    this.fi = false;
    this.di = false;
    this.mi = null;
    this.vi = void 0;
    this.pi = false;
  }

  binding(t, e, i) {
    const s = this.ai.bindings;
    const n = s.length;
    let r;
    let o;
    let l = 0;

    for (; n > l; ++l) {
      r = s[l];

      if (r.target === this && "items" === r.targetProperty) {
        o = this.forOf = r.sourceExpression;
        this.gi = r;
        let t = o.iterable;

        while (null != t && pr.includes(t.$kind)) {
          t = t.expression;
          this.fi = true;
        }

        this.mi = t;
        break;
      }
    }

    this.wi(i);
    const h = o.declaration;
    if (!(this.pi = 90137 === h.$kind || 106521 === h.$kind)) this.local = h.evaluate(i, this.$controller.scope, r.locator, null);
  }

  attaching(t, e, i) {
    this.bi(i);
    return this.xi(t, i);
  }

  detaching(t, e, i) {
    this.wi(i);
    return this.yi(t, i);
  }

  itemsChanged(t) {
    const {
      $controller: e
    } = this;
    if (!e.isActive) return;
    t |= e.flags;
    this.wi(t);
    this.bi(t);
    const i = (0, _kernel.onResolve)(this.yi(null, t), () => this.xi(null, t));
    if (i instanceof Promise) i.catch(t => {
      throw t;
    });
  }

  handleCollectionChange(t, e) {
    const {
      $controller: i
    } = this;
    if (!i.isActive) return;

    if (this.fi) {
      if (this.di) return;
      this.di = true;
      this.items = this.forOf.iterable.evaluate(e, i.scope, this.gi.locator, null);
      this.di = false;
      return;
    }

    e |= i.flags;
    this.bi(e);

    if (void 0 === t) {
      const t = (0, _kernel.onResolve)(this.yi(null, e), () => this.xi(null, e));
      if (t instanceof Promise) t.catch(t => {
        throw t;
      });
    } else {
      const i = this.views.length;
      (0, _runtime.applyMutationsToIndices)(t);

      if (t.deletedItems.length > 0) {
        t.deletedItems.sort(_kernel.compareNumber);
        const s = (0, _kernel.onResolve)(this.ki(t, e), () => this.Ci(i, t, e));
        if (s instanceof Promise) s.catch(t => {
          throw t;
        });
      } else this.Ci(i, t, e);
    }
  }

  wi(t) {
    var e;
    const i = this.$controller.scope;
    let s = this.Ai;
    let n = this.fi;

    if (n) {
      s = this.Ai = null !== (e = this.mi.evaluate(t, i, this.gi.locator, null)) && void 0 !== e ? e : null;
      n = this.fi = !Object.is(this.items, s);
    }

    const r = this.ui;

    if (4 & t) {
      if (void 0 !== r) r.unsubscribe(this);
    } else if (this.$controller.isActive) {
      const t = this.ui = (0, _runtime.getCollectionObserver)(n ? s : this.items);
      if (r !== t && r) r.unsubscribe(this);
      if (t) t.subscribe(this);
    }
  }

  bi(t) {
    const e = this.items;

    if (e instanceof Array) {
      this.vi = e;
      return;
    }

    const i = this.forOf;
    if (void 0 === i) return;
    const s = [];
    this.forOf.iterate(t, e, (t, e, i) => {
      s[e] = i;
    });
    this.vi = s;
  }

  xi(t, e) {
    let i;
    let s;
    let n;
    let r;
    const {
      $controller: o,
      f: l,
      local: h,
      l: a,
      items: c
    } = this;
    const u = o.scope;
    const f = this.forOf;
    const d = f.count(e, c);
    const m = this.views = Array(d);
    f.iterate(e, c, (c, v, p) => {
      n = m[v] = l.create().setLocation(a);
      n.nodes.unlink();
      if (this.pi) f.declaration.assign(e, r = _runtime.Scope.fromParent(u, _runtime.BindingContext.create()), this.gi.locator, p);else r = _runtime.Scope.fromParent(u, _runtime.BindingContext.create(h, p));
      yr(r.overrideContext, v, d);
      s = n.activate(null !== t && void 0 !== t ? t : n, o, e, r);
      if (s instanceof Promise) (null !== i && void 0 !== i ? i : i = []).push(s);
    });
    if (void 0 !== i) return 1 === i.length ? i[0] : Promise.all(i);
  }

  yi(t, e) {
    let i;
    let s;
    let n;
    let r = 0;
    const {
      views: o,
      $controller: l
    } = this;
    const h = o.length;

    for (; h > r; ++r) {
      n = o[r];
      n.release();
      s = n.deactivate(null !== t && void 0 !== t ? t : n, l, e);
      if (s instanceof Promise) (null !== i && void 0 !== i ? i : i = []).push(s);
    }

    if (void 0 !== i) return 1 === i.length ? i[0] : Promise.all(i);
  }

  ki(t, e) {
    let i;
    let s;
    let n;
    const {
      $controller: r,
      views: o
    } = this;
    const l = t.deletedItems;
    const h = l.length;
    let a = 0;

    for (; h > a; ++a) {
      n = o[l[a]];
      n.release();
      s = n.deactivate(n, r, e);
      if (s instanceof Promise) (null !== i && void 0 !== i ? i : i = []).push(s);
    }

    a = 0;
    let c = 0;

    for (; h > a; ++a) {
      c = l[a] - a;
      o.splice(c, 1);
    }

    if (void 0 !== i) return 1 === i.length ? i[0] : Promise.all(i);
  }

  Ci(t, e, i) {
    var s;
    let n;
    let r;
    let o;
    let l;
    let h = 0;
    const {
      $controller: a,
      f: c,
      local: u,
      vi: f,
      l: d,
      views: m
    } = this;
    const v = e.length;

    for (; v > h; ++h) if (-2 === e[h]) {
      o = c.create();
      m.splice(h, 0, o);
    }

    if (m.length !== v) throw new Error(`AUR0814:${m.length}!=${v}`);
    const p = a.scope;
    const g = e.length;
    (0, _runtime.synchronizeIndices)(m, e);
    const w = xr(e);
    const b = w.length;
    let x;
    let y = b - 1;
    h = g - 1;

    for (; h >= 0; --h) {
      o = m[h];
      x = m[h + 1];
      o.nodes.link(null !== (s = null === x || void 0 === x ? void 0 : x.nodes) && void 0 !== s ? s : d);

      if (-2 === e[h]) {
        if (this.pi) this.forOf.declaration.assign(i, l = _runtime.Scope.fromParent(p, _runtime.BindingContext.create()), this.gi.locator, f[h]);else l = _runtime.Scope.fromParent(p, _runtime.BindingContext.create(u, f[h]));
        yr(l.overrideContext, h, g);
        o.setLocation(d);
        r = o.activate(o, a, i, l);
        if (r instanceof Promise) (null !== n && void 0 !== n ? n : n = []).push(r);
      } else if (y < 0 || 1 === b || h !== w[y]) {
        yr(o.scope.overrideContext, h, g);
        o.nodes.insertBefore(o.location);
      } else {
        if (t !== g) yr(o.scope.overrideContext, h, g);
        --y;
      }
    }

    if (void 0 !== n) return 1 === n.length ? n[0] : Promise.all(n);
  }

  dispose() {
    this.views.forEach(vr);
    this.views = void 0;
  }

  accept(t) {
    const {
      views: e
    } = this;
    if (void 0 !== e) for (let i = 0, s = e.length; i < s; ++i) if (true === e[i].accept(t)) return true;
  }

}

exports.Repeat = Repeat;
Repeat.inject = [es, Ni, bi];
rt([At], Repeat.prototype, "items", void 0);
Be("repeat")(Repeat);
let gr = 16;
let wr = new Int32Array(gr);
let br = new Int32Array(gr);

function xr(t) {
  const e = t.length;

  if (e > gr) {
    gr = e;
    wr = new Int32Array(e);
    br = new Int32Array(e);
  }

  let i = 0;
  let s = 0;
  let n = 0;
  let r = 0;
  let o = 0;
  let l = 0;
  let h = 0;
  let a = 0;

  for (; r < e; r++) {
    s = t[r];

    if (-2 !== s) {
      o = wr[i];
      n = t[o];

      if (-2 !== n && n < s) {
        br[r] = o;
        wr[++i] = r;
        continue;
      }

      l = 0;
      h = i;

      while (l < h) {
        a = l + h >> 1;
        n = t[wr[a]];
        if (-2 !== n && n < s) l = a + 1;else h = a;
      }

      n = t[wr[l]];

      if (s < n || -2 === n) {
        if (l > 0) br[r] = wr[l - 1];
        wr[l] = r;
      }
    }
  }

  r = ++i;
  const c = new Int32Array(r);
  s = wr[i - 1];

  while (i-- > 0) {
    c[i] = s;
    s = br[s];
  }

  while (r-- > 0) wr[r] = 0;

  return c;
}

function yr(t, e, i) {
  const s = 0 === e;
  const n = e === i - 1;
  const r = e % 2 === 0;
  t.$index = e;
  t.$first = s;
  t.$last = n;
  t.$middle = !s && !n;
  t.$even = r;
  t.$odd = !r;
  t.$length = i;
}

class With {
  constructor(t, e) {
    this.id = (0, _kernel.nextId)("au$component");
    this.id = (0, _kernel.nextId)("au$component");
    this.view = t.create().setLocation(e);
  }

  valueChanged(t, e, i) {
    const s = this.$controller;
    const n = this.view.bindings;
    let r;
    let o = 0,
        l = 0;

    if (s.isActive && null != n) {
      r = _runtime.Scope.fromParent(s.scope, void 0 === t ? {} : t);

      for (l = n.length; l > o; ++o) n[o].$bind(2, r);
    }
  }

  attaching(t, e, i) {
    const {
      $controller: s,
      value: n
    } = this;

    const r = _runtime.Scope.fromParent(s.scope, void 0 === n ? {} : n);

    return this.view.activate(t, s, i, r);
  }

  detaching(t, e, i) {
    return this.view.deactivate(t, this.$controller, i);
  }

  dispose() {
    this.view.dispose();
    this.view = void 0;
  }

  accept(t) {
    var e;
    if (true === (null === (e = this.view) || void 0 === e ? void 0 : e.accept(t))) return true;
  }

}

exports.With = With;
With.inject = [bi, es];
rt([At], With.prototype, "value", void 0);
Be("with")(With);
let kr = class Switch {
  constructor(t, e) {
    this.f = t;
    this.l = e;
    this.id = (0, _kernel.nextId)("au$component");
    this.cases = [];
    this.activeCases = [];
    this.promise = void 0;
  }

  link(t, e, i, s) {
    this.view = this.f.create(this.$controller).setLocation(this.l);
  }

  attaching(t, e, i) {
    const s = this.view;
    const n = this.$controller;
    this.queue(() => s.activate(t, n, i, n.scope));
    this.queue(() => this.swap(t, i, this.value));
    return this.promise;
  }

  detaching(t, e, i) {
    this.queue(() => {
      const e = this.view;
      return e.deactivate(t, this.$controller, i);
    });
    return this.promise;
  }

  dispose() {
    var t;
    null === (t = this.view) || void 0 === t ? void 0 : t.dispose();
    this.view = void 0;
  }

  valueChanged(t, e, i) {
    if (!this.$controller.isActive) return;
    this.queue(() => this.swap(null, i, this.value));
  }

  caseChanged(t, e) {
    this.queue(() => this.Si(t, e));
  }

  Si(t, e) {
    const i = t.isMatch(this.value, e);
    const s = this.activeCases;
    const n = s.length;

    if (!i) {
      if (n > 0 && s[0].id === t.id) return this.Ri(null, e);
      return;
    }

    if (n > 0 && s[0].id < t.id) return;
    const r = [];
    let o = t.fallThrough;
    if (!o) r.push(t);else {
      const e = this.cases;
      const i = e.indexOf(t);

      for (let t = i, s = e.length; t < s && o; t++) {
        const i = e[t];
        r.push(i);
        o = i.fallThrough;
      }
    }
    return (0, _kernel.onResolve)(this.Ri(null, e, r), () => {
      this.activeCases = r;
      return this.Ei(null, e);
    });
  }

  swap(t, e, i) {
    const s = [];
    let n = false;

    for (const t of this.cases) {
      if (n || t.isMatch(i, e)) {
        s.push(t);
        n = t.fallThrough;
      }

      if (s.length > 0 && !n) break;
    }

    const r = this.defaultCase;
    if (0 === s.length && void 0 !== r) s.push(r);
    return (0, _kernel.onResolve)(this.activeCases.length > 0 ? this.Ri(t, e, s) : void 0, () => {
      this.activeCases = s;
      if (0 === s.length) return;
      return this.Ei(t, e);
    });
  }

  Ei(t, e) {
    const i = this.$controller;
    if (!i.isActive) return;
    const s = this.activeCases;
    const n = s.length;
    if (0 === n) return;
    const r = i.scope;
    if (1 === n) return s[0].activate(t, e, r);
    return (0, _kernel.resolveAll)(...s.map(i => i.activate(t, e, r)));
  }

  Ri(t, e, i = []) {
    const s = this.activeCases;
    const n = s.length;
    if (0 === n) return;

    if (1 === n) {
      const n = s[0];

      if (!i.includes(n)) {
        s.length = 0;
        return n.deactivate(t, e);
      }

      return;
    }

    return (0, _kernel.onResolve)((0, _kernel.resolveAll)(...s.reduce((s, n) => {
      if (!i.includes(n)) s.push(n.deactivate(t, e));
      return s;
    }, [])), () => {
      s.length = 0;
    });
  }

  queue(t) {
    const e = this.promise;
    let i;
    i = this.promise = (0, _kernel.onResolve)((0, _kernel.onResolve)(e, t), () => {
      if (this.promise === i) this.promise = void 0;
    });
  }

  accept(t) {
    if (true === this.$controller.accept(t)) return true;
    if (this.activeCases.some(e => e.accept(t))) return true;
  }

};
exports.Switch = kr;
rt([At], kr.prototype, "value", void 0);
exports.Switch = kr = rt([Be("switch"), ot(0, bi), ot(1, es)], kr);
let Cr = class Case {
  constructor(t, e, i, s) {
    this.Bi = e;
    this.id = (0, _kernel.nextId)("au$component");
    this.fallThrough = false;
    this.Ii = s.config.level <= 1;
    this.Ut = s.scopeTo(`${this.constructor.name}-#${this.id}`);
    this.view = t.create().setLocation(i);
  }

  link(t, e, i, s) {
    const n = t.parent;
    const r = null === n || void 0 === n ? void 0 : n.viewModel;

    if (r instanceof kr) {
      this.$switch = r;
      this.linkToSwitch(r);
    } else throw new Error("AUR0815");
  }

  detaching(t, e, i) {
    return this.deactivate(t, i);
  }

  isMatch(t, e) {
    this.Ut.debug("isMatch()");
    const i = this.value;

    if (Array.isArray(i)) {
      if (void 0 === this.ui) this.ui = this.Ti(e, i);
      return i.includes(t);
    }

    return i === t;
  }

  valueChanged(t, e, i) {
    var s;

    if (Array.isArray(t)) {
      null === (s = this.ui) || void 0 === s ? void 0 : s.unsubscribe(this);
      this.ui = this.Ti(i, t);
    } else if (void 0 !== this.ui) this.ui.unsubscribe(this);

    this.$switch.caseChanged(this, i);
  }

  handleCollectionChange(t, e) {
    this.$switch.caseChanged(this, e);
  }

  activate(t, e, i) {
    const s = this.view;
    if (s.isActive) return;
    return s.activate(null !== t && void 0 !== t ? t : s, this.$controller, e, i);
  }

  deactivate(t, e) {
    const i = this.view;
    if (!i.isActive) return;
    return i.deactivate(null !== t && void 0 !== t ? t : i, this.$controller, e);
  }

  dispose() {
    var t, e;
    null === (t = this.ui) || void 0 === t ? void 0 : t.unsubscribe(this);
    null === (e = this.view) || void 0 === e ? void 0 : e.dispose();
    this.view = void 0;
  }

  linkToSwitch(t) {
    t.cases.push(this);
  }

  Ti(t, e) {
    const i = this.Bi.getArrayObserver(e);
    i.subscribe(this);
    return i;
  }

  accept(t) {
    var e;
    if (true === this.$controller.accept(t)) return true;
    return null === (e = this.view) || void 0 === e ? void 0 : e.accept(t);
  }

};
exports.Case = Cr;
Cr.inject = [bi, _runtime.IObserverLocator, es, _kernel.ILogger];
rt([At], Cr.prototype, "value", void 0);
rt([At({
  set: t => {
    switch (t) {
      case "true":
        return true;

      case "false":
        return false;

      default:
        return !!t;
    }
  },
  mode: _runtime.BindingMode.oneTime
})], Cr.prototype, "fallThrough", void 0);
exports.Case = Cr = rt([Be("case")], Cr);
let Ar = class DefaultCase extends Cr {
  linkToSwitch(t) {
    if (void 0 !== t.defaultCase) throw new Error("AUR0816");
    t.defaultCase = this;
  }

};
exports.DefaultCase = Ar;
exports.DefaultCase = Ar = rt([Be("default-case")], Ar);
let Sr = class PromiseTemplateController {
  constructor(t, e, i, s) {
    this.f = t;
    this.l = e;
    this.p = i;
    this.id = (0, _kernel.nextId)("au$component");
    this.preSettledTask = null;
    this.postSettledTask = null;
    this.logger = s.scopeTo("promise.resolve");
  }

  link(t, e, i, s) {
    this.view = this.f.create(this.$controller).setLocation(this.l);
  }

  attaching(t, e, i) {
    const s = this.view;
    const n = this.$controller;
    return (0, _kernel.onResolve)(s.activate(t, n, i, this.viewScope = _runtime.Scope.fromParent(n.scope, {})), () => this.swap(t, i));
  }

  valueChanged(t, e, i) {
    if (!this.$controller.isActive) return;
    this.swap(null, i);
  }

  swap(t, e) {
    var i, s;
    const n = this.value;

    if (!(n instanceof Promise)) {
      this.logger.warn(`The value '${String(n)}' is not a promise. No change will be done.`);
      return;
    }

    const r = this.p.domWriteQueue;
    const o = this.fulfilled;
    const l = this.rejected;
    const h = this.pending;
    const a = this.viewScope;
    let c;
    const u = {
      reusable: false
    };

    const f = () => {
      void (0, _kernel.resolveAll)(c = (this.preSettledTask = r.queueTask(() => (0, _kernel.resolveAll)(null === o || void 0 === o ? void 0 : o.deactivate(t, e), null === l || void 0 === l ? void 0 : l.deactivate(t, e), null === h || void 0 === h ? void 0 : h.activate(t, e, a)), u)).result, n.then(i => {
        if (this.value !== n) return;

        const s = () => {
          this.postSettlePromise = (this.postSettledTask = r.queueTask(() => (0, _kernel.resolveAll)(null === h || void 0 === h ? void 0 : h.deactivate(t, e), null === l || void 0 === l ? void 0 : l.deactivate(t, e), null === o || void 0 === o ? void 0 : o.activate(t, e, a, i)), u)).result;
        };

        if (1 === this.preSettledTask.status) void c.then(s);else {
          this.preSettledTask.cancel();
          s();
        }
      }, i => {
        if (this.value !== n) return;

        const s = () => {
          this.postSettlePromise = (this.postSettledTask = r.queueTask(() => (0, _kernel.resolveAll)(null === h || void 0 === h ? void 0 : h.deactivate(t, e), null === o || void 0 === o ? void 0 : o.deactivate(t, e), null === l || void 0 === l ? void 0 : l.activate(t, e, a, i)), u)).result;
        };

        if (1 === this.preSettledTask.status) void c.then(s);else {
          this.preSettledTask.cancel();
          s();
        }
      }));
    };

    if (1 === (null === (i = this.postSettledTask) || void 0 === i ? void 0 : i.status)) void this.postSettlePromise.then(f);else {
      null === (s = this.postSettledTask) || void 0 === s ? void 0 : s.cancel();
      f();
    }
  }

  detaching(t, e, i) {
    var s, n;
    null === (s = this.preSettledTask) || void 0 === s ? void 0 : s.cancel();
    null === (n = this.postSettledTask) || void 0 === n ? void 0 : n.cancel();
    this.preSettledTask = this.postSettledTask = null;
    return this.view.deactivate(t, this.$controller, i);
  }

  dispose() {
    var t;
    null === (t = this.view) || void 0 === t ? void 0 : t.dispose();
    this.view = void 0;
  }

};
exports.PromiseTemplateController = Sr;
rt([At], Sr.prototype, "value", void 0);
exports.PromiseTemplateController = Sr = rt([Be("promise"), ot(0, bi), ot(1, es), ot(2, Wt), ot(3, _kernel.ILogger)], Sr);
let Rr = class PendingTemplateController {
  constructor(t, e) {
    this.factory = t;
    this.id = (0, _kernel.nextId)("au$component");
    this.view = this.factory.create().setLocation(e);
  }

  link(t, e, i, s) {
    Ir(t).pending = this;
  }

  activate(t, e, i) {
    const s = this.view;
    if (s.isActive) return;
    return s.activate(s, this.$controller, e, i);
  }

  deactivate(t, e) {
    const i = this.view;
    if (!i.isActive) return;
    return i.deactivate(i, this.$controller, e);
  }

  detaching(t, e, i) {
    return this.deactivate(t, i);
  }

  dispose() {
    var t;
    null === (t = this.view) || void 0 === t ? void 0 : t.dispose();
    this.view = void 0;
  }

};
exports.PendingTemplateController = Rr;
rt([At({
  mode: _runtime.BindingMode.toView
})], Rr.prototype, "value", void 0);
exports.PendingTemplateController = Rr = rt([Be("pending"), ot(0, bi), ot(1, es)], Rr);
let Er = class FulfilledTemplateController {
  constructor(t, e) {
    this.factory = t;
    this.id = (0, _kernel.nextId)("au$component");
    this.view = this.factory.create().setLocation(e);
  }

  link(t, e, i, s) {
    Ir(t).fulfilled = this;
  }

  activate(t, e, i, s) {
    this.value = s;
    const n = this.view;
    if (n.isActive) return;
    return n.activate(n, this.$controller, e, i);
  }

  deactivate(t, e) {
    const i = this.view;
    if (!i.isActive) return;
    return i.deactivate(i, this.$controller, e);
  }

  detaching(t, e, i) {
    return this.deactivate(t, i);
  }

  dispose() {
    var t;
    null === (t = this.view) || void 0 === t ? void 0 : t.dispose();
    this.view = void 0;
  }

};
exports.FulfilledTemplateController = Er;
rt([At({
  mode: _runtime.BindingMode.fromView
})], Er.prototype, "value", void 0);
exports.FulfilledTemplateController = Er = rt([Be("then"), ot(0, bi), ot(1, es)], Er);
let Br = class RejectedTemplateController {
  constructor(t, e) {
    this.factory = t;
    this.id = (0, _kernel.nextId)("au$component");
    this.view = this.factory.create().setLocation(e);
  }

  link(t, e, i, s) {
    Ir(t).rejected = this;
  }

  activate(t, e, i, s) {
    this.value = s;
    const n = this.view;
    if (n.isActive) return;
    return n.activate(n, this.$controller, e, i);
  }

  deactivate(t, e) {
    const i = this.view;
    if (!i.isActive) return;
    return i.deactivate(i, this.$controller, e);
  }

  detaching(t, e, i) {
    return this.deactivate(t, i);
  }

  dispose() {
    var t;
    null === (t = this.view) || void 0 === t ? void 0 : t.dispose();
    this.view = void 0;
  }

};
exports.RejectedTemplateController = Br;
rt([At({
  mode: _runtime.BindingMode.fromView
})], Br.prototype, "value", void 0);
exports.RejectedTemplateController = Br = rt([Be("catch"), ot(0, bi), ot(1, es)], Br);

function Ir(t) {
  const e = t.parent;
  const i = null === e || void 0 === e ? void 0 : e.viewModel;
  if (i instanceof Sr) return i;
  throw new Error("AUR0813");
}

let Tr = class PromiseAttributePattern {
  "promise.resolve"(t, e, i) {
    return new AttrSyntax(t, e, "promise", "bind");
  }

};
Tr = rt([$t({
  pattern: "promise.resolve",
  symbols: ""
})], Tr);
let Dr = class FulfilledAttributePattern {
  then(t, e, i) {
    return new AttrSyntax(t, e, "then", "from-view");
  }

};
Dr = rt([$t({
  pattern: "then",
  symbols: ""
})], Dr);
let Pr = class RejectedAttributePattern {
  catch(t, e, i) {
    return new AttrSyntax(t, e, "catch", "from-view");
  }

};
Pr = rt([$t({
  pattern: "catch",
  symbols: ""
})], Pr);

function Or(t, e, i, s) {
  if (Ct(e)) return $r(t, e, i, s);
  if (Ze.isType(e)) return Lr(t, e, i, s);
  throw new Error(`Invalid Tag or Type.`);
}

class RenderPlan {
  constructor(t, e, i) {
    this.node = t;
    this.instructions = e;
    this.Di = i;
    this.Pi = void 0;
  }

  get definition() {
    if (void 0 === this.Pi) this.Pi = CustomElementDefinition.create({
      name: Ze.generateName(),
      template: this.node,
      needsCompile: Ct(this.node),
      instructions: this.instructions,
      dependencies: this.Di
    });
    return this.Pi;
  }

  createView(t) {
    return this.getViewFactory(t).create();
  }

  getViewFactory(t) {
    return t.root.get(Ei).getViewFactory(this.definition, t.createChild().register(...this.Di));
  }

  mergeInto(t, e, i) {
    t.appendChild(this.node);
    e.push(...this.instructions);
    i.push(...this.Di);
  }

}

exports.RenderPlan = RenderPlan;

function $r(t, e, i, s) {
  const n = [];
  const r = [];
  const o = [];
  const l = t.document.createElement(e);
  let h = false;
  if (i) Object.keys(i).forEach(t => {
    const e = i[t];

    if (ws(e)) {
      h = true;
      n.push(e);
    } else l.setAttribute(t, e);
  });

  if (h) {
    l.className = "au";
    r.push(n);
  }

  if (s) qr(t, l, s, r, o);
  return new RenderPlan(l, r, o);
}

function Lr(t, e, i, s) {
  const n = Ze.getDefinition(e);
  const r = [];
  const o = [r];
  const l = [];
  const h = [];
  const a = n.bindables;
  const c = t.document.createElement(n.name);
  c.className = "au";
  if (!l.includes(e)) l.push(e);
  r.push(new HydrateElementInstruction(n, void 0, h, null, false, void 0));
  if (i) Object.keys(i).forEach(t => {
    const e = i[t];
    if (ws(e)) h.push(e);else if (void 0 === a[t]) h.push(new SetAttributeInstruction(e, t));else h.push(new SetPropertyInstruction(e, t));
  });
  if (s) qr(t, c, s, o, l);
  return new RenderPlan(c, o, l);
}

function qr(t, e, i, s, n) {
  for (let r = 0, o = i.length; r < o; ++r) {
    const o = i[r];

    switch (typeof o) {
      case "string":
        e.appendChild(t.document.createTextNode(o));
        break;

      case "object":
        if (o instanceof t.Node) e.appendChild(o);else if ("mergeInto" in o) o.mergeInto(e, s, n);
    }
  }
}

function Mr(t, e) {
  const i = e.to;
  if (void 0 !== i && "subject" !== i && "composing" !== i) t[i] = e;
  return t;
}

class AuRender {
  constructor(t, e, i, s) {
    this.p = t;
    this.Oi = e;
    this.$i = i;
    this.r = s;
    this.id = (0, _kernel.nextId)("au$component");
    this.component = void 0;
    this.composing = false;
    this.view = void 0;
    this.Li = void 0;
    this.qi = e.props.reduce(Mr, {});
  }

  attaching(t, e, i) {
    const {
      component: s,
      view: n
    } = this;

    if (void 0 === n || this.Li !== s) {
      this.Li = s;
      this.composing = true;
      return this.compose(void 0, s, t, i);
    }

    return this.compose(n, s, t, i);
  }

  detaching(t, e, i) {
    return this.ri(this.view, t, i);
  }

  componentChanged(t, e, i) {
    const {
      $controller: s
    } = this;
    if (!s.isActive) return;
    if (this.Li === t) return;
    this.Li = t;
    this.composing = true;
    i |= s.flags;
    const n = (0, _kernel.onResolve)(this.ri(this.view, null, i), () => this.compose(void 0, t, null, i));
    if (n instanceof Promise) n.catch(t => {
      throw t;
    });
  }

  compose(t, e, i, s) {
    return (0, _kernel.onResolve)(void 0 === t ? (0, _kernel.onResolve)(e, t => this.Mi(t, s)) : t, t => this.si(this.view = t, i, s));
  }

  ri(t, e, i) {
    return null === t || void 0 === t ? void 0 : t.deactivate(null !== e && void 0 !== e ? e : t, this.$controller, i);
  }

  si(t, e, i) {
    const {
      $controller: s
    } = this;
    return (0, _kernel.onResolve)(null === t || void 0 === t ? void 0 : t.activate(null !== e && void 0 !== e ? e : t, s, i, s.scope), () => {
      this.composing = false;
    });
  }

  Mi(t, e) {
    const i = this.Ui(t, e);

    if (i) {
      i.setLocation(this.$controller.location);
      i.lockScope(this.$controller.scope);
      return i;
    }

    return;
  }

  Ui(t, e) {
    if (!t) return;
    const i = this.$i.controller.container;

    if ("object" === typeof t) {
      if (Ur(t)) return t;
      if ("createView" in t) return t.createView(i);
      if ("create" in t) return t.create();
      if ("template" in t) return this.r.getViewFactory(CustomElementDefinition.getOrCreate(t), i).create();
    }

    if (Ct(t)) {
      const e = i.find(Ze, t);
      if (null == e) throw new Error(`AUR0809:${t}`);
      t = e.Type;
    }

    return Or(this.p, t, this.qi, this.$controller.host.childNodes).createView(i);
  }

  dispose() {
    var t;
    null === (t = this.view) || void 0 === t ? void 0 : t.dispose();
    this.view = void 0;
  }

  accept(t) {
    var e;
    if (true === (null === (e = this.view) || void 0 === e ? void 0 : e.accept(t))) return true;
  }

}

exports.AuRender = AuRender;
AuRender.inject = [Wt, gs, Wi, Ei];
rt([At], AuRender.prototype, "component", void 0);
rt([At({
  mode: _runtime.BindingMode.fromView
})], AuRender.prototype, "composing", void 0);
Me({
  name: "au-render",
  template: null,
  containerless: true,
  capture: true
})(AuRender);

function Ur(t) {
  return "lockScope" in t;
}

class AuCompose {
  constructor(t, e, i, s, n, r) {
    this.c = t;
    this.parent = e;
    this.host = i;
    this.p = s;
    this.scopeBehavior = "auto";
    this.Fi = void 0;
    this.l = n.containerless ? os(this.host) : void 0;
    this.r = t.get(Ei);
    this.Oi = n;
    this.Vi = r;
  }

  static get inject() {
    return [_kernel.IContainer, Ni, Ji, Wt, gs, (0, _kernel.transient)(CompositionContextFactory)];
  }

  get pending() {
    return this._i;
  }

  get composition() {
    return this.Fi;
  }

  attaching(t, e, i) {
    return this._i = (0, _kernel.onResolve)(this.queue(new ChangeInfo(this.view, this.viewModel, this.model, void 0), t), t => {
      if (this.Vi.isCurrent(t)) this._i = void 0;
    });
  }

  detaching(t) {
    const e = this.Fi;
    const i = this._i;
    this.Vi.invalidate();
    this.Fi = this._i = void 0;
    return (0, _kernel.onResolve)(i, () => null === e || void 0 === e ? void 0 : e.deactivate(t));
  }

  propertyChanged(t) {
    if ("model" === t && null != this.Fi) {
      this.Fi.update(this.model);
      return;
    }

    this._i = (0, _kernel.onResolve)(this._i, () => (0, _kernel.onResolve)(this.queue(new ChangeInfo(this.view, this.viewModel, this.model, t), void 0), t => {
      if (this.Vi.isCurrent(t)) this._i = void 0;
    }));
  }

  queue(t, e) {
    const i = this.Vi;
    const s = this.Fi;
    return (0, _kernel.onResolve)(i.create(t), t => {
      if (i.isCurrent(t)) return (0, _kernel.onResolve)(this.compose(t), n => {
        if (i.isCurrent(t)) return (0, _kernel.onResolve)(n.activate(e), () => {
          if (i.isCurrent(t)) {
            this.Fi = n;
            return (0, _kernel.onResolve)(null === s || void 0 === s ? void 0 : s.deactivate(e), () => t);
          } else return (0, _kernel.onResolve)(n.controller.deactivate(n.controller, this.$controller, 4), () => {
            n.controller.dispose();
            return t;
          });
        });
        n.controller.dispose();
        return t;
      });
      return t;
    });
  }

  compose(t) {
    let e;
    let i;
    let s;
    const {
      view: n,
      viewModel: r,
      model: o
    } = t.change;
    const {
      c: l,
      host: h,
      $controller: a,
      l: c
    } = this;
    const u = this.getDef(r);
    const f = l.createChild();
    const d = null == c ? h.parentNode : c.parentNode;

    if (null !== u) {
      if (u.containerless) throw new Error("AUR0806");

      if (null == c) {
        i = h;

        s = () => {};
      } else {
        i = d.insertBefore(this.p.document.createElement(u.name), c);

        s = () => {
          i.remove();
        };
      }

      e = this.getVm(f, r, i);
    } else {
      i = null == c ? h : c;
      e = this.getVm(f, r, i);
    }

    const m = () => {
      if (null !== u) {
        const n = Controller.$el(f, e, i, {
          projections: this.Oi.projections
        }, u);
        return new CompositionController(n, t => n.activate(null !== t && void 0 !== t ? t : n, a, 2, a.scope.parentScope), t => (0, _kernel.onResolve)(n.deactivate(null !== t && void 0 !== t ? t : n, a, 4), s), t => {
          var i;
          return null === (i = e.activate) || void 0 === i ? void 0 : i.call(e, t);
        }, t);
      } else {
        const s = CustomElementDefinition.create({
          name: Ze.generateName(),
          template: n
        });
        const r = this.r.getViewFactory(s, f);
        const o = Controller.$view(r, a);
        const l = "auto" === this.scopeBehavior ? _runtime.Scope.fromParent(this.parent.scope, e) : _runtime.Scope.create(e);
        if (ls(i)) o.setLocation(i);else o.setHost(i);
        return new CompositionController(o, t => o.activate(null !== t && void 0 !== t ? t : o, a, 2, l), t => o.deactivate(null !== t && void 0 !== t ? t : o, a, 4), t => {
          var i;
          return null === (i = e.activate) || void 0 === i ? void 0 : i.call(e, t);
        }, t);
      }
    };

    if ("activate" in e) return (0, _kernel.onResolve)(e.activate(o), () => m());else return m();
  }

  getVm(t, e, i) {
    if (null == e) return new EmptyComponent$1();
    if ("object" === typeof e) return e;
    const s = this.p;
    const n = ls(i);
    t.registerResolver(s.Element, t.registerResolver(Ji, new _kernel.InstanceProvider("ElementResolver", n ? null : i)));
    t.registerResolver(es, new _kernel.InstanceProvider("IRenderLocation", n ? i : null));
    const r = t.invoke(e);
    t.registerResolver(e, new _kernel.InstanceProvider("au-compose.viewModel", r));
    return r;
  }

  getDef(t) {
    const e = kt(t) ? t : null === t || void 0 === t ? void 0 : t.constructor;
    return Ze.isType(e) ? Ze.getDefinition(e) : null;
  }

}

exports.AuCompose = AuCompose;
rt([At], AuCompose.prototype, "view", void 0);
rt([At], AuCompose.prototype, "viewModel", void 0);
rt([At], AuCompose.prototype, "model", void 0);
rt([At({
  set: t => {
    if ("scoped" === t || "auto" === t) return t;
    throw new Error("AUR0805");
  }
})], AuCompose.prototype, "scopeBehavior", void 0);
Me("au-compose")(AuCompose);

class EmptyComponent$1 {}

class CompositionContextFactory {
  constructor() {
    this.id = 0;
  }

  isCurrent(t) {
    return t.id === this.id;
  }

  create(t) {
    return (0, _kernel.onResolve)(t.load(), t => new CompositionContext(++this.id, t));
  }

  invalidate() {
    this.id++;
  }

}

class ChangeInfo {
  constructor(t, e, i, s) {
    this.view = t;
    this.viewModel = e;
    this.model = i;
    this.src = s;
  }

  load() {
    if (yt(this.view) || yt(this.viewModel)) return Promise.all([this.view, this.viewModel]).then(([t, e]) => new LoadedChangeInfo(t, e, this.model, this.src));else return new LoadedChangeInfo(this.view, this.viewModel, this.model, this.src);
  }

}

class LoadedChangeInfo {
  constructor(t, e, i, s) {
    this.view = t;
    this.viewModel = e;
    this.model = i;
    this.src = s;
  }

}

class CompositionContext {
  constructor(t, e) {
    this.id = t;
    this.change = e;
  }

}

class CompositionController {
  constructor(t, e, i, s, n) {
    this.controller = t;
    this.start = e;
    this.stop = i;
    this.update = s;
    this.context = n;
    this.state = 0;
  }

  activate(t) {
    if (0 !== this.state) throw new Error(`AUR0807:${this.controller.name}`);
    this.state = 1;
    return this.start(t);
  }

  deactivate(t) {
    switch (this.state) {
      case 1:
        this.state = -1;
        return this.stop(t);

      case -1:
        throw new Error("AUR0808");

      default:
        this.state = -1;
    }
  }

}

class AuSlot {
  constructor(t, e, i, s) {
    var n, r;
    this.ji = null;
    this.Ni = null;
    let o;
    const l = e.auSlot;
    const h = null === (r = null === (n = i.instruction) || void 0 === n ? void 0 : n.projections) || void 0 === r ? void 0 : r[l.name];

    if (null == h) {
      o = s.getViewFactory(l.fallback, i.controller.container);
      this.Wi = false;
    } else {
      o = s.getViewFactory(h, i.parent.controller.container);
      this.Wi = true;
    }

    this.$i = i;
    this.view = o.create().setLocation(t);
  }

  static get inject() {
    return [es, gs, Wi, Ei];
  }

  binding(t, e, i) {
    var s;
    this.ji = this.$controller.scope.parentScope;
    let n;

    if (this.Wi) {
      n = this.$i.controller.scope.parentScope;
      (this.Ni = _runtime.Scope.fromParent(n, n.bindingContext)).overrideContext.$host = null !== (s = this.expose) && void 0 !== s ? s : this.ji.bindingContext;
    }
  }

  attaching(t, e, i) {
    return this.view.activate(t, this.$controller, i, this.Wi ? this.Ni : this.ji);
  }

  detaching(t, e, i) {
    return this.view.deactivate(t, this.$controller, i);
  }

  exposeChanged(t) {
    if (this.Wi && null != this.Ni) this.Ni.overrideContext.$host = t;
  }

  dispose() {
    this.view.dispose();
    this.view = void 0;
  }

  accept(t) {
    var e;
    if (true === (null === (e = this.view) || void 0 === e ? void 0 : e.accept(t))) return true;
  }

}

exports.AuSlot = AuSlot;
rt([At], AuSlot.prototype, "expose", void 0);
Me({
  name: "au-slot",
  template: null,
  containerless: true
})(AuSlot);
const Fr = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;

const Vr = _kernel.DI.createInterface("ISanitizer", t => t.singleton(class {
  sanitize(t) {
    return t.replace(Fr, "");
  }

}));

exports.ISanitizer = Vr;

let _r = class SanitizeValueConverter {
  constructor(t) {
    this.Hi = t;
  }

  toView(t) {
    if (null == t) return null;
    return this.Hi.sanitize(t);
  }

};

exports.SanitizeValueConverter = _r;
exports.SanitizeValueConverter = _r = rt([ot(0, Vr)], _r);
(0, _runtime.valueConverter)("sanitize")(_r);
let jr = class ViewValueConverter {
  constructor(t) {
    this.zi = t;
  }

  toView(t, e) {
    return this.zi.getViewComponentForObject(t, e);
  }

};
exports.ViewValueConverter = jr;
exports.ViewValueConverter = jr = rt([ot(0, Ri)], jr);
(0, _runtime.valueConverter)("view")(jr);
const Nr = DebounceBindingBehavior;
exports.DebounceBindingBehaviorRegistration = Nr;
const Wr = OneTimeBindingBehavior;
exports.OneTimeBindingBehaviorRegistration = Wr;
const Hr = ToViewBindingBehavior;
exports.ToViewBindingBehaviorRegistration = Hr;
const zr = FromViewBindingBehavior;
exports.FromViewBindingBehaviorRegistration = zr;
const Gr = SignalBindingBehavior;
exports.SignalBindingBehaviorRegistration = Gr;
const Xr = ThrottleBindingBehavior;
exports.ThrottleBindingBehaviorRegistration = Xr;
const Kr = TwoWayBindingBehavior;
exports.TwoWayBindingBehaviorRegistration = Kr;
const Yr = TemplateCompiler;
exports.ITemplateCompilerRegistration = Yr;
const Qr = NodeObserverLocator;
exports.INodeObserverLocatorRegistration = Qr;
const Zr = [Yr, Qr];
exports.DefaultComponents = Zr;
const Jr = SVGAnalyzer;
exports.SVGAnalyzerRegistration = Jr;
const to = jt;
exports.AtPrefixedTriggerAttributePatternRegistration = to;
const eo = _t;
exports.ColonPrefixedBindAttributePatternRegistration = eo;
const io = Vt;
exports.RefAttributePatternRegistration = io;
const so = Ft;
exports.DotSeparatedAttributePatternRegistration = so;
const no = Nt;
const ro = [io, so, no];
exports.DefaultBindingSyntax = ro;
const oo = [to, eo];
exports.ShortHandBindingSyntax = oo;
const lo = vn;
exports.CallBindingCommandRegistration = lo;
const ho = mn;
exports.DefaultBindingCommandRegistration = ho;
const ao = pn;
exports.ForBindingCommandRegistration = ao;
const co = fn;
exports.FromViewBindingCommandRegistration = co;
const uo = cn;
exports.OneTimeBindingCommandRegistration = uo;
const fo = un;
exports.ToViewBindingCommandRegistration = fo;
const mo = dn;
exports.TwoWayBindingCommandRegistration = mo;
const vo = Cn;
exports.RefBindingCommandRegistration = vo;
const po = gn;
exports.TriggerBindingCommandRegistration = po;
const go = wn;
exports.DelegateBindingCommandRegistration = go;
const wo = bn;
exports.CaptureBindingCommandRegistration = wo;
const bo = xn;
exports.AttrBindingCommandRegistration = bo;
const xo = kn;
exports.ClassBindingCommandRegistration = xo;
const yo = yn;
exports.StyleBindingCommandRegistration = yo;
const ko = An;
const Co = [ho, uo, co, fo, mo, lo, ao, vo, po, go, wo, xo, yo, bo, ko];
exports.DefaultBindingLanguage = Co;
const Ao = _r;
exports.SanitizeValueConverterRegistration = Ao;
const So = jr;
exports.ViewValueConverterRegistration = So;
const Ro = FrequentMutations;
const Eo = ObserveShallow;
const Bo = If;
exports.IfRegistration = Bo;
const Io = Else;
exports.ElseRegistration = Io;
const To = Repeat;
exports.RepeatRegistration = To;
const Do = With;
exports.WithRegistration = Do;
const Po = kr;
const Oo = Cr;
const $o = Ar;
const Lo = Sr;
const qo = Rr;
const Mo = Er;
const Uo = Br;
const Fo = Tr;
const Vo = Dr;
const _o = Pr;
const jo = AttrBindingBehavior;
exports.AttrBindingBehaviorRegistration = jo;
const No = SelfBindingBehavior;
exports.SelfBindingBehaviorRegistration = No;
const Wo = UpdateTriggerBindingBehavior;
exports.UpdateTriggerBindingBehaviorRegistration = Wo;
const Ho = AuRender;
exports.AuRenderRegistration = Ho;
const zo = AuCompose;
const Go = Portal;
const Xo = Focus;
const Ko = mr;
const Yo = [Nr, Wr, Hr, zr, Gr, Xr, Kr, Ao, So, Ro, Eo, Bo, Io, To, Do, Po, Oo, $o, Lo, qo, Mo, Uo, Fo, Vo, _o, jo, No, Wo, Ho, zo, Go, Xo, Ko, AuSlot];
exports.DefaultResources = Yo;
const Qo = Ts;
exports.CallBindingRendererRegistration = Qo;
const Zo = Es;
exports.CustomAttributeRendererRegistration = Zo;
const Jo = Rs;
exports.CustomElementRendererRegistration = Jo;
const tl = Ps;
exports.InterpolationBindingRendererRegistration = tl;
const el = $s;
exports.IteratorBindingRendererRegistration = el;
const il = Is;
exports.LetElementRendererRegistration = il;
const sl = Os;
exports.PropertyBindingRendererRegistration = sl;
const nl = Ds;
exports.RefBindingRendererRegistration = nl;
const rl = Ss;
exports.SetPropertyRendererRegistration = rl;
const ol = Bs;
exports.TemplateControllerRendererRegistration = ol;
const ll = Fs;
exports.ListenerBindingRendererRegistration = ll;
const hl = Ws;
exports.AttributeBindingRendererRegistration = hl;
const al = Vs;
exports.SetAttributeRendererRegistration = al;
const cl = _s;
exports.SetClassAttributeRendererRegistration = cl;
const ul = js;
exports.SetStyleAttributeRendererRegistration = ul;
const fl = Ns;
exports.StylePropertyBindingRendererRegistration = fl;
const dl = Us;
exports.TextBindingRendererRegistration = dl;
const ml = Hs;
const vl = [sl, el, Qo, nl, tl, rl, Jo, Zo, ol, il, ll, hl, al, cl, ul, fl, dl, ml];
exports.DefaultRenderers = vl;
const pl = {
  register(t) {
    return t.register(...Zr, ...Yo, ...ro, ...Co, ...vl);
  },

  createContainer() {
    return this.register(_kernel.DI.createContainer());
  }

};
exports.StandardConfiguration = pl;

const gl = _kernel.DI.createInterface("IAurelia");

exports.IAurelia = gl;

class Aurelia {
  constructor(t = _kernel.DI.createContainer()) {
    this.container = t;
    this.ir = false;
    this.Gi = false;
    this.Xi = false;
    this.Ki = void 0;
    this.next = void 0;
    this.Yi = void 0;
    this.Qi = void 0;
    if (t.has(gl, true)) throw new Error("AUR0768");
    t.registerResolver(gl, new _kernel.InstanceProvider("IAurelia", this));
    t.registerResolver(Ki, this.Zi = new _kernel.InstanceProvider("IAppRoot"));
  }

  get isRunning() {
    return this.ir;
  }

  get isStarting() {
    return this.Gi;
  }

  get isStopping() {
    return this.Xi;
  }

  get root() {
    if (null == this.Ki) {
      if (null == this.next) throw new Error("AUR0767");
      return this.next;
    }

    return this.Ki;
  }

  register(...t) {
    this.container.register(...t);
    return this;
  }

  app(t) {
    this.next = new AppRoot(t, this.Ji(t.host), this.container, this.Zi);
    return this;
  }

  enhance(t, e) {
    var i;
    const s = null !== (i = t.container) && void 0 !== i ? i : this.container.createChild();
    const n = t.host;
    const r = this.Ji(n);
    const o = t.component;
    let l;

    if (kt(o)) {
      s.registerResolver(r.HTMLElement, s.registerResolver(r.Element, s.registerResolver(Ji, new _kernel.InstanceProvider("ElementResolver", n))));
      l = s.invoke(o);
    } else l = o;

    s.registerResolver(ts, new _kernel.InstanceProvider("IEventTarget", n));
    e = null !== e && void 0 !== e ? e : null;
    const h = Controller.$el(s, l, n, null, CustomElementDefinition.create({
      name: Ze.generateName(),
      template: n,
      enhance: true
    }));
    return (0, _kernel.onResolve)(h.activate(h, e, 2), () => h);
  }

  async waitForIdle() {
    const t = this.root.platform;
    await t.domWriteQueue.yield();
    await t.domReadQueue.yield();
    await t.taskQueue.yield();
  }

  Ji(e) {
    let i;

    if (!this.container.has(Wt, false)) {
      if (null === e.ownerDocument.defaultView) throw new Error("AUR0769");
      i = new _platformBrowser.BrowserPlatform(e.ownerDocument.defaultView);
      this.container.register(_kernel.Registration.instance(Wt, i));
    } else i = this.container.get(Wt);

    return i;
  }

  start(t = this.next) {
    if (null == t) throw new Error("AUR0770");
    if (this.Yi instanceof Promise) return this.Yi;
    return this.Yi = (0, _kernel.onResolve)(this.stop(), () => {
      Reflect.set(t.host, "$aurelia", this);
      this.Zi.prepare(this.Ki = t);
      this.Gi = true;
      return (0, _kernel.onResolve)(t.activate(), () => {
        this.ir = true;
        this.Gi = false;
        this.Yi = void 0;
        this.ts(t, "au-started", t.host);
      });
    });
  }

  stop(t = false) {
    if (this.Qi instanceof Promise) return this.Qi;

    if (true === this.ir) {
      const e = this.Ki;
      this.ir = false;
      this.Xi = true;
      return this.Qi = (0, _kernel.onResolve)(e.deactivate(), () => {
        Reflect.deleteProperty(e.host, "$aurelia");
        if (t) e.dispose();
        this.Ki = void 0;
        this.Zi.dispose();
        this.Xi = false;
        this.ts(e, "au-stopped", e.host);
      });
    }
  }

  dispose() {
    if (this.ir || this.Xi) throw new Error("AUR0771");
    this.container.dispose();
  }

  ts(t, e, i) {
    const s = new t.platform.window.CustomEvent(e, {
      detail: this,
      bubbles: true,
      cancelable: true
    });
    i.dispatchEvent(s);
  }

}

exports.Aurelia = Aurelia;
var wl;
exports.DefinitionType = wl;

(function (t) {
  t[t["Element"] = 1] = "Element";
  t[t["Attribute"] = 2] = "Attribute";
})(wl || (exports.DefinitionType = wl = {}));

const bl = _kernel.DI.createInterface("IDialogService");

exports.IDialogService = bl;

const xl = _kernel.DI.createInterface("IDialogController");

exports.IDialogController = xl;

const yl = _kernel.DI.createInterface("IDialogDomRenderer");

exports.IDialogDomRenderer = yl;

const kl = _kernel.DI.createInterface("IDialogDom");

exports.IDialogDom = kl;

const Cl = _kernel.DI.createInterface("IDialogGlobalSettings");

exports.IDialogGlobalSettings = Cl;

class DialogOpenResult {
  constructor(t, e) {
    this.wasCancelled = t;
    this.dialog = e;
  }

  static create(t, e) {
    return new DialogOpenResult(t, e);
  }

}

exports.DialogOpenResult = DialogOpenResult;

class DialogCloseResult {
  constructor(t, e) {
    this.status = t;
    this.value = e;
  }

  static create(t, e) {
    return new DialogCloseResult(t, e);
  }

}

exports.DialogCloseResult = DialogCloseResult;
var Al;
exports.DialogDeactivationStatuses = Al;

(function (t) {
  t["Ok"] = "ok";
  t["Error"] = "error";
  t["Cancel"] = "cancel";
  t["Abort"] = "abort";
})(Al || (exports.DialogDeactivationStatuses = Al = {}));

class DialogController {
  constructor(t, e) {
    this.p = t;
    this.ctn = e;
    this.closed = new Promise((t, e) => {
      this.Ot = t;
      this.Et = e;
    });
  }

  static get inject() {
    return [Wt, _kernel.IContainer];
  }

  activate(t) {
    var e;
    const i = this.ctn.createChild();
    const {
      model: s,
      template: n,
      rejectOnCancel: r
    } = t;
    const o = i.get(yl);
    const l = null !== (e = t.host) && void 0 !== e ? e : this.p.document.body;
    const h = this.dom = o.render(l, t);
    const a = i.has(ts, true) ? i.get(ts) : null;
    const u = h.contentHost;
    this.settings = t;
    if (null == a || !a.contains(l)) i.register(_kernel.Registration.instance(ts, l));
    i.register(_kernel.Registration.instance(Ji, u), _kernel.Registration.instance(kl, h));
    return new Promise(e => {
      var n, r;
      const o = Object.assign(this.cmp = this.getOrCreateVm(i, t, u), {
        $dialog: this
      });
      e(null !== (r = null === (n = o.canActivate) || void 0 === n ? void 0 : n.call(o, s)) && void 0 !== r ? r : true);
    }).then(e => {
      var o;

      if (true !== e) {
        h.dispose();
        if (r) throw Sl(null, "Dialog activation rejected");
        return DialogOpenResult.create(true, this);
      }

      const l = this.cmp;
      return (0, _kernel.onResolve)(null === (o = l.activate) || void 0 === o ? void 0 : o.call(l, s), () => {
        var e;
        const s = this.controller = Controller.$el(i, l, u, null, CustomElementDefinition.create(null !== (e = this.getDefinition(l)) && void 0 !== e ? e : {
          name: Ze.generateName(),
          template: n
        }));
        return (0, _kernel.onResolve)(s.activate(s, null, 2), () => {
          var e;
          h.overlay.addEventListener(null !== (e = t.mouseEvent) && void 0 !== e ? e : "click", this);
          return DialogOpenResult.create(false, this);
        });
      });
    }, t => {
      h.dispose();
      throw t;
    });
  }

  deactivate(t, e) {
    if (this.es) return this.es;
    let i = true;
    const {
      controller: s,
      dom: n,
      cmp: r,
      settings: {
        mouseEvent: o,
        rejectOnCancel: l
      }
    } = this;
    const h = DialogCloseResult.create(t, e);
    const a = new Promise(a => {
      var c, u;
      a((0, _kernel.onResolve)(null !== (u = null === (c = r.canDeactivate) || void 0 === c ? void 0 : c.call(r, h)) && void 0 !== u ? u : true, a => {
        var c;

        if (true !== a) {
          i = false;
          this.es = void 0;
          if (l) throw Sl(null, "Dialog cancellation rejected");
          return DialogCloseResult.create("abort");
        }

        return (0, _kernel.onResolve)(null === (c = r.deactivate) || void 0 === c ? void 0 : c.call(r, h), () => (0, _kernel.onResolve)(s.deactivate(s, null, 4), () => {
          n.dispose();
          n.overlay.removeEventListener(null !== o && void 0 !== o ? o : "click", this);
          if (!l && "error" !== t) this.Ot(h);else this.Et(Sl(e, "Dialog cancelled with a rejection on cancel"));
          return h;
        }));
      }));
    }).catch(t => {
      this.es = void 0;
      throw t;
    });
    this.es = i ? a : void 0;
    return a;
  }

  ok(t) {
    return this.deactivate("ok", t);
  }

  cancel(t) {
    return this.deactivate("cancel", t);
  }

  error(t) {
    const e = Rl(t);
    return new Promise(t => {
      var i, s;
      return t((0, _kernel.onResolve)(null === (s = (i = this.cmp).deactivate) || void 0 === s ? void 0 : s.call(i, DialogCloseResult.create("error", e)), () => (0, _kernel.onResolve)(this.controller.deactivate(this.controller, null, 4), () => {
        this.dom.dispose();
        this.Et(e);
      })));
    });
  }

  handleEvent(t) {
    if (this.settings.overlayDismiss && !this.dom.contentHost.contains(t.target)) this.cancel();
  }

  getOrCreateVm(t, e, i) {
    const s = e.component;
    if (null == s) return new EmptyComponent();
    if ("object" === typeof s) return s;
    const n = this.p;
    t.registerResolver(n.HTMLElement, t.registerResolver(n.Element, t.registerResolver(Ji, new _kernel.InstanceProvider("ElementResolver", i))));
    return t.invoke(s);
  }

  getDefinition(t) {
    const e = kt(t) ? t : null === t || void 0 === t ? void 0 : t.constructor;
    return Ze.isType(e) ? Ze.getDefinition(e) : null;
  }

}

exports.DialogController = DialogController;

class EmptyComponent {}

function Sl(t, e) {
  const i = new Error(e);
  i.wasCancelled = true;
  i.value = t;
  return i;
}

function Rl(t) {
  const e = new Error();
  e.wasCancelled = false;
  e.value = t;
  return e;
}

class DialogService {
  constructor(t, e, i) {
    this.ct = t;
    this.p = e;
    this.ss = i;
    this.dlgs = [];
  }

  get controllers() {
    return this.dlgs.slice(0);
  }

  get top() {
    const t = this.dlgs;
    return t.length > 0 ? t[t.length - 1] : null;
  }

  static get inject() {
    return [_kernel.IContainer, Wt, Cl];
  }

  static register(t) {
    t.register(_kernel.Registration.singleton(bl, this), ve.beforeDeactivate(bl, t => (0, _kernel.onResolve)(t.closeAll(), t => {
      if (t.length > 0) throw new Error(`AUR0901:${t.length}`);
    })));
  }

  open(t) {
    return Bl(new Promise(e => {
      var i;
      const s = DialogSettings.from(this.ss, t);
      const n = null !== (i = s.container) && void 0 !== i ? i : this.ct.createChild();
      e((0, _kernel.onResolve)(s.load(), t => {
        const e = n.invoke(DialogController);
        n.register(_kernel.Registration.instance(xl, e));
        n.register(_kernel.Registration.callback(DialogController, () => {
          throw new Error("AUR0902");
        }));
        return (0, _kernel.onResolve)(e.activate(t), t => {
          if (!t.wasCancelled) {
            if (1 === this.dlgs.push(e)) this.p.window.addEventListener("keydown", this);

            const t = () => this.remove(e);

            e.closed.then(t, t);
          }

          return t;
        });
      }));
    }));
  }

  closeAll() {
    return Promise.all(Array.from(this.dlgs).map(t => {
      if (t.settings.rejectOnCancel) return t.cancel().then(() => null);
      return t.cancel().then(e => "cancel" === e.status ? null : t);
    })).then(t => t.filter(t => !!t));
  }

  remove(t) {
    const e = this.dlgs;
    const i = e.indexOf(t);
    if (i > -1) this.dlgs.splice(i, 1);
    if (0 === e.length) this.p.window.removeEventListener("keydown", this);
  }

  handleEvent(t) {
    const e = t;
    const i = Il(e);
    if (null == i) return;
    const s = this.top;
    if (null === s || 0 === s.settings.keyboard.length) return;
    const n = s.settings.keyboard;
    if ("Escape" === i && n.includes(i)) void s.cancel();else if ("Enter" === i && n.includes(i)) void s.ok();
  }

}

exports.DialogService = DialogService;

class DialogSettings {
  static from(...t) {
    return Object.assign(new DialogSettings(), ...t).ls().os();
  }

  load() {
    const t = this;
    const e = this.component;
    const i = this.template;
    const s = (0, _kernel.resolveAll)(null == e ? void 0 : (0, _kernel.onResolve)(e(), e => {
      t.component = e;
    }), kt(i) ? (0, _kernel.onResolve)(i(), e => {
      t.template = e;
    }) : void 0);
    return s instanceof Promise ? s.then(() => t) : t;
  }

  ls() {
    if (null == this.component && null == this.template) throw new Error("AUR0903");
    return this;
  }

  os() {
    if (null == this.keyboard) this.keyboard = this.lock ? [] : ["Enter", "Escape"];
    if ("boolean" !== typeof this.overlayDismiss) this.overlayDismiss = !this.lock;
    return this;
  }

}

function El(t, e) {
  return this.then(i => i.dialog.closed.then(t, e), e);
}

function Bl(t) {
  t.whenClosed = El;
  return t;
}

function Il(t) {
  if ("Escape" === (t.code || t.key) || 27 === t.keyCode) return "Escape";
  if ("Enter" === (t.code || t.key) || 13 === t.keyCode) return "Enter";
  return;
}

class DefaultDialogGlobalSettings {
  constructor() {
    this.lock = true;
    this.startingZIndex = 1e3;
    this.rejectOnCancel = false;
  }

  static register(t) {
    _kernel.Registration.singleton(Cl, this).register(t);
  }

}

exports.DefaultDialogGlobalSettings = DefaultDialogGlobalSettings;
const Tl = "position:absolute;width:100%;height:100%;top:0;left:0;";

class DefaultDialogDomRenderer {
  constructor(t) {
    this.p = t;
    this.wrapperCss = `${Tl} display:flex;`;
    this.overlayCss = Tl;
    this.hostCss = "position:relative;margin:auto;";
  }

  static register(t) {
    _kernel.Registration.singleton(yl, this).register(t);
  }

  render(t) {
    const e = this.p.document;

    const i = (t, i) => {
      const s = e.createElement(t);
      s.style.cssText = i;
      return s;
    };

    const s = t.appendChild(i("au-dialog-container", this.wrapperCss));
    const n = s.appendChild(i("au-dialog-overlay", this.overlayCss));
    const r = s.appendChild(i("div", this.hostCss));
    return new DefaultDialogDom(s, n, r);
  }

}

exports.DefaultDialogDomRenderer = DefaultDialogDomRenderer;
DefaultDialogDomRenderer.inject = [Wt];

class DefaultDialogDom {
  constructor(t, e, i) {
    this.wrapper = t;
    this.overlay = e;
    this.contentHost = i;
  }

  dispose() {
    this.wrapper.remove();
  }

}

exports.DefaultDialogDom = DefaultDialogDom;

function Dl(t, e) {
  return {
    settingsProvider: t,
    register: i => i.register(...e, ve.beforeCreate(() => t(i.get(Cl)))),

    customize(t, i) {
      return Dl(t, null !== i && void 0 !== i ? i : e);
    }

  };
}

const Pl = Dl(() => {
  throw new Error("AUR0904");
}, [class NoopDialogGlobalSettings {
  static register(t) {
    t.register(_kernel.Registration.singleton(Cl, this));
  }

}]);
exports.DialogConfiguration = Pl;
const Ol = Dl(_kernel.noop, [DialogService, DefaultDialogGlobalSettings, DefaultDialogDomRenderer]);
exports.DialogDefaultConfiguration = Ol;

const $l = _kernel.DI.createInterface(t => t.singleton(WcCustomElementRegistry));

exports.IWcElementRegistry = $l;

class WcCustomElementRegistry {
  constructor(t, e, i) {
    this.ctn = t;
    this.p = e;
    this.r = i;
  }

  define(t, e, i) {
    if (!t.includes("-")) throw new Error('Invalid web-components custom element name. It must include a "-"');
    let s;
    if (null == e) throw new Error("Invalid custom element definition");

    switch (typeof e) {
      case "function":
        s = Ze.isType(e) ? Ze.getDefinition(e) : CustomElementDefinition.create(Ze.generateName(), e);
        break;

      default:
        s = CustomElementDefinition.getOrCreate(e);
        break;
    }

    if (s.containerless) throw new Error("Containerless custom element is not supported. Consider using buitl-in extends instead");
    const n = !(null === i || void 0 === i ? void 0 : i.extends) ? HTMLElement : this.p.document.createElement(i.extends).constructor;
    const r = this.ctn;
    const o = this.r;
    const l = s.bindables;
    const h = this.p;

    class CustomElementClass extends n {
      auInit() {
        if (this.auInited) return;
        this.auInited = true;
        const t = r.createChild();
        t.registerResolver(h.HTMLElement, t.registerResolver(h.Element, t.registerResolver(Ji, new _kernel.InstanceProvider("ElementProvider", this))));
        const e = o.compile(s, t, {
          projections: null
        });
        const i = t.invoke(e.Type);
        const n = this.auCtrl = Controller.$el(t, i, this, null, e);
        Zi(this, e.key, n);
      }

      connectedCallback() {
        this.auInit();
        this.auCtrl.activate(this.auCtrl, null, 0);
      }

      disconnectedCallback() {
        this.auCtrl.deactivate(this.auCtrl, null, 0);
      }

      adoptedCallback() {
        this.auInit();
      }

      attributeChangedCallback(t, e, i) {
        this.auInit();
        this.auCtrl.viewModel[t] = i;
      }

    }

    CustomElementClass.observedAttributes = Object.keys(l);

    for (const t in l) Object.defineProperty(CustomElementClass.prototype, t, {
      configurable: true,
      enumerable: false,

      get() {
        return this["auCtrl"].viewModel[t];
      },

      set(e) {
        if (!this["auInited"]) this["auInit"]();
        this["auCtrl"].viewModel[t] = e;
      }

    });

    this.p.customElements.define(t, CustomElementClass, i);
    return CustomElementClass;
  }

}

exports.WcCustomElementRegistry = WcCustomElementRegistry;
WcCustomElementRegistry.inject = [_kernel.IContainer, Wt, Ei];
});

;define.alias('@aurelia/runtime-html','@aurelia/runtime-html/dist/esm/index.js');
define('@aurelia/runtime/dist/esm/index.js',['require','exports','module','@aurelia/kernel','@aurelia/platform'],function (require, exports, module) {
"use strict";

exports.__esModule = true;
exports.ValueConverterExpression = exports.ValueConverterDefinition = exports.ValueConverter = exports.UnaryExpression = exports.TemplateExpression = exports.TaskStatus = exports.TaskQueuePriority = exports.TaskQueue = exports.TaskAbortError = exports.Task = exports.TaggedTemplateExpression = exports.SubscriberRecord = exports.SetterObserver = exports.SetObserver = exports.Scope = exports.ProxyObservable = exports.PropertyAccessor = exports.PrimitiveObserver = exports.PrimitiveLiteralExpression = exports.Precedence = exports.Platform = exports.ParserState = exports.OverrideContext = exports.ObserverLocator = exports.Observation = exports.ObjectLiteralExpression = exports.ObjectBindingPattern = exports.MapObserver = exports.LifecycleFlags = exports.Interpolation = exports.ISignaler = exports.IPlatform = exports.IObserverLocator = exports.IObservation = exports.INodeObserverLocator = exports.IExpressionParser = exports.IDirtyChecker = exports.HtmlLiteralExpression = exports.ForOfStatement = exports.FlushQueue = exports.ExpressionType = exports.ExpressionKind = exports.DirtyCheckSettings = exports.DirtyCheckProperty = exports.DestructuringAssignmentSingleExpression = exports.DestructuringAssignmentRestExpression = exports.DestructuringAssignmentExpression = exports.DelegationStrategy = exports.CustomExpression = exports.ConnectableSwitcher = exports.ConditionalExpression = exports.ComputedObserver = exports.CollectionSizeObserver = exports.CollectionLengthObserver = exports.CollectionKind = exports.Char = exports.CallScopeExpression = exports.CallMemberExpression = exports.CallFunctionExpression = exports.BindingObserverRecord = exports.BindingMode = exports.BindingMediator = exports.BindingInterceptor = exports.BindingIdentifier = exports.BindingContext = exports.BindingBehaviorStrategy = exports.BindingBehaviorFactory = exports.BindingBehaviorExpression = exports.BindingBehaviorDefinition = exports.BindingBehavior = exports.BinaryExpression = exports.AssignExpression = exports.ArrayObserver = exports.ArrayLiteralExpression = exports.ArrayIndexObserver = exports.ArrayBindingPattern = exports.AccessorType = exports.AccessThisExpression = exports.AccessScopeExpression = exports.AccessMemberExpression = exports.AccessKeyedExpression = exports.Access = void 0;
exports.alias = O;
exports.applyMutationsToIndices = jt;
exports.bindingBehavior = L;
exports.cloneIndexMap = tt;
exports.connectable = be;
exports.copyIndexMap = X;
exports.createIndexMap = Y;
exports.disableArrayObservation = Pt;
exports.disableMapObservation = he;
exports.disableSetObservation = Wt;
exports.enableArrayObservation = Rt;
exports.enableMapObservation = oe;
exports.enableSetObservation = zt;
exports.getCollectionObserver = pr;
exports.isIndexMap = et;
exports.observable = yr;
exports.parse = Te;
exports.parseExpression = Pe;
exports.registerAliases = C;
exports.subscriberCollection = st;
exports.synchronizeIndices = It;
exports.valueConverter = j;
exports.withFlushQueue = ht;

var _kernel = require("@aurelia/kernel");

exports.IPlatform = _kernel.IPlatform;

var _platform = require("@aurelia/platform");

exports.Platform = _platform.Platform;
exports.Task = _platform.Task;
exports.TaskAbortError = _platform.TaskAbortError;
exports.TaskQueue = _platform.TaskQueue;
exports.TaskQueuePriority = _platform.TaskQueuePriority;
exports.TaskStatus = _platform.TaskStatus;
const d = Object.prototype.hasOwnProperty;
const v = Reflect.defineProperty;

const p = t => "function" === typeof t;

const g = t => "string" === typeof t;

function w(t, e, s) {
  v(t, e, {
    enumerable: false,
    configurable: true,
    writable: true,
    value: s
  });
  return s;
}

function b(t, e, s, r = false) {
  if (r || !d.call(t, e)) w(t, e, s);
}

const E = () => Object.create(null);

const A = _kernel.Metadata.getOwn;
const y = _kernel.Metadata.hasOwn;
const m = _kernel.Metadata.define;
const U = _kernel.Protocol.annotation.keyFor;
const x = _kernel.Protocol.resource.keyFor;
const S = _kernel.Protocol.resource.appendTo;

function O(...t) {
  return function (e) {
    const s = U("aliases");
    const r = A(s, e);
    if (void 0 === r) m(s, t, e);else r.push(...t);
  };
}

function C(t, e, r, i) {
  for (let n = 0, o = t.length; n < o; ++n) _kernel.Registration.aliasTo(r, e.keyFrom(t[n])).register(i);
}

const k = Object.freeze({});

class BindingContext {
  constructor(t, e) {
    if (void 0 !== t) if (void 0 !== e) this[t] = e;else for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) this[e] = t[e];
  }

  static create(t, e) {
    return new BindingContext(t, e);
  }

  static get(t, e, s, r) {
    var i, n;
    if (null == t) throw new Error(`AUR0203:${t}`);
    let o = t.overrideContext;
    let h = t;

    if (s > 0) {
      while (s > 0) {
        s--;
        h = h.parentScope;
        if (null == (null === h || void 0 === h ? void 0 : h.overrideContext)) return;
      }

      o = h.overrideContext;
      return e in o ? o : o.bindingContext;
    }

    while (!(null === h || void 0 === h ? void 0 : h.isBoundary) && null != o && !(e in o) && !(o.bindingContext && e in o.bindingContext)) {
      h = null !== (i = h.parentScope) && void 0 !== i ? i : null;
      o = null !== (n = null === h || void 0 === h ? void 0 : h.overrideContext) && void 0 !== n ? n : null;
    }

    if (o) return e in o ? o : o.bindingContext;
    if (16 & r) return k;
    return t.bindingContext || t.overrideContext;
  }

}

exports.BindingContext = BindingContext;

class Scope {
  constructor(t, e, s, r) {
    this.parentScope = t;
    this.bindingContext = e;
    this.overrideContext = s;
    this.isBoundary = r;
  }

  static create(t, e, s) {
    return new Scope(null, t, null == e ? OverrideContext.create(t) : e, null !== s && void 0 !== s ? s : false);
  }

  static fromOverride(t) {
    if (null == t) throw new Error(`AUR0204:${t}`);
    return new Scope(null, t.bindingContext, t, false);
  }

  static fromParent(t, e) {
    if (null == t) throw new Error(`AUR0205:${t}`);
    return new Scope(t, e, OverrideContext.create(e), false);
  }

}

exports.Scope = Scope;

class OverrideContext {
  constructor(t) {
    this.bindingContext = t;
  }

  static create(t) {
    return new OverrideContext(t);
  }

}

exports.OverrideContext = OverrideContext;

const B = _kernel.DI.createInterface("ISignaler", t => t.singleton(Signaler));

exports.ISignaler = B;

class Signaler {
  constructor() {
    this.signals = E();
  }

  dispatchSignal(t, e) {
    const s = this.signals[t];
    if (void 0 === s) return;
    let r;

    for (r of s.keys()) r.handleChange(void 0, void 0, e);
  }

  addSignalListener(t, e) {
    const s = this.signals;
    const r = s[t];
    if (void 0 === r) s[t] = new Set([e]);else r.add(e);
  }

  removeSignalListener(t, e) {
    const s = this.signals[t];
    if (s) s.delete(e);
  }

}

var $;
exports.BindingBehaviorStrategy = $;

(function (t) {
  t[t["singleton"] = 1] = "singleton";
  t[t["interceptor"] = 2] = "interceptor";
})($ || (exports.BindingBehaviorStrategy = $ = {}));

function L(t) {
  return function (e) {
    return T.define(t, e);
  };
}

class BindingBehaviorDefinition {
  constructor(t, e, s, r, i) {
    this.Type = t;
    this.name = e;
    this.aliases = s;
    this.key = r;
    this.strategy = i;
  }

  static create(t, e) {
    let s;
    let r;

    if (g(t)) {
      s = t;
      r = {
        name: s
      };
    } else {
      s = t.name;
      r = t;
    }

    const h = Object.getPrototypeOf(e) === BindingInterceptor;
    return new BindingBehaviorDefinition(e, (0, _kernel.firstDefined)(P(e, "name"), s), (0, _kernel.mergeArrays)(P(e, "aliases"), r.aliases, e.aliases), T.keyFrom(s), (0, _kernel.fromAnnotationOrDefinitionOrTypeOrDefault)("strategy", r, e, () => h ? 2 : 1));
  }

  register(t) {
    const {
      Type: e,
      key: r,
      aliases: i,
      strategy: n
    } = this;

    switch (n) {
      case 1:
        _kernel.Registration.singleton(r, e).register(t);

        break;

      case 2:
        _kernel.Registration.instance(r, new BindingBehaviorFactory(t, e)).register(t);

        break;
    }

    _kernel.Registration.aliasTo(r, e).register(t);

    C(i, T, r, t);
  }

}

exports.BindingBehaviorDefinition = BindingBehaviorDefinition;

class BindingBehaviorFactory {
  constructor(t, e) {
    this.ctn = t;
    this.Type = e;
    this.deps = _kernel.DI.getDependencies(e);
  }

  construct(t, e) {
    const s = this.ctn;
    const r = this.deps;

    switch (r.length) {
      case 0:
        return new this.Type(t, e);

      case 1:
        return new this.Type(s.get(r[0]), t, e);

      case 2:
        return new this.Type(s.get(r[0]), s.get(r[1]), t, e);

      default:
        return new this.Type(...r.map(t => s.get(t)), t, e);
    }
  }

}

exports.BindingBehaviorFactory = BindingBehaviorFactory;

class BindingInterceptor {
  constructor(t, e) {
    this.binding = t;
    this.expr = e;
    this.interceptor = this;
    let s;

    while (t.interceptor !== this) {
      s = t.interceptor;
      t.interceptor = this;
      t = s;
    }
  }

  get oL() {
    return this.binding.oL;
  }

  get locator() {
    return this.binding.locator;
  }

  get $scope() {
    return this.binding.$scope;
  }

  get isBound() {
    return this.binding.isBound;
  }

  get obs() {
    return this.binding.obs;
  }

  get sourceExpression() {
    return this.binding.sourceExpression;
  }

  updateTarget(t, e) {
    this.binding.updateTarget(t, e);
  }

  updateSource(t, e) {
    this.binding.updateSource(t, e);
  }

  callSource(t) {
    return this.binding.callSource(t);
  }

  handleChange(t, e, s) {
    this.binding.handleChange(t, e, s);
  }

  handleCollectionChange(t, e) {
    this.binding.handleCollectionChange(t, e);
  }

  observe(t, e) {
    this.binding.observe(t, e);
  }

  observeCollection(t) {
    this.binding.observeCollection(t);
  }

  $bind(t, e) {
    this.binding.$bind(t, e);
  }

  $unbind(t) {
    this.binding.$unbind(t);
  }

}

exports.BindingInterceptor = BindingInterceptor;
const R = x("binding-behavior");

const P = (t, e) => A(U(e), t);

const T = Object.freeze({
  name: R,

  keyFrom(t) {
    return `${R}:${t}`;
  },

  isType(t) {
    return p(t) && y(R, t);
  },

  define(t, e) {
    const s = BindingBehaviorDefinition.create(t, e);
    m(R, s, s.Type);
    m(R, s, s);
    S(e, R);
    return s.Type;
  },

  getDefinition(t) {
    const e = A(R, t);
    if (void 0 === e) throw new Error(`AUR0151:${t.name}`);
    return e;
  },

  annotate(t, e, s) {
    m(U(e), s, t);
  },

  getAnnotation: P
});
exports.BindingBehavior = T;

function j(t) {
  return function (e) {
    return D.define(t, e);
  };
}

class ValueConverterDefinition {
  constructor(t, e, s, r) {
    this.Type = t;
    this.name = e;
    this.aliases = s;
    this.key = r;
  }

  static create(t, e) {
    let s;
    let r;

    if (g(t)) {
      s = t;
      r = {
        name: s
      };
    } else {
      s = t.name;
      r = t;
    }

    return new ValueConverterDefinition(e, (0, _kernel.firstDefined)(M(e, "name"), s), (0, _kernel.mergeArrays)(M(e, "aliases"), r.aliases, e.aliases), D.keyFrom(s));
  }

  register(t) {
    const {
      Type: e,
      key: r,
      aliases: i
    } = this;

    _kernel.Registration.singleton(r, e).register(t);

    _kernel.Registration.aliasTo(r, e).register(t);

    C(i, D, r, t);
  }

}

exports.ValueConverterDefinition = ValueConverterDefinition;
const I = x("value-converter");

const M = (t, e) => A(U(e), t);

const D = Object.freeze({
  name: I,
  keyFrom: t => `${I}:${t}`,

  isType(t) {
    return p(t) && y(I, t);
  },

  define(t, e) {
    const s = ValueConverterDefinition.create(t, e);
    m(I, s, s.Type);
    m(I, s, s);
    S(e, I);
    return s.Type;
  },

  getDefinition(t) {
    const e = A(I, t);
    if (void 0 === e) throw new Error(`AUR0152:${t.name}`);
    return e;
  },

  annotate(t, e, s) {
    m(U(e), s, t);
  },

  getAnnotation: M
});
exports.ValueConverter = D;
var F;
exports.ExpressionKind = F;

(function (t) {
  t[t["CallsFunction"] = 128] = "CallsFunction";
  t[t["HasAncestor"] = 256] = "HasAncestor";
  t[t["IsPrimary"] = 512] = "IsPrimary";
  t[t["IsLeftHandSide"] = 1024] = "IsLeftHandSide";
  t[t["HasBind"] = 2048] = "HasBind";
  t[t["HasUnbind"] = 4096] = "HasUnbind";
  t[t["IsAssignable"] = 8192] = "IsAssignable";
  t[t["IsLiteral"] = 16384] = "IsLiteral";
  t[t["IsResource"] = 32768] = "IsResource";
  t[t["IsForDeclaration"] = 65536] = "IsForDeclaration";
  t[t["Type"] = 31] = "Type";
  t[t["AccessThis"] = 1793] = "AccessThis";
  t[t["AccessScope"] = 10082] = "AccessScope";
  t[t["ArrayLiteral"] = 17955] = "ArrayLiteral";
  t[t["ObjectLiteral"] = 17956] = "ObjectLiteral";
  t[t["PrimitiveLiteral"] = 17925] = "PrimitiveLiteral";
  t[t["Template"] = 17958] = "Template";
  t[t["Unary"] = 39] = "Unary";
  t[t["CallScope"] = 1448] = "CallScope";
  t[t["CallMember"] = 1161] = "CallMember";
  t[t["CallFunction"] = 1162] = "CallFunction";
  t[t["AccessMember"] = 9323] = "AccessMember";
  t[t["AccessKeyed"] = 9324] = "AccessKeyed";
  t[t["TaggedTemplate"] = 1197] = "TaggedTemplate";
  t[t["Binary"] = 46] = "Binary";
  t[t["Conditional"] = 63] = "Conditional";
  t[t["Assign"] = 8208] = "Assign";
  t[t["ValueConverter"] = 36913] = "ValueConverter";
  t[t["BindingBehavior"] = 38962] = "BindingBehavior";
  t[t["HtmlLiteral"] = 51] = "HtmlLiteral";
  t[t["ArrayBindingPattern"] = 65556] = "ArrayBindingPattern";
  t[t["ObjectBindingPattern"] = 65557] = "ObjectBindingPattern";
  t[t["BindingIdentifier"] = 65558] = "BindingIdentifier";
  t[t["ForOfStatement"] = 6199] = "ForOfStatement";
  t[t["Interpolation"] = 24] = "Interpolation";
  t[t["ArrayDestructuring"] = 90137] = "ArrayDestructuring";
  t[t["ObjectDestructuring"] = 106521] = "ObjectDestructuring";
  t[t["DestructuringAssignmentLeaf"] = 139289] = "DestructuringAssignmentLeaf";
})(F || (exports.ExpressionKind = F = {}));

class Unparser {
  constructor() {
    this.text = "";
  }

  static unparse(t) {
    const e = new Unparser();
    t.accept(e);
    return e.text;
  }

  visitAccessMember(t) {
    t.object.accept(this);
    this.text += `.${t.name}`;
  }

  visitAccessKeyed(t) {
    t.object.accept(this);
    this.text += "[";
    t.key.accept(this);
    this.text += "]";
  }

  visitAccessThis(t) {
    if (0 === t.ancestor) {
      this.text += "$this";
      return;
    }

    this.text += "$parent";
    let e = t.ancestor - 1;

    while (e--) this.text += ".$parent";
  }

  visitAccessScope(t) {
    let e = t.ancestor;

    while (e--) this.text += "$parent.";

    this.text += t.name;
  }

  visitArrayLiteral(t) {
    const e = t.elements;
    this.text += "[";

    for (let t = 0, s = e.length; t < s; ++t) {
      if (0 !== t) this.text += ",";
      e[t].accept(this);
    }

    this.text += "]";
  }

  visitObjectLiteral(t) {
    const e = t.keys;
    const s = t.values;
    this.text += "{";

    for (let t = 0, r = e.length; t < r; ++t) {
      if (0 !== t) this.text += ",";
      this.text += `'${e[t]}':`;
      s[t].accept(this);
    }

    this.text += "}";
  }

  visitPrimitiveLiteral(t) {
    this.text += "(";

    if (g(t.value)) {
      const e = t.value.replace(/'/g, "\\'");
      this.text += `'${e}'`;
    } else this.text += `${t.value}`;

    this.text += ")";
  }

  visitCallFunction(t) {
    this.text += "(";
    t.func.accept(this);
    this.writeArgs(t.args);
    this.text += ")";
  }

  visitCallMember(t) {
    this.text += "(";
    t.object.accept(this);
    this.text += `.${t.name}`;
    this.writeArgs(t.args);
    this.text += ")";
  }

  visitCallScope(t) {
    this.text += "(";
    let e = t.ancestor;

    while (e--) this.text += "$parent.";

    this.text += t.name;
    this.writeArgs(t.args);
    this.text += ")";
  }

  visitTemplate(t) {
    const {
      cooked: e,
      expressions: s
    } = t;
    const r = s.length;
    this.text += "`";
    this.text += e[0];

    for (let t = 0; t < r; t++) {
      s[t].accept(this);
      this.text += e[t + 1];
    }

    this.text += "`";
  }

  visitTaggedTemplate(t) {
    const {
      cooked: e,
      expressions: s
    } = t;
    const r = s.length;
    t.func.accept(this);
    this.text += "`";
    this.text += e[0];

    for (let t = 0; t < r; t++) {
      s[t].accept(this);
      this.text += e[t + 1];
    }

    this.text += "`";
  }

  visitUnary(t) {
    this.text += `(${t.operation}`;
    if (t.operation.charCodeAt(0) >= 97) this.text += " ";
    t.expression.accept(this);
    this.text += ")";
  }

  visitBinary(t) {
    this.text += "(";
    t.left.accept(this);
    if (105 === t.operation.charCodeAt(0)) this.text += ` ${t.operation} `;else this.text += t.operation;
    t.right.accept(this);
    this.text += ")";
  }

  visitConditional(t) {
    this.text += "(";
    t.condition.accept(this);
    this.text += "?";
    t.yes.accept(this);
    this.text += ":";
    t.no.accept(this);
    this.text += ")";
  }

  visitAssign(t) {
    this.text += "(";
    t.target.accept(this);
    this.text += "=";
    t.value.accept(this);
    this.text += ")";
  }

  visitValueConverter(t) {
    const e = t.args;
    t.expression.accept(this);
    this.text += `|${t.name}`;

    for (let t = 0, s = e.length; t < s; ++t) {
      this.text += ":";
      e[t].accept(this);
    }
  }

  visitBindingBehavior(t) {
    const e = t.args;
    t.expression.accept(this);
    this.text += `&${t.name}`;

    for (let t = 0, s = e.length; t < s; ++t) {
      this.text += ":";
      e[t].accept(this);
    }
  }

  visitArrayBindingPattern(t) {
    const e = t.elements;
    this.text += "[";

    for (let t = 0, s = e.length; t < s; ++t) {
      if (0 !== t) this.text += ",";
      e[t].accept(this);
    }

    this.text += "]";
  }

  visitObjectBindingPattern(t) {
    const e = t.keys;
    const s = t.values;
    this.text += "{";

    for (let t = 0, r = e.length; t < r; ++t) {
      if (0 !== t) this.text += ",";
      this.text += `'${e[t]}':`;
      s[t].accept(this);
    }

    this.text += "}";
  }

  visitBindingIdentifier(t) {
    this.text += t.name;
  }

  visitHtmlLiteral(t) {
    throw new Error("visitHtmlLiteral");
  }

  visitForOfStatement(t) {
    t.declaration.accept(this);
    this.text += " of ";
    t.iterable.accept(this);
  }

  visitInterpolation(t) {
    const {
      parts: e,
      expressions: s
    } = t;
    const r = s.length;
    this.text += "${";
    this.text += e[0];

    for (let t = 0; t < r; t++) {
      s[t].accept(this);
      this.text += e[t + 1];
    }

    this.text += "}";
  }

  visitDestructuringAssignmentExpression(t) {
    const e = t.$kind;
    const s = 106521 === e;
    this.text += s ? "{" : "[";
    const r = t.list;
    const i = r.length;
    let n;
    let o;

    for (n = 0; n < i; n++) {
      o = r[n];

      switch (o.$kind) {
        case 139289:
          o.accept(this);
          break;

        case 90137:
        case 106521:
          {
            const t = o.source;

            if (t) {
              t.accept(this);
              this.text += ":";
            }

            o.accept(this);
            break;
          }
      }
    }

    this.text += s ? "}" : "]";
  }

  visitDestructuringAssignmentSingleExpression(t) {
    t.source.accept(this);
    this.text += ":";
    t.target.accept(this);
    const e = t.initializer;

    if (void 0 !== e) {
      this.text += "=";
      e.accept(this);
    }
  }

  visitDestructuringAssignmentRestExpression(t) {
    this.text += "...";
    t.accept(this);
  }

  writeArgs(t) {
    this.text += "(";

    for (let e = 0, s = t.length; e < s; ++e) {
      if (0 !== e) this.text += ",";
      t[e].accept(this);
    }

    this.text += ")";
  }

}

class CustomExpression {
  constructor(t) {
    this.value = t;
  }

  evaluate(t, e, s, r) {
    return this.value;
  }

}

exports.CustomExpression = CustomExpression;

class BindingBehaviorExpression {
  constructor(t, e, s) {
    this.expression = t;
    this.name = e;
    this.args = s;
    this.behaviorKey = T.keyFrom(e);
  }

  get $kind() {
    return 38962;
  }

  get hasBind() {
    return true;
  }

  get hasUnbind() {
    return true;
  }

  evaluate(t, e, s, r) {
    return this.expression.evaluate(t, e, s, r);
  }

  assign(t, e, s, r) {
    return this.expression.assign(t, e, s, r);
  }

  bind(t, e, s) {
    if (this.expression.hasBind) this.expression.bind(t, e, s);
    const r = s.locator.get(this.behaviorKey);
    if (null == r) throw new Error(`AUR0101:${this.name}`);
    if (!(r instanceof BindingBehaviorFactory)) if (void 0 === s[this.behaviorKey]) {
      s[this.behaviorKey] = r;
      r.bind.call(r, t, e, s, ...this.args.map(r => r.evaluate(t, e, s.locator, null)));
    } else throw new Error(`AUR0102:${this.name}`);
  }

  unbind(t, e, s) {
    const r = this.behaviorKey;
    const i = s;

    if (void 0 !== i[r]) {
      if (p(i[r].unbind)) i[r].unbind(t, e, s);
      i[r] = void 0;
    }

    if (this.expression.hasUnbind) this.expression.unbind(t, e, s);
  }

  accept(t) {
    return t.visitBindingBehavior(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.BindingBehaviorExpression = BindingBehaviorExpression;

class ValueConverterExpression {
  constructor(t, e, s) {
    this.expression = t;
    this.name = e;
    this.args = s;
    this.converterKey = D.keyFrom(e);
  }

  get $kind() {
    return 36913;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return true;
  }

  evaluate(t, e, s, r) {
    const i = s.get(this.converterKey);
    if (null == i) throw new Error(`AUR0103:${this.name}`);

    if (null !== r && "handleChange" in r) {
      const t = i.signals;

      if (null != t) {
        const e = s.get(B);

        for (let s = 0, i = t.length; s < i; ++s) e.addSignalListener(t[s], r);
      }
    }

    if ("toView" in i) return i.toView(this.expression.evaluate(t, e, s, r), ...this.args.map(i => i.evaluate(t, e, s, r)));
    return this.expression.evaluate(t, e, s, r);
  }

  assign(t, e, s, r) {
    const i = s.get(this.converterKey);
    if (null == i) throw new Error(`AUR0104:${this.name}`);
    if ("fromView" in i) r = i.fromView(r, ...this.args.map(r => r.evaluate(t, e, s, null)));
    return this.expression.assign(t, e, s, r);
  }

  unbind(t, e, s) {
    const r = s.locator.get(this.converterKey);
    if (void 0 === r.signals) return;
    const i = s.locator.get(B);

    for (let t = 0; t < r.signals.length; ++t) i.removeSignalListener(r.signals[t], s);
  }

  accept(t) {
    return t.visitValueConverter(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.ValueConverterExpression = ValueConverterExpression;

class AssignExpression {
  constructor(t, e) {
    this.target = t;
    this.value = e;
  }

  get $kind() {
    return 8208;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    return this.target.assign(t, e, s, this.value.evaluate(t, e, s, r));
  }

  assign(t, e, s, r) {
    this.value.assign(t, e, s, r);
    return this.target.assign(t, e, s, r);
  }

  accept(t) {
    return t.visitAssign(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.AssignExpression = AssignExpression;

class ConditionalExpression {
  constructor(t, e, s) {
    this.condition = t;
    this.yes = e;
    this.no = s;
  }

  get $kind() {
    return 63;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    return this.condition.evaluate(t, e, s, r) ? this.yes.evaluate(t, e, s, r) : this.no.evaluate(t, e, s, r);
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitConditional(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.ConditionalExpression = ConditionalExpression;

class AccessThisExpression {
  constructor(t = 0) {
    this.ancestor = t;
  }

  get $kind() {
    return 1793;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    var i;
    let n = e.overrideContext;
    let o = e;
    let h = this.ancestor;

    while (h-- && n) {
      o = o.parentScope;
      n = null !== (i = null === o || void 0 === o ? void 0 : o.overrideContext) && void 0 !== i ? i : null;
    }

    return h < 1 && n ? n.bindingContext : void 0;
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitAccessThis(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.AccessThisExpression = AccessThisExpression;
AccessThisExpression.$this = new AccessThisExpression(0);
AccessThisExpression.$parent = new AccessThisExpression(1);

class AccessScopeExpression {
  constructor(t, e = 0) {
    this.name = t;
    this.ancestor = e;
  }

  get $kind() {
    return 10082;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    const i = BindingContext.get(e, this.name, this.ancestor, t);
    if (null !== r) r.observe(i, this.name);
    const n = i[this.name];
    if (null == n && "$host" === this.name) throw new Error("AUR0105");
    if (1 & t) return n;
    return null == n ? "" : n;
  }

  assign(t, e, s, r) {
    var i;
    if ("$host" === this.name) throw new Error("AUR0106");
    const n = BindingContext.get(e, this.name, this.ancestor, t);
    if (n instanceof Object) if (void 0 !== (null === (i = n.$observers) || void 0 === i ? void 0 : i[this.name])) {
      n.$observers[this.name].setValue(r, t);
      return r;
    } else return n[this.name] = r;
    return;
  }

  accept(t) {
    return t.visitAccessScope(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.AccessScopeExpression = AccessScopeExpression;

class AccessMemberExpression {
  constructor(t, e) {
    this.object = t;
    this.name = e;
  }

  get $kind() {
    return 9323;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    const i = this.object.evaluate(t, e, s, (128 & t) > 0 ? null : r);

    if (1 & t) {
      if (null == i) return i;
      if (null !== r) r.observe(i, this.name);
      return i[this.name];
    }

    if (null !== r && i instanceof Object) r.observe(i, this.name);
    return i ? i[this.name] : "";
  }

  assign(t, e, s, r) {
    const i = this.object.evaluate(t, e, s, null);
    if (i instanceof Object) {
      if (void 0 !== i.$observers && void 0 !== i.$observers[this.name]) i.$observers[this.name].setValue(r, t);else i[this.name] = r;
    } else this.object.assign(t, e, s, {
      [this.name]: r
    });
    return r;
  }

  accept(t) {
    return t.visitAccessMember(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.AccessMemberExpression = AccessMemberExpression;

class AccessKeyedExpression {
  constructor(t, e) {
    this.object = t;
    this.key = e;
  }

  get $kind() {
    return 9324;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    const i = this.object.evaluate(t, e, s, (128 & t) > 0 ? null : r);

    if (i instanceof Object) {
      const n = this.key.evaluate(t, e, s, (128 & t) > 0 ? null : r);
      if (null !== r) r.observe(i, n);
      return i[n];
    }

    return;
  }

  assign(t, e, s, r) {
    const i = this.object.evaluate(t, e, s, null);
    const n = this.key.evaluate(t, e, s, null);
    return i[n] = r;
  }

  accept(t) {
    return t.visitAccessKeyed(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.AccessKeyedExpression = AccessKeyedExpression;

class CallScopeExpression {
  constructor(t, e, s = 0) {
    this.name = t;
    this.args = e;
    this.ancestor = s;
  }

  get $kind() {
    return 1448;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    const i = this.args.map(i => i.evaluate(t, e, s, r));
    const n = BindingContext.get(e, this.name, this.ancestor, t);
    const o = N(t, n, this.name);
    if (o) return o.apply(n, i);
    return;
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitCallScope(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.CallScopeExpression = CallScopeExpression;

class CallMemberExpression {
  constructor(t, e, s) {
    this.object = t;
    this.name = e;
    this.args = s;
  }

  get $kind() {
    return 1161;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    const i = this.object.evaluate(t, e, s, (128 & t) > 0 ? null : r);
    const n = this.args.map(i => i.evaluate(t, e, s, r));
    const o = N(t, i, this.name);
    if (o) return o.apply(i, n);
    return;
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitCallMember(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.CallMemberExpression = CallMemberExpression;

class CallFunctionExpression {
  constructor(t, e) {
    this.func = t;
    this.args = e;
  }

  get $kind() {
    return 1162;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    const i = this.func.evaluate(t, e, s, r);
    if (p(i)) return i(...this.args.map(i => i.evaluate(t, e, s, r)));
    if (!(8 & t) && null == i) return;
    throw new Error("AUR0107");
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitCallFunction(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.CallFunctionExpression = CallFunctionExpression;

class BinaryExpression {
  constructor(t, e, s) {
    this.operation = t;
    this.left = e;
    this.right = s;
  }

  get $kind() {
    return 46;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    switch (this.operation) {
      case "&&":
        return this.left.evaluate(t, e, s, r) && this.right.evaluate(t, e, s, r);

      case "||":
        return this.left.evaluate(t, e, s, r) || this.right.evaluate(t, e, s, r);

      case "==":
        return this.left.evaluate(t, e, s, r) == this.right.evaluate(t, e, s, r);

      case "===":
        return this.left.evaluate(t, e, s, r) === this.right.evaluate(t, e, s, r);

      case "!=":
        return this.left.evaluate(t, e, s, r) != this.right.evaluate(t, e, s, r);

      case "!==":
        return this.left.evaluate(t, e, s, r) !== this.right.evaluate(t, e, s, r);

      case "instanceof":
        {
          const i = this.right.evaluate(t, e, s, r);
          if (p(i)) return this.left.evaluate(t, e, s, r) instanceof i;
          return false;
        }

      case "in":
        {
          const i = this.right.evaluate(t, e, s, r);
          if (i instanceof Object) return this.left.evaluate(t, e, s, r) in i;
          return false;
        }

      case "+":
        {
          const i = this.left.evaluate(t, e, s, r);
          const n = this.right.evaluate(t, e, s, r);
          if ((1 & t) > 0) return i + n;

          if (!i || !n) {
            if ((0, _kernel.isNumberOrBigInt)(i) || (0, _kernel.isNumberOrBigInt)(n)) return (i || 0) + (n || 0);
            if ((0, _kernel.isStringOrDate)(i) || (0, _kernel.isStringOrDate)(n)) return (i || "") + (n || "");
          }

          return i + n;
        }

      case "-":
        return this.left.evaluate(t, e, s, r) - this.right.evaluate(t, e, s, r);

      case "*":
        return this.left.evaluate(t, e, s, r) * this.right.evaluate(t, e, s, r);

      case "/":
        return this.left.evaluate(t, e, s, r) / this.right.evaluate(t, e, s, r);

      case "%":
        return this.left.evaluate(t, e, s, r) % this.right.evaluate(t, e, s, r);

      case "<":
        return this.left.evaluate(t, e, s, r) < this.right.evaluate(t, e, s, r);

      case ">":
        return this.left.evaluate(t, e, s, r) > this.right.evaluate(t, e, s, r);

      case "<=":
        return this.left.evaluate(t, e, s, r) <= this.right.evaluate(t, e, s, r);

      case ">=":
        return this.left.evaluate(t, e, s, r) >= this.right.evaluate(t, e, s, r);

      default:
        throw new Error(`AUR0108:${this.operation}`);
    }
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitBinary(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.BinaryExpression = BinaryExpression;

class UnaryExpression {
  constructor(t, e) {
    this.operation = t;
    this.expression = e;
  }

  get $kind() {
    return 39;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    switch (this.operation) {
      case "void":
        return void this.expression.evaluate(t, e, s, r);

      case "typeof":
        return typeof this.expression.evaluate(1 | t, e, s, r);

      case "!":
        return !this.expression.evaluate(t, e, s, r);

      case "-":
        return -this.expression.evaluate(t, e, s, r);

      case "+":
        return +this.expression.evaluate(t, e, s, r);

      default:
        throw new Error(`AUR0109:${this.operation}`);
    }
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitUnary(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.UnaryExpression = UnaryExpression;

class PrimitiveLiteralExpression {
  constructor(t) {
    this.value = t;
  }

  get $kind() {
    return 17925;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    return this.value;
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitPrimitiveLiteral(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.PrimitiveLiteralExpression = PrimitiveLiteralExpression;
PrimitiveLiteralExpression.$undefined = new PrimitiveLiteralExpression(void 0);
PrimitiveLiteralExpression.$null = new PrimitiveLiteralExpression(null);
PrimitiveLiteralExpression.$true = new PrimitiveLiteralExpression(true);
PrimitiveLiteralExpression.$false = new PrimitiveLiteralExpression(false);
PrimitiveLiteralExpression.$empty = new PrimitiveLiteralExpression("");

class HtmlLiteralExpression {
  constructor(t) {
    this.parts = t;
  }

  get $kind() {
    return 51;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    let i = "";

    for (let n = 0; n < this.parts.length; ++n) {
      const o = this.parts[n].evaluate(t, e, s, r);
      if (null == o) continue;
      i += o;
    }

    return i;
  }

  assign(t, e, s, r, i) {
    return;
  }

  accept(t) {
    return t.visitHtmlLiteral(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.HtmlLiteralExpression = HtmlLiteralExpression;

class ArrayLiteralExpression {
  constructor(t) {
    this.elements = t;
  }

  get $kind() {
    return 17955;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    return this.elements.map(i => i.evaluate(t, e, s, r));
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitArrayLiteral(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.ArrayLiteralExpression = ArrayLiteralExpression;
ArrayLiteralExpression.$empty = new ArrayLiteralExpression(_kernel.emptyArray);

class ObjectLiteralExpression {
  constructor(t, e) {
    this.keys = t;
    this.values = e;
  }

  get $kind() {
    return 17956;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    const i = {};

    for (let n = 0; n < this.keys.length; ++n) i[this.keys[n]] = this.values[n].evaluate(t, e, s, r);

    return i;
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitObjectLiteral(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.ObjectLiteralExpression = ObjectLiteralExpression;
ObjectLiteralExpression.$empty = new ObjectLiteralExpression(_kernel.emptyArray, _kernel.emptyArray);

class TemplateExpression {
  constructor(t, e = _kernel.emptyArray) {
    this.cooked = t;
    this.expressions = e;
  }

  get $kind() {
    return 17958;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    let i = this.cooked[0];

    for (let n = 0; n < this.expressions.length; ++n) {
      i += String(this.expressions[n].evaluate(t, e, s, r));
      i += this.cooked[n + 1];
    }

    return i;
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitTemplate(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.TemplateExpression = TemplateExpression;
TemplateExpression.$empty = new TemplateExpression([""]);

class TaggedTemplateExpression {
  constructor(t, e, s, r = _kernel.emptyArray) {
    this.cooked = t;
    this.func = s;
    this.expressions = r;
    t.raw = e;
  }

  get $kind() {
    return 1197;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    const i = this.expressions.map(i => i.evaluate(t, e, s, r));
    const n = this.func.evaluate(t, e, s, r);
    if (!p(n)) throw new Error(`AUR0110`);
    return n(this.cooked, ...i);
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitTaggedTemplate(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.TaggedTemplateExpression = TaggedTemplateExpression;

class ArrayBindingPattern {
  constructor(t) {
    this.elements = t;
  }

  get $kind() {
    return 65556;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    return;
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitArrayBindingPattern(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.ArrayBindingPattern = ArrayBindingPattern;

class ObjectBindingPattern {
  constructor(t, e) {
    this.keys = t;
    this.values = e;
  }

  get $kind() {
    return 65557;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    return;
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitObjectBindingPattern(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.ObjectBindingPattern = ObjectBindingPattern;

class BindingIdentifier {
  constructor(t) {
    this.name = t;
  }

  get $kind() {
    return 65558;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    return this.name;
  }

  accept(t) {
    return t.visitBindingIdentifier(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.BindingIdentifier = BindingIdentifier;
const V = Object.prototype.toString;

class ForOfStatement {
  constructor(t, e) {
    this.declaration = t;
    this.iterable = e;
  }

  get $kind() {
    return 6199;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    return this.iterable.evaluate(t, e, s, r);
  }

  assign(t, e, s, r) {
    return;
  }

  count(t, e) {
    switch (V.call(e)) {
      case "[object Array]":
        return e.length;

      case "[object Map]":
        return e.size;

      case "[object Set]":
        return e.size;

      case "[object Number]":
        return e;

      case "[object Null]":
        return 0;

      case "[object Undefined]":
        return 0;

      default:
        throw new Error(`Cannot count ${V.call(e)}`);
    }
  }

  iterate(t, e, s) {
    switch (V.call(e)) {
      case "[object Array]":
        return K(e, s);

      case "[object Map]":
        return q(e, s);

      case "[object Set]":
        return H(e, s);

      case "[object Number]":
        return Q(e, s);

      case "[object Null]":
        return;

      case "[object Undefined]":
        return;

      default:
        throw new Error(`Cannot iterate over ${V.call(e)}`);
    }
  }

  bind(t, e, s) {
    if (this.iterable.hasBind) this.iterable.bind(t, e, s);
  }

  unbind(t, e, s) {
    if (this.iterable.hasUnbind) this.iterable.unbind(t, e, s);
  }

  accept(t) {
    return t.visitForOfStatement(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.ForOfStatement = ForOfStatement;

class Interpolation {
  constructor(t, e = _kernel.emptyArray) {
    this.parts = t;
    this.expressions = e;
    this.isMulti = e.length > 1;
    this.firstExpression = e[0];
  }

  get $kind() {
    return 24;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    if (this.isMulti) {
      let i = this.parts[0];

      for (let n = 0; n < this.expressions.length; ++n) {
        i += String(this.expressions[n].evaluate(t, e, s, r));
        i += this.parts[n + 1];
      }

      return i;
    } else return `${this.parts[0]}${this.firstExpression.evaluate(t, e, s, r)}${this.parts[1]}`;
  }

  assign(t, e, s, r) {
    return;
  }

  accept(t) {
    return t.visitInterpolation(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.Interpolation = Interpolation;

class DestructuringAssignmentExpression {
  constructor(t, e, s, r) {
    this.$kind = t;
    this.list = e;
    this.source = s;
    this.initializer = r;
  }

  get hasBind() {
    return false;
  }

  get hasUnbind() {
    return false;
  }

  evaluate(t, e, s, r) {
    return;
  }

  assign(t, e, s, r) {
    var i;
    const n = this.list;
    const o = n.length;
    let h;
    let c;

    for (h = 0; h < o; h++) {
      c = n[h];

      switch (c.$kind) {
        case 139289:
          c.assign(t, e, s, r);
          break;

        case 90137:
        case 106521:
          {
            if ("object" !== typeof r || null === r) throw new Error("AUR0112");
            let n = c.source.evaluate(t, Scope.create(r), s, null);
            if (void 0 === n) n = null === (i = c.initializer) || void 0 === i ? void 0 : i.evaluate(t, e, s, null);
            c.assign(t, e, s, n);
            break;
          }
      }
    }
  }

  accept(t) {
    return t.visitDestructuringAssignmentExpression(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.DestructuringAssignmentExpression = DestructuringAssignmentExpression;

class DestructuringAssignmentSingleExpression {
  constructor(t, e, s) {
    this.target = t;
    this.source = e;
    this.initializer = s;
  }

  get $kind() {
    return 139289;
  }

  evaluate(t, e, s, r) {
    return;
  }

  assign(t, e, s, r) {
    var i;
    if (null == r) return;
    if ("object" !== typeof r) throw new Error("AUR0112");
    let n = this.source.evaluate(t, Scope.create(r), s, null);
    if (void 0 === n) n = null === (i = this.initializer) || void 0 === i ? void 0 : i.evaluate(t, e, s, null);
    this.target.assign(t, e, s, n);
  }

  accept(t) {
    return t.visitDestructuringAssignmentSingleExpression(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.DestructuringAssignmentSingleExpression = DestructuringAssignmentSingleExpression;

class DestructuringAssignmentRestExpression {
  constructor(t, e) {
    this.target = t;
    this.indexOrProperties = e;
  }

  get $kind() {
    return 139289;
  }

  evaluate(t, e, s, r) {
    return;
  }

  assign(t, e, s, r) {
    if (null == r) return;
    if ("object" !== typeof r) throw new Error("AUR0112");
    const i = this.indexOrProperties;
    let n;

    if ((0, _kernel.isArrayIndex)(i)) {
      if (!Array.isArray(r)) throw new Error("AUR0112");
      n = r.slice(i);
    } else n = Object.entries(r).reduce((t, [e, s]) => {
      if (!i.includes(e)) t[e] = s;
      return t;
    }, {});

    this.target.assign(t, e, s, n);
  }

  accept(t) {
    return t.visitDestructuringAssignmentRestExpression(this);
  }

  toString() {
    return Unparser.unparse(this);
  }

}

exports.DestructuringAssignmentRestExpression = DestructuringAssignmentRestExpression;

function N(t, e, s) {
  const r = null == e ? null : e[s];
  if (p(r)) return r;
  if (!(8 & t) && null == r) return null;
  throw new Error(`AUR0111:${s}`);
}

function K(t, e) {
  for (let s = 0, r = t.length; s < r; ++s) e(t, s, t[s]);
}

function q(t, e) {
  const s = Array(t.size);
  let r = -1;

  for (const e of t.entries()) s[++r] = e;

  K(s, e);
}

function H(t, e) {
  const s = Array(t.size);
  let r = -1;

  for (const e of t.keys()) s[++r] = e;

  K(s, e);
}

function Q(t, e) {
  const s = Array(t);

  for (let e = 0; e < t; ++e) s[e] = e;

  K(s, e);
}

var _;

exports.BindingMode = _;

(function (t) {
  t[t["oneTime"] = 1] = "oneTime";
  t[t["toView"] = 2] = "toView";
  t[t["fromView"] = 4] = "fromView";
  t[t["twoWay"] = 6] = "twoWay";
  t[t["default"] = 8] = "default";
})(_ || (exports.BindingMode = _ = {}));

var z;
exports.LifecycleFlags = z;

(function (t) {
  t[t["none"] = 0] = "none";
  t[t["persistentBindingFlags"] = 961] = "persistentBindingFlags";
  t[t["allowParentScopeTraversal"] = 64] = "allowParentScopeTraversal";
  t[t["observeLeafPropertiesOnly"] = 128] = "observeLeafPropertiesOnly";
  t[t["targetObserverFlags"] = 769] = "targetObserverFlags";
  t[t["noFlush"] = 256] = "noFlush";
  t[t["persistentTargetObserverQueue"] = 512] = "persistentTargetObserverQueue";
  t[t["bindingStrategy"] = 1] = "bindingStrategy";
  t[t["isStrictBindingStrategy"] = 1] = "isStrictBindingStrategy";
  t[t["fromBind"] = 2] = "fromBind";
  t[t["fromUnbind"] = 4] = "fromUnbind";
  t[t["mustEvaluate"] = 8] = "mustEvaluate";
  t[t["isTraversingParentScope"] = 16] = "isTraversingParentScope";
  t[t["dispose"] = 32] = "dispose";
})(z || (exports.LifecycleFlags = z = {}));

var W;

(function (t) {
  t[t["None"] = 0] = "None";
  t[t["Subscriber0"] = 1] = "Subscriber0";
  t[t["Subscriber1"] = 2] = "Subscriber1";
  t[t["Subscriber2"] = 4] = "Subscriber2";
  t[t["SubscribersRest"] = 8] = "SubscribersRest";
  t[t["Any"] = 15] = "Any";
})(W || (W = {}));

var G;
exports.DelegationStrategy = G;

(function (t) {
  t[t["none"] = 0] = "none";
  t[t["capturing"] = 1] = "capturing";
  t[t["bubbling"] = 2] = "bubbling";
})(G || (exports.DelegationStrategy = G = {}));

var Z;
exports.CollectionKind = Z;

(function (t) {
  t[t["indexed"] = 8] = "indexed";
  t[t["keyed"] = 4] = "keyed";
  t[t["array"] = 9] = "array";
  t[t["map"] = 6] = "map";
  t[t["set"] = 7] = "set";
})(Z || (exports.CollectionKind = Z = {}));

var J;
exports.AccessorType = J;

(function (t) {
  t[t["None"] = 0] = "None";
  t[t["Observer"] = 1] = "Observer";
  t[t["Node"] = 2] = "Node";
  t[t["Layout"] = 4] = "Layout";
  t[t["Primtive"] = 8] = "Primtive";
  t[t["Array"] = 18] = "Array";
  t[t["Set"] = 34] = "Set";
  t[t["Map"] = 66] = "Map";
})(J || (exports.AccessorType = J = {}));

function X(t, e) {
  const {
    length: s
  } = t;
  const r = Array(s);
  let i = 0;

  while (i < s) {
    r[i] = t[i];
    ++i;
  }

  if (void 0 !== e) r.deletedItems = e.slice(0);else if (void 0 !== t.deletedItems) r.deletedItems = t.deletedItems.slice(0);else r.deletedItems = [];
  r.isIndexMap = true;
  return r;
}

function Y(t = 0) {
  const e = Array(t);
  let s = 0;

  while (s < t) e[s] = s++;

  e.deletedItems = [];
  e.isIndexMap = true;
  return e;
}

function tt(t) {
  const e = t.slice();
  e.deletedItems = t.deletedItems.slice();
  e.isIndexMap = true;
  return e;
}

function et(t) {
  return t instanceof Array && true === t.isIndexMap;
}

function st(t) {
  return null == t ? rt : rt(t);
}

function rt(t) {
  const e = t.prototype;
  v(e, "subs", {
    get: it
  });
  b(e, "subscribe", nt);
  b(e, "unsubscribe", ot);
}

class SubscriberRecord {
  constructor() {
    this.sf = 0;
    this.count = 0;
  }

  add(t) {
    if (this.has(t)) return false;
    const e = this.sf;

    if (0 === (1 & e)) {
      this.s0 = t;
      this.sf |= 1;
    } else if (0 === (2 & e)) {
      this.s1 = t;
      this.sf |= 2;
    } else if (0 === (4 & e)) {
      this.s2 = t;
      this.sf |= 4;
    } else if (0 === (8 & e)) {
      this.sr = [t];
      this.sf |= 8;
    } else this.sr.push(t);

    ++this.count;
    return true;
  }

  has(t) {
    const e = this.sf;
    if ((1 & e) > 0 && this.s0 === t) return true;
    if ((2 & e) > 0 && this.s1 === t) return true;
    if ((4 & e) > 0 && this.s2 === t) return true;

    if ((8 & e) > 0) {
      const e = this.sr;
      const s = e.length;
      let r = 0;

      for (; r < s; ++r) if (e[r] === t) return true;
    }

    return false;
  }

  any() {
    return 0 !== this.sf;
  }

  remove(t) {
    const e = this.sf;

    if ((1 & e) > 0 && this.s0 === t) {
      this.s0 = void 0;
      this.sf = 1 ^ (1 | this.sf);
      --this.count;
      return true;
    } else if ((2 & e) > 0 && this.s1 === t) {
      this.s1 = void 0;
      this.sf = 2 ^ (2 | this.sf);
      --this.count;
      return true;
    } else if ((4 & e) > 0 && this.s2 === t) {
      this.s2 = void 0;
      this.sf = 4 ^ (4 | this.sf);
      --this.count;
      return true;
    } else if ((8 & e) > 0) {
      const e = this.sr;
      const s = e.length;
      let r = 0;

      for (; r < s; ++r) if (e[r] === t) {
        e.splice(r, 1);
        if (1 === s) this.sf = 8 ^ (8 | this.sf);
        --this.count;
        return true;
      }
    }

    return false;
  }

  notify(t, e, s) {
    const r = this.s0;
    const i = this.s1;
    const n = this.s2;
    let o = this.sr;
    if (void 0 !== o) o = o.slice();
    if (void 0 !== r) r.handleChange(t, e, s);
    if (void 0 !== i) i.handleChange(t, e, s);
    if (void 0 !== n) n.handleChange(t, e, s);

    if (void 0 !== o) {
      const r = o.length;
      let i;
      let n = 0;

      for (; n < r; ++n) {
        i = o[n];
        if (void 0 !== i) i.handleChange(t, e, s);
      }
    }
  }

  notifyCollection(t, e) {
    const s = this.s0;
    const r = this.s1;
    const i = this.s2;
    let n = this.sr;
    if (void 0 !== n) n = n.slice();
    if (void 0 !== s) s.handleCollectionChange(t, e);
    if (void 0 !== r) r.handleCollectionChange(t, e);
    if (void 0 !== i) i.handleCollectionChange(t, e);

    if (void 0 !== n) {
      const s = n.length;
      let r;
      let i = 0;

      for (; i < s; ++i) {
        r = n[i];
        if (void 0 !== r) r.handleCollectionChange(t, e);
      }
    }
  }

}

exports.SubscriberRecord = SubscriberRecord;

function it() {
  return w(this, "subs", new SubscriberRecord());
}

function nt(t) {
  return this.subs.add(t);
}

function ot(t) {
  return this.subs.remove(t);
}

function ht(t) {
  return null == t ? ct : ct(t);
}

function ct(t) {
  const e = t.prototype;
  v(e, "queue", {
    get: ut
  });
}

class FlushQueue {
  constructor() {
    this.t = false;
    this.i = new Set();
  }

  get count() {
    return this.i.size;
  }

  add(t) {
    this.i.add(t);
    if (this.t) return;
    this.t = true;

    try {
      this.i.forEach(at);
    } finally {
      this.t = false;
    }
  }

  clear() {
    this.i.clear();
    this.t = false;
  }

}

exports.FlushQueue = FlushQueue;
FlushQueue.instance = new FlushQueue();

function ut() {
  return FlushQueue.instance;
}

function at(t, e, s) {
  s.delete(t);
  t.flush();
}

class CollectionLengthObserver {
  constructor(t) {
    this.owner = t;
    this.type = 18;
    this.f = 0;
    this.v = this.h = (this.o = t.collection).length;
  }

  getValue() {
    return this.o.length;
  }

  setValue(t, e) {
    const s = this.v;

    if (t !== s && (0, _kernel.isArrayIndex)(t)) {
      if (0 === (256 & e)) this.o.length = t;
      this.v = t;
      this.h = s;
      this.f = e;
      this.queue.add(this);
    }
  }

  handleCollectionChange(t, e) {
    const s = this.v;
    const r = this.o.length;

    if ((this.v = r) !== s) {
      this.h = s;
      this.f = e;
      this.queue.add(this);
    }
  }

  flush() {
    vt = this.h;
    this.h = this.v;
    this.subs.notify(this.v, vt, this.f);
  }

}

exports.CollectionLengthObserver = CollectionLengthObserver;

class CollectionSizeObserver {
  constructor(t) {
    this.owner = t;
    this.f = 0;
    this.v = this.h = (this.o = t.collection).size;
    this.type = this.o instanceof Map ? 66 : 34;
  }

  getValue() {
    return this.o.size;
  }

  setValue() {
    throw new Error("AUR02");
  }

  handleCollectionChange(t, e) {
    const s = this.v;
    const r = this.o.size;

    if ((this.v = r) !== s) {
      this.h = s;
      this.f = e;
      this.queue.add(this);
    }
  }

  flush() {
    vt = this.h;
    this.h = this.v;
    this.subs.notify(this.v, vt, this.f);
  }

}

exports.CollectionSizeObserver = CollectionSizeObserver;

function lt(t) {
  const e = t.prototype;
  b(e, "subscribe", ft, true);
  b(e, "unsubscribe", dt, true);
  ht(t);
  st(t);
}

function ft(t) {
  if (this.subs.add(t) && 1 === this.subs.count) this.owner.subscribe(this);
}

function dt(t) {
  if (this.subs.remove(t) && 0 === this.subs.count) this.owner.subscribe(this);
}

lt(CollectionLengthObserver);
lt(CollectionSizeObserver);
let vt;
const pt = new WeakMap();

function gt(t, e) {
  if (t === e) return 0;
  t = null === t ? "null" : t.toString();
  e = null === e ? "null" : e.toString();
  return t < e ? -1 : 1;
}

function wt(t, e) {
  if (void 0 === t) if (void 0 === e) return 0;else return 1;
  if (void 0 === e) return -1;
  return 0;
}

function bt(t, e, s, r, i) {
  let n, o, h, c, u;
  let a, l;

  for (a = s + 1; a < r; a++) {
    n = t[a];
    o = e[a];

    for (l = a - 1; l >= s; l--) {
      h = t[l];
      c = e[l];
      u = i(h, n);

      if (u > 0) {
        t[l + 1] = h;
        e[l + 1] = c;
      } else break;
    }

    t[l + 1] = n;
    e[l + 1] = o;
  }
}

function Et(t, e, s, r, i) {
  let n = 0,
      o = 0;
  let h, c, u;
  let a, l, f;
  let d, v, p;
  let g, w;
  let b, E, A, y;
  let m, U, x, S;

  while (true) {
    if (r - s <= 10) {
      bt(t, e, s, r, i);
      return;
    }

    n = s + (r - s >> 1);
    h = t[s];
    a = e[s];
    c = t[r - 1];
    l = e[r - 1];
    u = t[n];
    f = e[n];
    d = i(h, c);

    if (d > 0) {
      g = h;
      w = a;
      h = c;
      a = l;
      c = g;
      l = w;
    }

    v = i(h, u);

    if (v >= 0) {
      g = h;
      w = a;
      h = u;
      a = f;
      u = c;
      f = l;
      c = g;
      l = w;
    } else {
      p = i(c, u);

      if (p > 0) {
        g = c;
        w = l;
        c = u;
        l = f;
        u = g;
        f = w;
      }
    }

    t[s] = h;
    e[s] = a;
    t[r - 1] = u;
    e[r - 1] = f;
    b = c;
    E = l;
    A = s + 1;
    y = r - 1;
    t[n] = t[A];
    e[n] = e[A];
    t[A] = b;
    e[A] = E;

    t: for (o = A + 1; o < y; o++) {
      m = t[o];
      U = e[o];
      x = i(m, b);

      if (x < 0) {
        t[o] = t[A];
        e[o] = e[A];
        t[A] = m;
        e[A] = U;
        A++;
      } else if (x > 0) {
        do {
          y--;
          if (y == o) break t;
          S = t[y];
          x = i(S, b);
        } while (x > 0);

        t[o] = t[y];
        e[o] = e[y];
        t[y] = m;
        e[y] = U;

        if (x < 0) {
          m = t[o];
          U = e[o];
          t[o] = t[A];
          e[o] = e[A];
          t[A] = m;
          e[A] = U;
          A++;
        }
      }
    }

    if (r - y < A - s) {
      Et(t, e, y, r, i);
      r = A;
    } else {
      Et(t, e, s, A, i);
      s = y;
    }
  }
}

const At = Array.prototype;
const yt = At.push;
const mt = At.unshift;
const Ut = At.pop;
const xt = At.shift;
const St = At.splice;
const Ot = At.reverse;
const Ct = At.sort;
const kt = {
  push: yt,
  unshift: mt,
  pop: Ut,
  shift: xt,
  splice: St,
  reverse: Ot,
  sort: Ct
};
const Bt = ["push", "unshift", "pop", "shift", "splice", "reverse", "sort"];
const $t = {
  push: function (...t) {
    const e = pt.get(this);
    if (void 0 === e) return yt.apply(this, t);
    const s = this.length;
    const r = t.length;
    if (0 === r) return s;
    this.length = e.indexMap.length = s + r;
    let i = s;

    while (i < this.length) {
      this[i] = t[i - s];
      e.indexMap[i] = -2;
      i++;
    }

    e.notify();
    return this.length;
  },
  unshift: function (...t) {
    const e = pt.get(this);
    if (void 0 === e) return mt.apply(this, t);
    const s = t.length;
    const r = new Array(s);
    let i = 0;

    while (i < s) r[i++] = -2;

    mt.apply(e.indexMap, r);
    const n = mt.apply(this, t);
    e.notify();
    return n;
  },
  pop: function () {
    const t = pt.get(this);
    if (void 0 === t) return Ut.call(this);
    const e = t.indexMap;
    const s = Ut.call(this);
    const r = e.length - 1;
    if (e[r] > -1) e.deletedItems.push(e[r]);
    Ut.call(e);
    t.notify();
    return s;
  },
  shift: function () {
    const t = pt.get(this);
    if (void 0 === t) return xt.call(this);
    const e = t.indexMap;
    const s = xt.call(this);
    if (e[0] > -1) e.deletedItems.push(e[0]);
    xt.call(e);
    t.notify();
    return s;
  },
  splice: function (...t) {
    const e = t[0];
    const s = t[1];
    const r = pt.get(this);
    if (void 0 === r) return St.apply(this, t);
    const i = this.length;
    const n = 0 | e;
    const o = n < 0 ? Math.max(i + n, 0) : Math.min(n, i);
    const h = r.indexMap;
    const c = t.length;
    const u = 0 === c ? 0 : 1 === c ? i - o : s;

    if (u > 0) {
      let t = o;
      const e = t + u;

      while (t < e) {
        if (h[t] > -1) h.deletedItems.push(h[t]);
        t++;
      }
    }

    if (c > 2) {
      const t = c - 2;
      const r = new Array(t);
      let i = 0;

      while (i < t) r[i++] = -2;

      St.call(h, e, s, ...r);
    } else St.apply(h, t);

    const a = St.apply(this, t);
    r.notify();
    return a;
  },
  reverse: function () {
    const t = pt.get(this);

    if (void 0 === t) {
      Ot.call(this);
      return this;
    }

    const e = this.length;
    const s = e / 2 | 0;
    let r = 0;

    while (r !== s) {
      const s = e - r - 1;
      const i = this[r];
      const n = t.indexMap[r];
      const o = this[s];
      const h = t.indexMap[s];
      this[r] = o;
      t.indexMap[r] = h;
      this[s] = i;
      t.indexMap[s] = n;
      r++;
    }

    t.notify();
    return this;
  },
  sort: function (t) {
    const e = pt.get(this);

    if (void 0 === e) {
      Ct.call(this, t);
      return this;
    }

    const s = this.length;
    if (s < 2) return this;
    Et(this, e.indexMap, 0, s, wt);
    let r = 0;

    while (r < s) {
      if (void 0 === this[r]) break;
      r++;
    }

    if (void 0 === t || !p(t)) t = gt;
    Et(this, e.indexMap, 0, r, t);
    e.notify();
    return this;
  }
};

for (const t of Bt) v($t[t], "observing", {
  value: true,
  writable: false,
  configurable: false,
  enumerable: false
});

let Lt = false;

function Rt() {
  for (const t of Bt) if (true !== At[t].observing) w(At, t, $t[t]);
}

function Pt() {
  for (const t of Bt) if (true === At[t].observing) w(At, t, kt[t]);
}

class ArrayObserver {
  constructor(t) {
    this.type = 18;

    if (!Lt) {
      Lt = true;
      Rt();
    }

    this.indexObservers = {};
    this.collection = t;
    this.indexMap = Y(t.length);
    this.lenObs = void 0;
    pt.set(t, this);
  }

  notify() {
    const t = this.indexMap;
    const e = this.collection.length;
    this.indexMap = Y(e);
    this.subs.notifyCollection(t, 0);
  }

  getLengthObserver() {
    var t;
    return null !== (t = this.lenObs) && void 0 !== t ? t : this.lenObs = new CollectionLengthObserver(this);
  }

  getIndexObserver(t) {
    var e;
    var s;
    return null !== (e = (s = this.indexObservers)[t]) && void 0 !== e ? e : s[t] = new ArrayIndexObserver(this, t);
  }

}

exports.ArrayObserver = ArrayObserver;

class ArrayIndexObserver {
  constructor(t, e) {
    this.owner = t;
    this.index = e;
    this.doNotCache = true;
    this.value = this.getValue();
  }

  getValue() {
    return this.owner.collection[this.index];
  }

  setValue(t, e) {
    if (t === this.getValue()) return;
    const s = this.owner;
    const r = this.index;
    const i = s.indexMap;
    if (i[r] > -1) i.deletedItems.push(i[r]);
    i[r] = -2;
    s.collection[r] = t;
    s.notify();
  }

  handleCollectionChange(t, e) {
    const s = this.index;
    const r = t[s] === s;
    if (r) return;
    const i = this.value;
    const n = this.value = this.getValue();
    if (i !== n) this.subs.notify(n, i, e);
  }

  subscribe(t) {
    if (this.subs.add(t) && 1 === this.subs.count) this.owner.subscribe(this);
  }

  unsubscribe(t) {
    if (this.subs.remove(t) && 0 === this.subs.count) this.owner.unsubscribe(this);
  }

}

exports.ArrayIndexObserver = ArrayIndexObserver;
st(ArrayObserver);
st(ArrayIndexObserver);

function Tt(t) {
  let e = pt.get(t);
  if (void 0 === e) e = new ArrayObserver(t);
  return e;
}

function jt(t) {
  let e = 0;
  let s = 0;
  const r = t.length;

  for (let i = 0; i < r; ++i) {
    while (t.deletedItems[s] <= i - e) {
      ++s;
      --e;
    }

    if (-2 === t[i]) ++e;else t[i] += e;
  }
}

function It(t, e) {
  const s = t.slice();
  const r = e.length;
  let i = 0;
  let n = 0;

  while (i < r) {
    n = e[i];
    if (-2 !== n) t[i] = s[n];
    ++i;
  }
}

const Mt = new WeakMap();
const Dt = Set.prototype;
const Ft = Dt.add;
const Vt = Dt.clear;
const Nt = Dt.delete;
const Kt = {
  add: Ft,
  clear: Vt,
  delete: Nt
};
const qt = ["add", "clear", "delete"];
const Ht = {
  add: function (t) {
    const e = Mt.get(this);

    if (void 0 === e) {
      Ft.call(this, t);
      return this;
    }

    const s = this.size;
    Ft.call(this, t);
    const r = this.size;
    if (r === s) return this;
    e.indexMap[s] = -2;
    e.notify();
    return this;
  },
  clear: function () {
    const t = Mt.get(this);
    if (void 0 === t) return Vt.call(this);
    const e = this.size;

    if (e > 0) {
      const e = t.indexMap;
      let s = 0;

      for (const t of this.keys()) {
        if (e[s] > -1) e.deletedItems.push(e[s]);
        s++;
      }

      Vt.call(this);
      e.length = 0;
      t.notify();
    }

    return;
  },
  delete: function (t) {
    const e = Mt.get(this);
    if (void 0 === e) return Nt.call(this, t);
    const s = this.size;
    if (0 === s) return false;
    let r = 0;
    const i = e.indexMap;

    for (const s of this.keys()) {
      if (s === t) {
        if (i[r] > -1) i.deletedItems.push(i[r]);
        i.splice(r, 1);
        const s = Nt.call(this, t);
        if (true === s) e.notify();
        return s;
      }

      r++;
    }

    return false;
  }
};
const Qt = {
  writable: true,
  enumerable: false,
  configurable: true
};

for (const t of qt) v(Ht[t], "observing", {
  value: true,
  writable: false,
  configurable: false,
  enumerable: false
});

let _t = false;

function zt() {
  for (const t of qt) if (true !== Dt[t].observing) v(Dt, t, { ...Qt,
    value: Ht[t]
  });
}

function Wt() {
  for (const t of qt) if (true === Dt[t].observing) v(Dt, t, { ...Qt,
    value: Kt[t]
  });
}

class SetObserver {
  constructor(t) {
    this.type = 34;

    if (!_t) {
      _t = true;
      zt();
    }

    this.collection = t;
    this.indexMap = Y(t.size);
    this.lenObs = void 0;
    Mt.set(t, this);
  }

  notify() {
    const t = this.indexMap;
    const e = this.collection.size;
    this.indexMap = Y(e);
    this.subs.notifyCollection(t, 0);
  }

  getLengthObserver() {
    var t;
    return null !== (t = this.lenObs) && void 0 !== t ? t : this.lenObs = new CollectionSizeObserver(this);
  }

}

exports.SetObserver = SetObserver;
st(SetObserver);

function Gt(t) {
  let e = Mt.get(t);
  if (void 0 === e) e = new SetObserver(t);
  return e;
}

const Zt = new WeakMap();
const Jt = Map.prototype;
const Xt = Jt.set;
const Yt = Jt.clear;
const te = Jt.delete;
const ee = {
  set: Xt,
  clear: Yt,
  delete: te
};
const se = ["set", "clear", "delete"];
const re = {
  set: function (t, e) {
    const s = Zt.get(this);

    if (void 0 === s) {
      Xt.call(this, t, e);
      return this;
    }

    const r = this.get(t);
    const i = this.size;
    Xt.call(this, t, e);
    const n = this.size;

    if (n === i) {
      let e = 0;

      for (const i of this.entries()) {
        if (i[0] === t) {
          if (i[1] !== r) {
            s.indexMap.deletedItems.push(s.indexMap[e]);
            s.indexMap[e] = -2;
            s.notify();
          }

          return this;
        }

        e++;
      }

      return this;
    }

    s.indexMap[i] = -2;
    s.notify();
    return this;
  },
  clear: function () {
    const t = Zt.get(this);
    if (void 0 === t) return Yt.call(this);
    const e = this.size;

    if (e > 0) {
      const e = t.indexMap;
      let s = 0;

      for (const t of this.keys()) {
        if (e[s] > -1) e.deletedItems.push(e[s]);
        s++;
      }

      Yt.call(this);
      e.length = 0;
      t.notify();
    }

    return;
  },
  delete: function (t) {
    const e = Zt.get(this);
    if (void 0 === e) return te.call(this, t);
    const s = this.size;
    if (0 === s) return false;
    let r = 0;
    const i = e.indexMap;

    for (const s of this.keys()) {
      if (s === t) {
        if (i[r] > -1) i.deletedItems.push(i[r]);
        i.splice(r, 1);
        const s = te.call(this, t);
        if (true === s) e.notify();
        return s;
      }

      ++r;
    }

    return false;
  }
};
const ie = {
  writable: true,
  enumerable: false,
  configurable: true
};

for (const t of se) v(re[t], "observing", {
  value: true,
  writable: false,
  configurable: false,
  enumerable: false
});

let ne = false;

function oe() {
  for (const t of se) if (true !== Jt[t].observing) v(Jt, t, { ...ie,
    value: re[t]
  });
}

function he() {
  for (const t of se) if (true === Jt[t].observing) v(Jt, t, { ...ie,
    value: ee[t]
  });
}

class MapObserver {
  constructor(t) {
    this.type = 66;

    if (!ne) {
      ne = true;
      oe();
    }

    this.collection = t;
    this.indexMap = Y(t.size);
    this.lenObs = void 0;
    Zt.set(t, this);
  }

  notify() {
    const t = this.indexMap;
    const e = this.collection.size;
    this.indexMap = Y(e);
    this.subs.notifyCollection(t, 0);
  }

  getLengthObserver() {
    var t;
    return null !== (t = this.lenObs) && void 0 !== t ? t : this.lenObs = new CollectionSizeObserver(this);
  }

}

exports.MapObserver = MapObserver;
st(MapObserver);

function ce(t) {
  let e = Zt.get(t);
  if (void 0 === e) e = new MapObserver(t);
  return e;
}

function ue(t, e) {
  const s = this.oL.getObserver(t, e);
  this.obs.add(s);
}

function ae() {
  return w(this, "obs", new BindingObserverRecord(this));
}

function le(t) {
  let e;
  if (t instanceof Array) e = Tt(t);else if (t instanceof Set) e = Gt(t);else if (t instanceof Map) e = ce(t);else throw new Error("AUR0210");
  this.obs.add(e);
}

function fe(t) {
  this.obs.add(t);
}

function de() {
  throw new Error(`AUR2011:handleChange`);
}

function ve() {
  throw new Error("AUR2012:handleCollectionChange");
}

class BindingObserverRecord {
  constructor(t) {
    this.version = 0;
    this.count = 0;
    this.o = new Map();
    this.b = t;
  }

  handleChange(t, e, s) {
    return this.b.interceptor.handleChange(t, e, s);
  }

  handleCollectionChange(t, e) {
    this.b.interceptor.handleCollectionChange(t, e);
  }

  add(t) {
    if (!this.o.has(t)) {
      t.subscribe(this);
      ++this.count;
    }

    this.o.set(t, this.version);
  }

  clear() {
    this.o.forEach(ge, this);
    this.count = this.o.size;
  }

  clearAll() {
    this.o.forEach(pe, this);
    this.o.clear();
    this.count = 0;
  }

}

exports.BindingObserverRecord = BindingObserverRecord;

function pe(t, e) {
  e.unsubscribe(this);
}

function ge(t, e) {
  if (this.version !== t) {
    e.unsubscribe(this);
    this.o.delete(e);
  }
}

function we(t) {
  const e = t.prototype;
  b(e, "observe", ue, true);
  b(e, "observeCollection", le, true);
  b(e, "subscribeTo", fe, true);
  v(e, "obs", {
    get: ae
  });
  b(e, "handleChange", de);
  b(e, "handleCollectionChange", ve);
  return t;
}

function be(t) {
  return null == t ? we : we(t);
}

class BindingMediator {
  constructor(t, e, s, r) {
    this.key = t;
    this.binding = e;
    this.oL = s;
    this.locator = r;
    this.interceptor = this;
  }

  $bind() {
    throw new Error("AUR0213:$bind");
  }

  $unbind() {
    throw new Error("AUR0214:$unbind");
  }

  handleChange(t, e, s) {
    this.binding[this.key](t, e, s);
  }

}

exports.BindingMediator = BindingMediator;
we(BindingMediator);

const Ee = _kernel.DI.createInterface("IExpressionParser", t => t.singleton(ExpressionParser));

exports.IExpressionParser = Ee;

class ExpressionParser {
  constructor() {
    this.u = E();
    this.A = E();
    this.U = E();
  }

  parse(t, e) {
    let s;

    switch (e) {
      case 16:
        return new CustomExpression(t);

      case 1:
        s = this.U[t];
        if (void 0 === s) s = this.U[t] = this.$parse(t, e);
        return s;

      case 2:
        s = this.A[t];
        if (void 0 === s) s = this.A[t] = this.$parse(t, e);
        return s;

      default:
        if (0 === t.length) {
          if ((e & (4 | 8)) > 0) return PrimitiveLiteralExpression.$empty;
          throw new Error("AUR0169");
        }

        s = this.u[t];
        if (void 0 === s) s = this.u[t] = this.$parse(t, e);
        return s;
    }
  }

  $parse(t, e) {
    Re.ip = t;
    Re.length = t.length;
    Re.index = 0;
    Re.O = t.charCodeAt(0);
    return Te(Re, 0, 61, void 0 === e ? 8 : e);
  }

}

var Ae;
exports.Char = Ae;

(function (t) {
  t[t["Null"] = 0] = "Null";
  t[t["Backspace"] = 8] = "Backspace";
  t[t["Tab"] = 9] = "Tab";
  t[t["LineFeed"] = 10] = "LineFeed";
  t[t["VerticalTab"] = 11] = "VerticalTab";
  t[t["FormFeed"] = 12] = "FormFeed";
  t[t["CarriageReturn"] = 13] = "CarriageReturn";
  t[t["Space"] = 32] = "Space";
  t[t["Exclamation"] = 33] = "Exclamation";
  t[t["DoubleQuote"] = 34] = "DoubleQuote";
  t[t["Dollar"] = 36] = "Dollar";
  t[t["Percent"] = 37] = "Percent";
  t[t["Ampersand"] = 38] = "Ampersand";
  t[t["SingleQuote"] = 39] = "SingleQuote";
  t[t["OpenParen"] = 40] = "OpenParen";
  t[t["CloseParen"] = 41] = "CloseParen";
  t[t["Asterisk"] = 42] = "Asterisk";
  t[t["Plus"] = 43] = "Plus";
  t[t["Comma"] = 44] = "Comma";
  t[t["Minus"] = 45] = "Minus";
  t[t["Dot"] = 46] = "Dot";
  t[t["Slash"] = 47] = "Slash";
  t[t["Semicolon"] = 59] = "Semicolon";
  t[t["Backtick"] = 96] = "Backtick";
  t[t["OpenBracket"] = 91] = "OpenBracket";
  t[t["Backslash"] = 92] = "Backslash";
  t[t["CloseBracket"] = 93] = "CloseBracket";
  t[t["Caret"] = 94] = "Caret";
  t[t["Underscore"] = 95] = "Underscore";
  t[t["OpenBrace"] = 123] = "OpenBrace";
  t[t["Bar"] = 124] = "Bar";
  t[t["CloseBrace"] = 125] = "CloseBrace";
  t[t["Colon"] = 58] = "Colon";
  t[t["LessThan"] = 60] = "LessThan";
  t[t["Equals"] = 61] = "Equals";
  t[t["GreaterThan"] = 62] = "GreaterThan";
  t[t["Question"] = 63] = "Question";
  t[t["Zero"] = 48] = "Zero";
  t[t["One"] = 49] = "One";
  t[t["Two"] = 50] = "Two";
  t[t["Three"] = 51] = "Three";
  t[t["Four"] = 52] = "Four";
  t[t["Five"] = 53] = "Five";
  t[t["Six"] = 54] = "Six";
  t[t["Seven"] = 55] = "Seven";
  t[t["Eight"] = 56] = "Eight";
  t[t["Nine"] = 57] = "Nine";
  t[t["UpperA"] = 65] = "UpperA";
  t[t["UpperB"] = 66] = "UpperB";
  t[t["UpperC"] = 67] = "UpperC";
  t[t["UpperD"] = 68] = "UpperD";
  t[t["UpperE"] = 69] = "UpperE";
  t[t["UpperF"] = 70] = "UpperF";
  t[t["UpperG"] = 71] = "UpperG";
  t[t["UpperH"] = 72] = "UpperH";
  t[t["UpperI"] = 73] = "UpperI";
  t[t["UpperJ"] = 74] = "UpperJ";
  t[t["UpperK"] = 75] = "UpperK";
  t[t["UpperL"] = 76] = "UpperL";
  t[t["UpperM"] = 77] = "UpperM";
  t[t["UpperN"] = 78] = "UpperN";
  t[t["UpperO"] = 79] = "UpperO";
  t[t["UpperP"] = 80] = "UpperP";
  t[t["UpperQ"] = 81] = "UpperQ";
  t[t["UpperR"] = 82] = "UpperR";
  t[t["UpperS"] = 83] = "UpperS";
  t[t["UpperT"] = 84] = "UpperT";
  t[t["UpperU"] = 85] = "UpperU";
  t[t["UpperV"] = 86] = "UpperV";
  t[t["UpperW"] = 87] = "UpperW";
  t[t["UpperX"] = 88] = "UpperX";
  t[t["UpperY"] = 89] = "UpperY";
  t[t["UpperZ"] = 90] = "UpperZ";
  t[t["LowerA"] = 97] = "LowerA";
  t[t["LowerB"] = 98] = "LowerB";
  t[t["LowerC"] = 99] = "LowerC";
  t[t["LowerD"] = 100] = "LowerD";
  t[t["LowerE"] = 101] = "LowerE";
  t[t["LowerF"] = 102] = "LowerF";
  t[t["LowerG"] = 103] = "LowerG";
  t[t["LowerH"] = 104] = "LowerH";
  t[t["LowerI"] = 105] = "LowerI";
  t[t["LowerJ"] = 106] = "LowerJ";
  t[t["LowerK"] = 107] = "LowerK";
  t[t["LowerL"] = 108] = "LowerL";
  t[t["LowerM"] = 109] = "LowerM";
  t[t["LowerN"] = 110] = "LowerN";
  t[t["LowerO"] = 111] = "LowerO";
  t[t["LowerP"] = 112] = "LowerP";
  t[t["LowerQ"] = 113] = "LowerQ";
  t[t["LowerR"] = 114] = "LowerR";
  t[t["LowerS"] = 115] = "LowerS";
  t[t["LowerT"] = 116] = "LowerT";
  t[t["LowerU"] = 117] = "LowerU";
  t[t["LowerV"] = 118] = "LowerV";
  t[t["LowerW"] = 119] = "LowerW";
  t[t["LowerX"] = 120] = "LowerX";
  t[t["LowerY"] = 121] = "LowerY";
  t[t["LowerZ"] = 122] = "LowerZ";
})(Ae || (exports.Char = Ae = {}));

function ye(t) {
  switch (t) {
    case 98:
      return 8;

    case 116:
      return 9;

    case 110:
      return 10;

    case 118:
      return 11;

    case 102:
      return 12;

    case 114:
      return 13;

    case 34:
      return 34;

    case 39:
      return 39;

    case 92:
      return 92;

    default:
      return t;
  }
}

var me;
exports.Access = me;

(function (t) {
  t[t["Reset"] = 0] = "Reset";
  t[t["Ancestor"] = 511] = "Ancestor";
  t[t["This"] = 512] = "This";
  t[t["Scope"] = 1024] = "Scope";
  t[t["Member"] = 2048] = "Member";
  t[t["Keyed"] = 4096] = "Keyed";
})(me || (exports.Access = me = {}));

var Ue;
exports.Precedence = Ue;

(function (t) {
  t[t["Variadic"] = 61] = "Variadic";
  t[t["Assign"] = 62] = "Assign";
  t[t["Conditional"] = 63] = "Conditional";
  t[t["LogicalOR"] = 64] = "LogicalOR";
  t[t["LogicalAND"] = 128] = "LogicalAND";
  t[t["Equality"] = 192] = "Equality";
  t[t["Relational"] = 256] = "Relational";
  t[t["Additive"] = 320] = "Additive";
  t[t["Multiplicative"] = 384] = "Multiplicative";
  t[t["Binary"] = 448] = "Binary";
  t[t["LeftHandSide"] = 449] = "LeftHandSide";
  t[t["Primary"] = 450] = "Primary";
  t[t["Unary"] = 451] = "Unary";
})(Ue || (exports.Precedence = Ue = {}));

var xe;

(function (t) {
  t[t["EOF"] = 1572864] = "EOF";
  t[t["ExpressionTerminal"] = 1048576] = "ExpressionTerminal";
  t[t["AccessScopeTerminal"] = 524288] = "AccessScopeTerminal";
  t[t["ClosingToken"] = 262144] = "ClosingToken";
  t[t["OpeningToken"] = 131072] = "OpeningToken";
  t[t["BinaryOp"] = 65536] = "BinaryOp";
  t[t["UnaryOp"] = 32768] = "UnaryOp";
  t[t["LeftHandSide"] = 16384] = "LeftHandSide";
  t[t["StringOrNumericLiteral"] = 12288] = "StringOrNumericLiteral";
  t[t["NumericLiteral"] = 8192] = "NumericLiteral";
  t[t["StringLiteral"] = 4096] = "StringLiteral";
  t[t["IdentifierName"] = 3072] = "IdentifierName";
  t[t["Keyword"] = 2048] = "Keyword";
  t[t["Identifier"] = 1024] = "Identifier";
  t[t["Contextual"] = 512] = "Contextual";
  t[t["Precedence"] = 448] = "Precedence";
  t[t["Type"] = 63] = "Type";
  t[t["FalseKeyword"] = 2048] = "FalseKeyword";
  t[t["TrueKeyword"] = 2049] = "TrueKeyword";
  t[t["NullKeyword"] = 2050] = "NullKeyword";
  t[t["UndefinedKeyword"] = 2051] = "UndefinedKeyword";
  t[t["ThisScope"] = 3076] = "ThisScope";
  t[t["ParentScope"] = 3078] = "ParentScope";
  t[t["OpenParen"] = 671751] = "OpenParen";
  t[t["OpenBrace"] = 131080] = "OpenBrace";
  t[t["Dot"] = 16393] = "Dot";
  t[t["CloseBrace"] = 1835018] = "CloseBrace";
  t[t["CloseParen"] = 1835019] = "CloseParen";
  t[t["Comma"] = 1572876] = "Comma";
  t[t["OpenBracket"] = 671757] = "OpenBracket";
  t[t["CloseBracket"] = 1835022] = "CloseBracket";
  t[t["Colon"] = 1572879] = "Colon";
  t[t["Question"] = 1572880] = "Question";
  t[t["Ampersand"] = 1572883] = "Ampersand";
  t[t["Bar"] = 1572884] = "Bar";
  t[t["BarBar"] = 1638549] = "BarBar";
  t[t["AmpersandAmpersand"] = 1638614] = "AmpersandAmpersand";
  t[t["EqualsEquals"] = 1638679] = "EqualsEquals";
  t[t["ExclamationEquals"] = 1638680] = "ExclamationEquals";
  t[t["EqualsEqualsEquals"] = 1638681] = "EqualsEqualsEquals";
  t[t["ExclamationEqualsEquals"] = 1638682] = "ExclamationEqualsEquals";
  t[t["LessThan"] = 1638747] = "LessThan";
  t[t["GreaterThan"] = 1638748] = "GreaterThan";
  t[t["LessThanEquals"] = 1638749] = "LessThanEquals";
  t[t["GreaterThanEquals"] = 1638750] = "GreaterThanEquals";
  t[t["InKeyword"] = 1640799] = "InKeyword";
  t[t["InstanceOfKeyword"] = 1640800] = "InstanceOfKeyword";
  t[t["Plus"] = 623009] = "Plus";
  t[t["Minus"] = 623010] = "Minus";
  t[t["TypeofKeyword"] = 34851] = "TypeofKeyword";
  t[t["VoidKeyword"] = 34852] = "VoidKeyword";
  t[t["Asterisk"] = 1638885] = "Asterisk";
  t[t["Percent"] = 1638886] = "Percent";
  t[t["Slash"] = 1638887] = "Slash";
  t[t["Equals"] = 1048616] = "Equals";
  t[t["Exclamation"] = 32809] = "Exclamation";
  t[t["TemplateTail"] = 540714] = "TemplateTail";
  t[t["TemplateContinuation"] = 540715] = "TemplateContinuation";
  t[t["OfKeyword"] = 1051180] = "OfKeyword";
})(xe || (xe = {}));

const Se = PrimitiveLiteralExpression.$false;
const Oe = PrimitiveLiteralExpression.$true;
const Ce = PrimitiveLiteralExpression.$null;
const ke = PrimitiveLiteralExpression.$undefined;
const Be = AccessThisExpression.$this;
const $e = AccessThisExpression.$parent;
var Le;
exports.ExpressionType = Le;

(function (t) {
  t[t["None"] = 0] = "None";
  t[t["Interpolation"] = 1] = "Interpolation";
  t[t["IsIterator"] = 2] = "IsIterator";
  t[t["IsFunction"] = 4] = "IsFunction";
  t[t["IsProperty"] = 8] = "IsProperty";
  t[t["IsCustom"] = 16] = "IsCustom";
})(Le || (exports.ExpressionType = Le = {}));

class ParserState {
  constructor(t) {
    this.ip = t;
    this.index = 0;
    this.C = 0;
    this.B = 0;
    this.$ = 1572864;
    this.L = "";
    this.R = true;
    this.length = t.length;
    this.O = t.charCodeAt(0);
  }

  get P() {
    return this.ip.slice(this.C, this.index);
  }

}

exports.ParserState = ParserState;
const Re = new ParserState("");

function Pe(t, e) {
  Re.ip = t;
  Re.length = t.length;
  Re.index = 0;
  Re.O = t.charCodeAt(0);
  return Te(Re, 0, 61, void 0 === e ? 8 : e);
}

function Te(t, e, s, r) {
  if (16 === r) return new CustomExpression(t.ip);

  if (0 === t.index) {
    if (1 & r) return Fe(t);
    Ne(t);
    if (1048576 & t.$) throw new Error(`AUR0151:${t.ip}`);
  }

  t.R = 448 > s;
  let i;

  if (32768 & t.$) {
    const s = Ze[63 & t.$];
    Ne(t);
    i = new UnaryExpression(s, Te(t, e, 449, r));
    t.R = false;
  } else {
    t: switch (t.$) {
      case 3078:
        t.R = false;

        do {
          Ne(t);
          e++;

          if (We(t, 16393)) {
            if (16393 === t.$) throw new Error(`AUR0152:${t.ip}`);else if (1572864 === t.$) throw new Error(`AUR0153:${t.ip}`);
          } else if (524288 & t.$) {
            const t = 511 & e;
            i = 0 === t ? Be : 1 === t ? $e : new AccessThisExpression(t);
            e = 512;
            break t;
          } else throw new Error(`AUR0154:${t.ip}`);
        } while (3078 === t.$);

      case 1024:
        if (2 & r) i = new BindingIdentifier(t.L);else {
          i = new AccessScopeExpression(t.L, 511 & e);
          e = 1024;
        }
        t.R = true;
        Ne(t);
        break;

      case 3076:
        t.R = false;
        Ne(t);
        i = Be;
        e = 512;
        break;

      case 671751:
        Ne(t);
        i = Te(t, 0, 62, r);
        Ge(t, 1835019);
        e = 0;
        break;

      case 671757:
        i = t.ip.search(/\s+of\s+/) > t.index ? je(t) : Ie(t, e, r);
        e = 0;
        break;

      case 131080:
        i = De(t, r);
        e = 0;
        break;

      case 540714:
        i = new TemplateExpression([t.L]);
        t.R = false;
        Ne(t);
        e = 0;
        break;

      case 540715:
        i = Ve(t, e, r, i, false);
        e = 0;
        break;

      case 4096:
      case 8192:
        i = new PrimitiveLiteralExpression(t.L);
        t.R = false;
        Ne(t);
        e = 0;
        break;

      case 2050:
      case 2051:
      case 2049:
      case 2048:
        i = Ze[63 & t.$];
        t.R = false;
        Ne(t);
        e = 0;
        break;

      default:
        if (t.index >= t.length) throw new Error(`AUR0155:${t.ip}`);else throw new Error(`AUR0156:${t.ip}`);
    }

    if (2 & r) return Me(t, i);
    if (449 < s) return i;
    let n = t.L;

    while ((16384 & t.$) > 0) {
      const s = [];
      let o;

      switch (t.$) {
        case 16393:
          t.R = true;
          Ne(t);
          if (0 === (3072 & t.$)) throw new Error(`AUR0153:${t.ip}`);
          n = t.L;
          Ne(t);
          e = (e & (512 | 1024)) << 1 | 2048 & e | (4096 & e) >> 1;

          if (671751 === t.$) {
            if (0 === e) e = 2048;
            continue;
          }

          if (1024 & e) i = new AccessScopeExpression(n, i.ancestor);else i = new AccessMemberExpression(i, n);
          continue;

        case 671757:
          t.R = true;
          Ne(t);
          e = 4096;
          i = new AccessKeyedExpression(i, Te(t, 0, 62, r));
          Ge(t, 1835022);
          break;

        case 671751:
          t.R = false;
          Ne(t);

          while (1835019 !== t.$) {
            s.push(Te(t, 0, 62, r));
            if (!We(t, 1572876)) break;
          }

          Ge(t, 1835019);
          if (1024 & e) i = new CallScopeExpression(n, s, i.ancestor);else if (2048 & e) i = new CallMemberExpression(i, n, s);else i = new CallFunctionExpression(i, s);
          e = 0;
          break;

        case 540714:
          t.R = false;
          o = [t.L];
          i = new TaggedTemplateExpression(o, o, i);
          Ne(t);
          break;

        case 540715:
          i = Ve(t, e, r, i, true);
      }
    }
  }

  if (448 < s) return i;

  while ((65536 & t.$) > 0) {
    const n = t.$;
    if ((448 & n) <= s) break;
    Ne(t);
    i = new BinaryExpression(Ze[63 & n], i, Te(t, e, 448 & n, r));
    t.R = false;
  }

  if (63 < s) return i;

  if (We(t, 1572880)) {
    const s = Te(t, e, 62, r);
    Ge(t, 1572879);
    i = new ConditionalExpression(i, s, Te(t, e, 62, r));
    t.R = false;
  }

  if (62 < s) return i;

  if (We(t, 1048616)) {
    if (!t.R) throw new Error(`AUR0158:${t.ip}`);
    i = new AssignExpression(i, Te(t, e, 62, r));
  }

  if (61 < s) return i;

  while (We(t, 1572884)) {
    if (1572864 === t.$) throw new Error(`AUR0159:${t.ip}`);
    const s = t.L;
    Ne(t);
    const n = new Array();

    while (We(t, 1572879)) n.push(Te(t, e, 62, r));

    i = new ValueConverterExpression(i, s, n);
  }

  while (We(t, 1572883)) {
    if (1572864 === t.$) throw new Error(`AUR0160:${t.ip}`);
    const s = t.L;
    Ne(t);
    const n = new Array();

    while (We(t, 1572879)) n.push(Te(t, e, 62, r));

    i = new BindingBehaviorExpression(i, s, n);
  }

  if (1572864 !== t.$) {
    if (1 & r) return i;
    if ("of" === t.P) throw new Error(`AUR0161:${t.ip}`);
    throw new Error(`AUR0162:${t.ip}`);
  }

  return i;
}

function je(t) {
  const e = [];
  const s = new DestructuringAssignmentExpression(90137, e, void 0, void 0);
  let r = "";
  let i = true;
  let n = 0;

  while (i) {
    Ne(t);

    switch (t.$) {
      case 1835022:
        i = false;
        o();
        break;

      case 1572876:
        o();
        break;

      case 1024:
        r = t.P;
        break;

      default:
        throw new Error(`AUR0170:${t.ip}`);
    }
  }

  Ge(t, 1835022);
  return s;

  function o() {
    if ("" !== r) {
      e.push(new DestructuringAssignmentSingleExpression(new AccessMemberExpression(Be, r), new AccessKeyedExpression(Be, new PrimitiveLiteralExpression(n++)), void 0));
      r = "";
    } else n++;
  }
}

function Ie(t, e, s) {
  Ne(t);
  const r = new Array();

  while (1835022 !== t.$) if (We(t, 1572876)) {
    r.push(ke);
    if (1835022 === t.$) break;
  } else {
    r.push(Te(t, e, 62, ~2 & s));

    if (We(t, 1572876)) {
      if (1835022 === t.$) break;
    } else break;
  }

  Ge(t, 1835022);
  if (2 & s) return new ArrayBindingPattern(r);else {
    t.R = false;
    return new ArrayLiteralExpression(r);
  }
}

function Me(t, e) {
  if (0 === (65536 & e.$kind)) throw new Error(`AUR0163:${t.ip}`);
  if (1051180 !== t.$) throw new Error(`AUR0163:${t.ip}`);
  Ne(t);
  const s = e;
  const r = Te(t, 0, 61, 0);
  return new ForOfStatement(s, r);
}

function De(t, e) {
  const s = new Array();
  const r = new Array();
  Ne(t);

  while (1835018 !== t.$) {
    s.push(t.L);

    if (12288 & t.$) {
      Ne(t);
      Ge(t, 1572879);
      r.push(Te(t, 0, 62, ~2 & e));
    } else if (3072 & t.$) {
      const {
        O: s,
        $: i,
        index: n
      } = t;
      Ne(t);
      if (We(t, 1572879)) r.push(Te(t, 0, 62, ~2 & e));else {
        t.O = s;
        t.$ = i;
        t.index = n;
        r.push(Te(t, 0, 450, ~2 & e));
      }
    } else throw new Error(`AUR0164:${t.ip}`);

    if (1835018 !== t.$) Ge(t, 1572876);
  }

  Ge(t, 1835018);
  if (2 & e) return new ObjectBindingPattern(s, r);else {
    t.R = false;
    return new ObjectLiteralExpression(s, r);
  }
}

function Fe(t) {
  const e = [];
  const s = [];
  const r = t.length;
  let i = "";

  while (t.index < r) {
    switch (t.O) {
      case 36:
        if (123 === t.ip.charCodeAt(t.index + 1)) {
          e.push(i);
          i = "";
          t.index += 2;
          t.O = t.ip.charCodeAt(t.index);
          Ne(t);
          const r = Te(t, 0, 61, 1);
          s.push(r);
          continue;
        } else i += "$";

        break;

      case 92:
        i += String.fromCharCode(ye(Ke(t)));
        break;

      default:
        i += String.fromCharCode(t.O);
    }

    Ke(t);
  }

  if (s.length) {
    e.push(i);
    return new Interpolation(e, s);
  }

  return null;
}

function Ve(t, e, s, r, i) {
  const n = [t.L];
  Ge(t, 540715);
  const o = [Te(t, e, 62, s)];

  while (540714 !== (t.$ = ze(t))) {
    n.push(t.L);
    Ge(t, 540715);
    o.push(Te(t, e, 62, s));
  }

  n.push(t.L);
  t.R = false;

  if (i) {
    Ne(t);
    return new TaggedTemplateExpression(n, n, r, o);
  } else {
    Ne(t);
    return new TemplateExpression(n, o);
  }
}

function Ne(t) {
  while (t.index < t.length) {
    t.C = t.index;
    if (null != (t.$ = is[t.O](t))) return;
  }

  t.$ = 1572864;
}

function Ke(t) {
  return t.O = t.ip.charCodeAt(++t.index);
}

function qe(t) {
  while (rs[Ke(t)]);

  const e = Je[t.L = t.P];
  return void 0 === e ? 1024 : e;
}

function He(t, e) {
  let s = t.O;

  if (false === e) {
    do {
      s = Ke(t);
    } while (s <= 57 && s >= 48);

    if (46 !== s) {
      t.L = parseInt(t.P, 10);
      return 8192;
    }

    s = Ke(t);

    if (t.index >= t.length) {
      t.L = parseInt(t.P.slice(0, -1), 10);
      return 8192;
    }
  }

  if (s <= 57 && s >= 48) do {
    s = Ke(t);
  } while (s <= 57 && s >= 48);else t.O = t.ip.charCodeAt(--t.index);
  t.L = parseFloat(t.P);
  return 8192;
}

function Qe(t) {
  const e = t.O;
  Ke(t);
  let s = 0;
  const r = new Array();
  let i = t.index;

  while (t.O !== e) if (92 === t.O) {
    r.push(t.ip.slice(i, t.index));
    Ke(t);
    s = ye(t.O);
    Ke(t);
    r.push(String.fromCharCode(s));
    i = t.index;
  } else if (t.index >= t.length) throw new Error(`AUR0165:${t.ip}`);else Ke(t);

  const n = t.ip.slice(i, t.index);
  Ke(t);
  r.push(n);
  const o = r.join("");
  t.L = o;
  return 4096;
}

function _e(t) {
  let e = true;
  let s = "";

  while (96 !== Ke(t)) if (36 === t.O) {
    if (t.index + 1 < t.length && 123 === t.ip.charCodeAt(t.index + 1)) {
      t.index++;
      e = false;
      break;
    } else s += "$";
  } else if (92 === t.O) s += String.fromCharCode(ye(Ke(t)));else {
    if (t.index >= t.length) throw new Error(`AUR0166:${t.ip}`);
    s += String.fromCharCode(t.O);
  }

  Ke(t);
  t.L = s;
  if (e) return 540714;
  return 540715;
}

function ze(t) {
  if (t.index >= t.length) throw new Error(`AUR0166:${t.ip}`);
  t.index--;
  return _e(t);
}

function We(t, e) {
  if (t.$ === e) {
    Ne(t);
    return true;
  }

  return false;
}

function Ge(t, e) {
  if (t.$ === e) Ne(t);else throw new Error(`AUR0167:${t.ip}<${e}`);
}

const Ze = [Se, Oe, Ce, ke, "$this", null, "$parent", "(", "{", ".", "}", ")", ",", "[", "]", ":", "?", "'", '"', "&", "|", "||", "&&", "==", "!=", "===", "!==", "<", ">", "<=", ">=", "in", "instanceof", "+", "-", "typeof", "void", "*", "%", "/", "=", "!", 540714, 540715, "of"];
const Je = E();
Je.true = 2049;
Je.null = 2050;
Je.false = 2048;
Je.undefined = 2051;
Je.$this = 3076;
Je.$parent = 3078;
Je.in = 1640799;
Je.instanceof = 1640800;
Je.typeof = 34851;
Je.void = 34852;
Je.of = 1051180;
const Xe = {
  AsciiIdPart: [36, 0, 48, 58, 65, 91, 95, 0, 97, 123],
  IdStart: [36, 0, 65, 91, 95, 0, 97, 123, 170, 0, 186, 0, 192, 215, 216, 247, 248, 697, 736, 741, 7424, 7462, 7468, 7517, 7522, 7526, 7531, 7544, 7545, 7615, 7680, 7936, 8305, 0, 8319, 0, 8336, 8349, 8490, 8492, 8498, 0, 8526, 0, 8544, 8585, 11360, 11392, 42786, 42888, 42891, 42927, 42928, 42936, 42999, 43008, 43824, 43867, 43868, 43877, 64256, 64263, 65313, 65339, 65345, 65371],
  Digit: [48, 58],
  Skip: [0, 33, 127, 161]
};

function Ye(t, e, s, r) {
  const i = s.length;

  for (let n = 0; n < i; n += 2) {
    const i = s[n];
    let o = s[n + 1];
    o = o > 0 ? o : i + 1;
    if (t) t.fill(r, i, o);
    if (e) for (let t = i; t < o; t++) e.add(t);
  }
}

function ts(t) {
  return e => {
    Ke(e);
    return t;
  };
}

const es = t => {
  throw new Error(`AUR0168:${t.ip}`);
};

es.notMapped = true;
const ss = new Set();
Ye(null, ss, Xe.AsciiIdPart, true);
const rs = new Uint8Array(65535);
Ye(rs, null, Xe.IdStart, 1);
Ye(rs, null, Xe.Digit, 1);
const is = new Array(65535);
is.fill(es, 0, 65535);
Ye(is, null, Xe.Skip, t => {
  Ke(t);
  return null;
});
Ye(is, null, Xe.IdStart, qe);
Ye(is, null, Xe.Digit, t => He(t, false));

is[34] = is[39] = t => Qe(t);

is[96] = t => _e(t);

is[33] = t => {
  if (61 !== Ke(t)) return 32809;
  if (61 !== Ke(t)) return 1638680;
  Ke(t);
  return 1638682;
};

is[61] = t => {
  if (61 !== Ke(t)) return 1048616;
  if (61 !== Ke(t)) return 1638679;
  Ke(t);
  return 1638681;
};

is[38] = t => {
  if (38 !== Ke(t)) return 1572883;
  Ke(t);
  return 1638614;
};

is[124] = t => {
  if (124 !== Ke(t)) return 1572884;
  Ke(t);
  return 1638549;
};

is[46] = t => {
  if (Ke(t) <= 57 && t.O >= 48) return He(t, true);
  return 16393;
};

is[60] = t => {
  if (61 !== Ke(t)) return 1638747;
  Ke(t);
  return 1638749;
};

is[62] = t => {
  if (61 !== Ke(t)) return 1638748;
  Ke(t);
  return 1638750;
};

is[37] = ts(1638886);
is[40] = ts(671751);
is[41] = ts(1835019);
is[42] = ts(1638885);
is[43] = ts(623009);
is[44] = ts(1572876);
is[45] = ts(623010);
is[47] = ts(1638887);
is[58] = ts(1572879);
is[63] = ts(1572880);
is[91] = ts(671757);
is[93] = ts(1835022);
is[123] = ts(131080);
is[125] = ts(1835018);
let ns = null;
const os = [];
let hs = false;

function cs() {
  hs = false;
}

function us() {
  hs = true;
}

function as() {
  return ns;
}

function ls(t) {
  if (null == t) throw new Error("AUR0206");

  if (null == ns) {
    ns = t;
    os[0] = ns;
    hs = true;
    return;
  }

  if (ns === t) throw new Error("AUR0207");
  os.push(ns);
  ns = t;
  hs = true;
}

function fs(t) {
  if (null == t) throw new Error("AUR0208");
  if (ns !== t) throw new Error("AUR0209");
  os.pop();
  ns = os.length > 0 ? os[os.length - 1] : null;
  hs = null != ns;
}

const ds = Object.freeze({
  get current() {
    return ns;
  },

  get connecting() {
    return hs;
  },

  enter: ls,
  exit: fs,
  pause: cs,
  resume: us
});
exports.ConnectableSwitcher = ds;
const vs = Reflect.get;
const ps = Object.prototype.toString;
const gs = new WeakMap();

function ws(t) {
  switch (ps.call(t)) {
    case "[object Object]":
    case "[object Array]":
    case "[object Map]":
    case "[object Set]":
      return true;

    default:
      return false;
  }
}

const bs = "__raw__";

function Es(t) {
  return ws(t) ? As(t) : t;
}

function As(t) {
  var e;
  return null !== (e = gs.get(t)) && void 0 !== e ? e : xs(t);
}

function ys(t) {
  var e;
  return null !== (e = t[bs]) && void 0 !== e ? e : t;
}

function ms(t) {
  return ws(t) && t[bs] || t;
}

function Us(t) {
  return "constructor" === t || "__proto__" === t || "$observers" === t || t === Symbol.toPrimitive || t === Symbol.toStringTag;
}

function xs(t) {
  const e = t instanceof Array ? Os : t instanceof Map || t instanceof Set ? Gs : Ss;
  const s = new Proxy(t, e);
  gs.set(t, s);
  return s;
}

const Ss = {
  get(t, e, s) {
    if (e === bs) return t;
    const r = as();
    if (!hs || Us(e) || null == r) return vs(t, e, s);
    r.observe(t, e);
    return Es(vs(t, e, s));
  }

};
const Os = {
  get(t, e, s) {
    if (e === bs) return t;
    const r = as();
    if (!hs || Us(e) || null == r) return vs(t, e, s);

    switch (e) {
      case "length":
        r.observe(t, "length");
        return t.length;

      case "map":
        return Cs;

      case "includes":
        return $s;

      case "indexOf":
        return Ls;

      case "lastIndexOf":
        return Rs;

      case "every":
        return ks;

      case "filter":
        return Bs;

      case "find":
        return Ts;

      case "findIndex":
        return Ps;

      case "flat":
        return js;

      case "flatMap":
        return Is;

      case "join":
        return Ms;

      case "push":
        return Fs;

      case "pop":
        return Ds;

      case "reduce":
        return zs;

      case "reduceRight":
        return Ws;

      case "reverse":
        return qs;

      case "shift":
        return Vs;

      case "unshift":
        return Ns;

      case "slice":
        return _s;

      case "splice":
        return Ks;

      case "some":
        return Hs;

      case "sort":
        return Qs;

      case "keys":
        return rr;

      case "values":
      case Symbol.iterator:
        return ir;

      case "entries":
        return nr;
    }

    r.observe(t, e);
    return Es(vs(t, e, s));
  },

  ownKeys(t) {
    var e;
    null === (e = as()) || void 0 === e ? void 0 : e.observe(t, "length");
    return Reflect.ownKeys(t);
  }

};

function Cs(t, e) {
  var s;
  const r = ys(this);
  const i = r.map((s, r) => ms(t.call(e, Es(s), r, this)));
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return Es(i);
}

function ks(t, e) {
  var s;
  const r = ys(this);
  const i = r.every((s, r) => t.call(e, Es(s), r, this));
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return i;
}

function Bs(t, e) {
  var s;
  const r = ys(this);
  const i = r.filter((s, r) => ms(t.call(e, Es(s), r, this)));
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return Es(i);
}

function $s(t) {
  var e;
  const s = ys(this);
  const r = s.includes(ms(t));
  null === (e = as()) || void 0 === e ? void 0 : e.observeCollection(s);
  return r;
}

function Ls(t) {
  var e;
  const s = ys(this);
  const r = s.indexOf(ms(t));
  null === (e = as()) || void 0 === e ? void 0 : e.observeCollection(s);
  return r;
}

function Rs(t) {
  var e;
  const s = ys(this);
  const r = s.lastIndexOf(ms(t));
  null === (e = as()) || void 0 === e ? void 0 : e.observeCollection(s);
  return r;
}

function Ps(t, e) {
  var s;
  const r = ys(this);
  const i = r.findIndex((s, r) => ms(t.call(e, Es(s), r, this)));
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return i;
}

function Ts(t, e) {
  var s;
  const r = ys(this);
  const i = r.find((e, s) => t(Es(e), s, this), e);
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return Es(i);
}

function js() {
  var t;
  const e = ys(this);
  null === (t = as()) || void 0 === t ? void 0 : t.observeCollection(e);
  return Es(e.flat());
}

function Is(t, e) {
  var s;
  const r = ys(this);
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return As(r.flatMap((s, r) => Es(t.call(e, Es(s), r, this))));
}

function Ms(t) {
  var e;
  const s = ys(this);
  null === (e = as()) || void 0 === e ? void 0 : e.observeCollection(s);
  return s.join(t);
}

function Ds() {
  return Es(ys(this).pop());
}

function Fs(...t) {
  return ys(this).push(...t);
}

function Vs() {
  return Es(ys(this).shift());
}

function Ns(...t) {
  return ys(this).unshift(...t);
}

function Ks(...t) {
  return Es(ys(this).splice(...t));
}

function qs(...t) {
  var e;
  const s = ys(this);
  const r = s.reverse();
  null === (e = as()) || void 0 === e ? void 0 : e.observeCollection(s);
  return Es(r);
}

function Hs(t, e) {
  var s;
  const r = ys(this);
  const i = r.some((s, r) => ms(t.call(e, Es(s), r, this)));
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return i;
}

function Qs(t) {
  var e;
  const s = ys(this);
  const r = s.sort(t);
  null === (e = as()) || void 0 === e ? void 0 : e.observeCollection(s);
  return Es(r);
}

function _s(t, e) {
  var s;
  const r = ys(this);
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return As(r.slice(t, e));
}

function zs(t, e) {
  var s;
  const r = ys(this);
  const i = r.reduce((e, s, r) => t(e, Es(s), r, this), e);
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return Es(i);
}

function Ws(t, e) {
  var s;
  const r = ys(this);
  const i = r.reduceRight((e, s, r) => t(e, Es(s), r, this), e);
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return Es(i);
}

const Gs = {
  get(t, e, s) {
    if (e === bs) return t;
    const r = as();
    if (!hs || Us(e) || null == r) return vs(t, e, s);

    switch (e) {
      case "size":
        r.observe(t, "size");
        return t.size;

      case "clear":
        return er;

      case "delete":
        return sr;

      case "forEach":
        return Zs;

      case "add":
        if (t instanceof Set) return tr;
        break;

      case "get":
        if (t instanceof Map) return Xs;
        break;

      case "set":
        if (t instanceof Map) return Ys;
        break;

      case "has":
        return Js;

      case "keys":
        return rr;

      case "values":
        return ir;

      case "entries":
        return nr;

      case Symbol.iterator:
        return t instanceof Map ? nr : ir;
    }

    return Es(vs(t, e, s));
  }

};

function Zs(t, e) {
  var s;
  const r = ys(this);
  null === (s = as()) || void 0 === s ? void 0 : s.observeCollection(r);
  return r.forEach((s, r) => {
    t.call(e, Es(s), Es(r), this);
  });
}

function Js(t) {
  var e;
  const s = ys(this);
  null === (e = as()) || void 0 === e ? void 0 : e.observeCollection(s);
  return s.has(ms(t));
}

function Xs(t) {
  var e;
  const s = ys(this);
  null === (e = as()) || void 0 === e ? void 0 : e.observeCollection(s);
  return Es(s.get(ms(t)));
}

function Ys(t, e) {
  return Es(ys(this).set(ms(t), ms(e)));
}

function tr(t) {
  return Es(ys(this).add(ms(t)));
}

function er() {
  return Es(ys(this).clear());
}

function sr(t) {
  return Es(ys(this).delete(ms(t)));
}

function rr() {
  var t;
  const e = ys(this);
  null === (t = as()) || void 0 === t ? void 0 : t.observeCollection(e);
  const s = e.keys();
  return {
    next() {
      const t = s.next();
      const e = t.value;
      const r = t.done;
      return r ? {
        value: void 0,
        done: r
      } : {
        value: Es(e),
        done: r
      };
    },

    [Symbol.iterator]() {
      return this;
    }

  };
}

function ir() {
  var t;
  const e = ys(this);
  null === (t = as()) || void 0 === t ? void 0 : t.observeCollection(e);
  const s = e.values();
  return {
    next() {
      const t = s.next();
      const e = t.value;
      const r = t.done;
      return r ? {
        value: void 0,
        done: r
      } : {
        value: Es(e),
        done: r
      };
    },

    [Symbol.iterator]() {
      return this;
    }

  };
}

function nr() {
  var t;
  const e = ys(this);
  null === (t = as()) || void 0 === t ? void 0 : t.observeCollection(e);
  const s = e.entries();
  return {
    next() {
      const t = s.next();
      const e = t.value;
      const r = t.done;
      return r ? {
        value: void 0,
        done: r
      } : {
        value: [Es(e[0]), Es(e[1])],
        done: r
      };
    },

    [Symbol.iterator]() {
      return this;
    }

  };
}

const or = Object.freeze({
  getProxy: As,
  getRaw: ys,
  wrap: Es,
  unwrap: ms,
  rawKey: bs
});
exports.ProxyObservable = or;

class ComputedObserver {
  constructor(t, e, s, r, i) {
    this.interceptor = this;
    this.type = 1;
    this.v = void 0;
    this.ov = void 0;
    this.ir = false;
    this.D = false;
    this.o = t;
    this.get = e;
    this.set = s;
    this.up = r;
    this.oL = i;
  }

  static create(t, e, s, r, i) {
    const n = s.get;
    const o = s.set;
    const h = new ComputedObserver(t, n, o, i, r);

    const c = () => h.getValue();

    c.getObserver = () => h;

    v(t, e, {
      enumerable: s.enumerable,
      configurable: true,
      get: c,
      set: t => {
        h.setValue(t, 0);
      }
    });
    return h;
  }

  getValue() {
    if (0 === this.subs.count) return this.get.call(this.o, this);

    if (this.D) {
      this.compute();
      this.D = false;
    }

    return this.v;
  }

  setValue(t, e) {
    if (p(this.set)) {
      if (t !== this.v) {
        this.ir = true;
        this.set.call(this.o, t);
        this.ir = false;
        this.run();
      }
    } else throw new Error("AUR0221");
  }

  handleChange() {
    this.D = true;
    if (this.subs.count > 0) this.run();
  }

  handleCollectionChange() {
    this.D = true;
    if (this.subs.count > 0) this.run();
  }

  subscribe(t) {
    if (this.subs.add(t) && 1 === this.subs.count) {
      this.compute();
      this.D = false;
    }
  }

  unsubscribe(t) {
    if (this.subs.remove(t) && 0 === this.subs.count) {
      this.D = true;
      this.obs.clearAll();
    }
  }

  flush() {
    hr = this.ov;
    this.ov = this.v;
    this.subs.notify(this.v, hr, 0);
  }

  run() {
    if (this.ir) return;
    const t = this.v;
    const e = this.compute();
    this.D = false;

    if (!Object.is(e, t)) {
      this.ov = t;
      this.queue.add(this);
    }
  }

  compute() {
    this.ir = true;
    this.obs.version++;

    try {
      ls(this);
      return this.v = ms(this.get.call(this.up ? Es(this.o) : this.o, this));
    } finally {
      this.obs.clear();
      this.ir = false;
      fs(this);
    }
  }

}

exports.ComputedObserver = ComputedObserver;
be(ComputedObserver);
st(ComputedObserver);
ht(ComputedObserver);
let hr;

const cr = _kernel.DI.createInterface("IDirtyChecker", t => t.singleton(DirtyChecker));

exports.IDirtyChecker = cr;
const ur = {
  timeoutsPerCheck: 25,
  disabled: false,
  throw: false,

  resetToDefault() {
    this.timeoutsPerCheck = 6;
    this.disabled = false;
    this.throw = false;
  }

};
exports.DirtyCheckSettings = ur;
const ar = {
  persistent: true
};

class DirtyChecker {
  constructor(t) {
    this.p = t;
    this.tracked = [];
    this.T = null;
    this.j = 0;

    this.check = () => {
      if (ur.disabled) return;
      if (++this.j < ur.timeoutsPerCheck) return;
      this.j = 0;
      const t = this.tracked;
      const e = t.length;
      let s;
      let r = 0;

      for (; r < e; ++r) {
        s = t[r];
        if (s.isDirty()) this.queue.add(s);
      }
    };
  }

  createProperty(t, e) {
    if (ur.throw) throw new Error(`AUR0222:${e}`);
    return new DirtyCheckProperty(this, t, e);
  }

  addProperty(t) {
    this.tracked.push(t);
    if (1 === this.tracked.length) this.T = this.p.taskQueue.queueTask(this.check, ar);
  }

  removeProperty(t) {
    this.tracked.splice(this.tracked.indexOf(t), 1);

    if (0 === this.tracked.length) {
      this.T.cancel();
      this.T = null;
    }
  }

}

DirtyChecker.inject = [_kernel.IPlatform];
ht(DirtyChecker);

class DirtyCheckProperty {
  constructor(t, e, s) {
    this.obj = e;
    this.key = s;
    this.type = 0;
    this.ov = void 0;
    this.I = t;
  }

  getValue() {
    return this.obj[this.key];
  }

  setValue(t, e) {
    throw new Error(`Trying to set value for property ${this.key} in dirty checker`);
  }

  isDirty() {
    return this.ov !== this.obj[this.key];
  }

  flush() {
    const t = this.ov;
    const e = this.getValue();
    this.ov = e;
    this.subs.notify(e, t, 0);
  }

  subscribe(t) {
    if (this.subs.add(t) && 1 === this.subs.count) {
      this.ov = this.obj[this.key];
      this.I.addProperty(this);
    }
  }

  unsubscribe(t) {
    if (this.subs.remove(t) && 0 === this.subs.count) this.I.removeProperty(this);
  }

}

exports.DirtyCheckProperty = DirtyCheckProperty;
st(DirtyCheckProperty);

class PrimitiveObserver {
  constructor(t, e) {
    this.type = 0;
    this.o = t;
    this.k = e;
  }

  get doNotCache() {
    return true;
  }

  getValue() {
    return this.o[this.k];
  }

  setValue() {}

  subscribe() {}

  unsubscribe() {}

}

exports.PrimitiveObserver = PrimitiveObserver;

class PropertyAccessor {
  constructor() {
    this.type = 0;
  }

  getValue(t, e) {
    return t[e];
  }

  setValue(t, e, s, r) {
    s[r] = t;
  }

}

exports.PropertyAccessor = PropertyAccessor;
let lr;

class SetterObserver {
  constructor(t, e) {
    this.type = 1;
    this.v = void 0;
    this.ov = void 0;
    this.iO = false;
    this.f = 0;
    this.o = t;
    this.k = e;
  }

  getValue() {
    return this.v;
  }

  setValue(t, e) {
    if (this.iO) {
      if (Object.is(t, this.v)) return;
      this.ov = this.v;
      this.v = t;
      this.f = e;
      this.queue.add(this);
    } else this.o[this.k] = t;
  }

  subscribe(t) {
    if (false === this.iO) this.start();
    this.subs.add(t);
  }

  flush() {
    lr = this.ov;
    this.ov = this.v;
    this.subs.notify(this.v, lr, this.f);
  }

  start() {
    if (false === this.iO) {
      this.iO = true;
      this.v = this.o[this.k];
      v(this.o, this.k, {
        enumerable: true,
        configurable: true,
        get: () => this.getValue(),
        set: t => {
          this.setValue(t, 0);
        }
      });
    }

    return this;
  }

  stop() {
    if (this.iO) {
      v(this.o, this.k, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: this.v
      });
      this.iO = false;
    }

    return this;
  }

}

exports.SetterObserver = SetterObserver;

class SetterNotifier {
  constructor(t, e, s, r) {
    this.type = 1;
    this.v = void 0;
    this.ov = void 0;
    this.f = 0;
    this.o = t;
    this.S = s;
    this.hs = p(s);
    const i = t[e];
    this.cb = p(i) ? i : void 0;
    this.v = r;
  }

  getValue() {
    return this.v;
  }

  setValue(t, e) {
    var s;
    if (this.hs) t = this.S(t);

    if (!Object.is(t, this.v)) {
      this.ov = this.v;
      this.v = t;
      this.f = e;
      null === (s = this.cb) || void 0 === s ? void 0 : s.call(this.o, this.v, this.ov, e);
      this.queue.add(this);
    }
  }

  flush() {
    lr = this.ov;
    this.ov = this.v;
    this.subs.notify(this.v, lr, this.f);
  }

}

st(SetterObserver);
st(SetterNotifier);
ht(SetterObserver);
ht(SetterNotifier);
const fr = new PropertyAccessor();

const dr = _kernel.DI.createInterface("IObserverLocator", t => t.singleton(ObserverLocator));

exports.IObserverLocator = dr;

const vr = _kernel.DI.createInterface("INodeObserverLocator", t => t.cachedCallback(t => {
  t.getAll(_kernel.ILogger).forEach(t => {
    t.error("Using default INodeObserverLocator implementation. Will not be able to observe nodes (HTML etc...).");
  });
  return new DefaultNodeObserverLocator();
}));

exports.INodeObserverLocator = vr;

class DefaultNodeObserverLocator {
  handles() {
    return false;
  }

  getObserver() {
    return fr;
  }

  getAccessor() {
    return fr;
  }

}

class ObserverLocator {
  constructor(t, e) {
    this.I = t;
    this.M = e;
    this.F = [];
  }

  addAdapter(t) {
    this.F.push(t);
  }

  getObserver(t, e) {
    var s, r;
    return null !== (r = null === (s = t.$observers) || void 0 === s ? void 0 : s[e]) && void 0 !== r ? r : this.V(t, e, this.createObserver(t, e));
  }

  getAccessor(t, e) {
    var s;
    const r = null === (s = t.$observers) || void 0 === s ? void 0 : s[e];
    if (void 0 !== r) return r;
    if (this.M.handles(t, e, this)) return this.M.getAccessor(t, e, this);
    return fr;
  }

  getArrayObserver(t) {
    return Tt(t);
  }

  getMapObserver(t) {
    return ce(t);
  }

  getSetObserver(t) {
    return Gt(t);
  }

  createObserver(t, e) {
    var s, r, i, n;
    if (!(t instanceof Object)) return new PrimitiveObserver(t, e);
    if (this.M.handles(t, e, this)) return this.M.getObserver(t, e, this);

    switch (e) {
      case "length":
        if (t instanceof Array) return Tt(t).getLengthObserver();
        break;

      case "size":
        if (t instanceof Map) return ce(t).getLengthObserver();else if (t instanceof Set) return Gt(t).getLengthObserver();
        break;

      default:
        if (t instanceof Array && (0, _kernel.isArrayIndex)(e)) return Tt(t).getIndexObserver(Number(e));
        break;
    }

    let o = wr(t, e);

    if (void 0 === o) {
      let s = gr(t);

      while (null !== s) {
        o = wr(s, e);
        if (void 0 === o) s = gr(s);else break;
      }
    }

    if (void 0 !== o && !d.call(o, "value")) {
      let h = this.N(t, e, o);
      if (null == h) h = null === (n = null !== (r = null === (s = o.get) || void 0 === s ? void 0 : s.getObserver) && void 0 !== r ? r : null === (i = o.set) || void 0 === i ? void 0 : i.getObserver) || void 0 === n ? void 0 : n(t, this);
      return null == h ? o.configurable ? ComputedObserver.create(t, e, o, this, true) : this.I.createProperty(t, e) : h;
    }

    return new SetterObserver(t, e);
  }

  N(t, e, s) {
    if (this.F.length > 0) for (const r of this.F) {
      const i = r.getObserver(t, e, s, this);
      if (null != i) return i;
    }
    return null;
  }

  V(t, e, s) {
    if (true === s.doNotCache) return s;

    if (void 0 === t.$observers) {
      v(t, "$observers", {
        value: {
          [e]: s
        }
      });
      return s;
    }

    return t.$observers[e] = s;
  }

}

exports.ObserverLocator = ObserverLocator;
ObserverLocator.inject = [cr, vr];

function pr(t) {
  let e;
  if (t instanceof Array) e = Tt(t);else if (t instanceof Map) e = ce(t);else if (t instanceof Set) e = Gt(t);
  return e;
}

const gr = Object.getPrototypeOf;
const wr = Object.getOwnPropertyDescriptor;

const br = _kernel.DI.createInterface("IObservation", t => t.singleton(Observation));

exports.IObservation = br;

class Observation {
  constructor(t) {
    this.oL = t;
  }

  static get inject() {
    return [dr];
  }

  run(t) {
    const e = new Effect(this.oL, t);
    e.run();
    return e;
  }

}

exports.Observation = Observation;

class Effect {
  constructor(t, e) {
    this.oL = t;
    this.fn = e;
    this.interceptor = this;
    this.maxRunCount = 10;
    this.queued = false;
    this.running = false;
    this.runCount = 0;
    this.stopped = false;
  }

  handleChange() {
    this.queued = true;
    this.run();
  }

  handleCollectionChange() {
    this.queued = true;
    this.run();
  }

  run() {
    if (this.stopped) throw new Error("AUR0225");
    if (this.running) return;
    ++this.runCount;
    this.running = true;
    this.queued = false;
    ++this.obs.version;

    try {
      ls(this);
      this.fn(this);
    } finally {
      this.obs.clear();
      this.running = false;
      fs(this);
    }

    if (this.queued) {
      if (this.runCount > this.maxRunCount) {
        this.runCount = 0;
        throw new Error(`AUR0226`);
      }

      this.run();
    } else this.runCount = 0;
  }

  stop() {
    this.stopped = true;
    this.obs.clearAll();
  }

}

be(Effect);

function Er(t) {
  if (void 0 === t.$observers) v(t, "$observers", {
    value: {}
  });
  return t.$observers;
}

const Ar = {};

function yr(t, e, s) {
  if (null == e) return (e, s, i) => r(e, s, i, t);
  return r(t, e, s);

  function r(t, e, s, r) {
    var i;
    const n = void 0 === e;
    r = "object" !== typeof r ? {
      name: r
    } : r || {};
    if (n) e = r.name;
    if (null == e || "" === e) throw new Error("AUR0224");
    const o = r.callback || `${String(e)}Changed`;
    let h = Ar;

    if (s) {
      delete s.value;
      delete s.writable;
      h = null === (i = s.initializer) || void 0 === i ? void 0 : i.call(s);
      delete s.initializer;
    } else s = {
      configurable: true
    };

    if (!("enumerable" in s)) s.enumerable = true;
    const c = r.set;

    s.get = function t() {
      var s;
      const r = mr(this, e, o, h, c);
      null === (s = as()) || void 0 === s ? void 0 : s.subscribeTo(r);
      return r.getValue();
    };

    s.set = function t(s) {
      mr(this, e, o, h, c).setValue(s, 0);
    };

    s.get.getObserver = function t(s) {
      return mr(s, e, o, h, c);
    };

    if (n) v(t.prototype, e, s);else return s;
  }
}

function mr(t, e, s, r, i) {
  const n = Er(t);
  let o = n[e];

  if (null == o) {
    o = new SetterNotifier(t, s, i, r === Ar ? void 0 : r);
    n[e] = o;
  }

  return o;
}
});

;define.alias('@aurelia/runtime','@aurelia/runtime/dist/esm/index.js');
define('aurelia/dist/esm/index.js',['require','exports','module','@aurelia/kernel','@aurelia/runtime-html','@aurelia/platform-browser','@aurelia/fetch-client','@aurelia/router'],function (require, exports, module) {
"use strict";

exports.__esModule = true;
exports.isArrayIndex = exports.inject = exports.emptyObject = exports.emptyArray = exports.default = exports.customElement = exports.customAttribute = exports.cssModules = exports.createElement = exports.containerless = exports.children = exports.camelCase = exports.bound = exports.bindingCommand = exports.bindingBehavior = exports.bindable = exports.attributePattern = exports.all = exports.alias = exports.WcCustomElementRegistry = exports.Watch = exports.ViewFactory = exports.ValueConverter = exports.TemplateCompilerHooks = exports.TaskQueuePriority = exports.StyleConfiguration = exports.ShortHandBindingSyntax = exports.RouterRegistration = exports.RouterOptions = exports.RouterConfiguration = exports.Router = exports.RouteNode = exports.RouteConfig = exports.Route = exports.Registration = exports.PLATFORM = exports.NodeObserverLocator = exports.Metadata = exports.LoggerConfiguration = exports.LogLevel = exports.LifecycleHooks = exports.LifecycleFlags = exports.InstanceProvider = exports.IWorkTracker = exports.IWcElementRegistry = exports.ITemplateCompilerHooks = exports.ITemplateCompiler = exports.ISignaler = exports.IServiceLocator = exports.IRouterEvents = exports.IRouter = exports.IRouteContext = exports.IRenderLocation = exports.IPlatform = exports.IObserverLocator = exports.INode = exports.ILogger = exports.ILifecycleHooks = exports.IHttpClient = exports.IEventTarget = exports.IEventAggregator = exports.IDialogService = exports.IDialogGlobalSettings = exports.IDialogDomRenderer = exports.IDialogDom = exports.IDialogController = exports.IContainer = exports.IAurelia = exports.IAuSlotsInfo = exports.IAttributePattern = exports.IAttrMapper = exports.IAppRoot = exports.HttpClientConfiguration = exports.HttpClient = exports.ExpressionWatcher = exports.EventAggregator = exports.DialogService = exports.DialogOpenResult = exports.DialogDefaultConfiguration = exports.DialogDeactivationStatuses = exports.DialogController = exports.DialogConfiguration = exports.DialogCloseResult = exports.DefaultDialogGlobalSettings = exports.DefaultDialogDomRenderer = exports.DefaultDialogDom = exports.DI = exports.CustomElement = exports.CustomAttribute = exports.Controller = exports.ConsoleSink = exports.ComputedWatcher = exports.ComputedObserver = exports.ColorOptions = exports.BindingMode = exports.BindingBehavior = exports.Bindable = exports.Aurelia = exports.AuSlotsInfo = exports.AppTask = void 0;
exports.watch = exports.valueConverter = exports.useShadowDOM = exports.transient = exports.toArray = exports.templateController = exports.templateCompilerHooks = exports.subscriberCollection = exports.singleton = exports.shadowCSS = exports.route = exports.renderer = exports.registerAliases = exports.pascalCase = exports.optional = exports.noop = exports.lifecycleHooks = exports.lazy = exports.kebabCase = exports.json = exports.isArrayIndex = exports.inject = exports.emptyObject = exports.emptyArray = exports.default = exports.customElement = exports.customAttribute = exports.cssModules = exports.createElement = exports.containerless = exports.children = exports.camelCase = exports.bound = exports.bindingCommand = exports.bindingBehavior = exports.bindable = exports.attributePattern = exports.all = exports.alias = exports.WcCustomElementRegistry = exports.Watch = exports.ViewFactory = exports.ValueConverter = exports.TemplateCompilerHooks = exports.TaskQueuePriority = exports.StyleConfiguration = exports.ShortHandBindingSyntax = exports.RouterRegistration = exports.RouterOptions = exports.RouterConfiguration = exports.Router = exports.RouteNode = exports.RouteConfig = exports.Route = exports.Registration = exports.PLATFORM = exports.NodeObserverLocator = exports.Metadata = exports.LoggerConfiguration = exports.LogLevel = exports.LifecycleHooks = exports.LifecycleFlags = exports.InstanceProvider = exports.IWorkTracker = exports.IWcElementRegistry = exports.ITemplateCompilerHooks = exports.ITemplateCompiler = exports.ISignaler = exports.IServiceLocator = exports.IRouterEvents = exports.IRouter = exports.IRouteContext = exports.IRenderLocation = exports.IPlatform = exports.IObserverLocator = exports.INode = exports.ILogger = exports.ILifecycleHooks = exports.IHttpClient = exports.IEventTarget = exports.IEventAggregator = exports.IDialogService = exports.IDialogGlobalSettings = exports.IDialogDomRenderer = exports.IDialogDom = exports.IDialogController = exports.IContainer = exports.IAurelia = exports.IAuSlotsInfo = exports.IAttributePattern = exports.IAttrMapper = exports.IAppRoot = exports.HttpClientConfiguration = exports.HttpClient = exports.ExpressionWatcher = exports.EventAggregator = exports.DialogService = exports.DialogOpenResult = exports.DialogDefaultConfiguration = exports.DialogDeactivationStatuses = exports.DialogController = exports.DialogConfiguration = exports.DialogCloseResult = exports.DefaultDialogGlobalSettings = exports.DefaultDialogDomRenderer = exports.DefaultDialogDom = exports.DI = exports.CustomElement = exports.CustomAttribute = exports.Controller = exports.ConsoleSink = exports.ComputedWatcher = exports.ComputedObserver = exports.ColorOptions = exports.BindingMode = exports.BindingBehavior = exports.Bindable = exports.Aurelia = exports.AuSlotsInfo = exports.AppTask = void 0;

var _kernel = require("@aurelia/kernel");

exports.ColorOptions = _kernel.ColorOptions;
exports.ConsoleSink = _kernel.ConsoleSink;
exports.DI = _kernel.DI;
exports.EventAggregator = _kernel.EventAggregator;
exports.IContainer = _kernel.IContainer;
exports.IEventAggregator = _kernel.IEventAggregator;
exports.ILogger = _kernel.ILogger;
exports.IServiceLocator = _kernel.IServiceLocator;
exports.InstanceProvider = _kernel.InstanceProvider;
exports.LogLevel = _kernel.LogLevel;
exports.LoggerConfiguration = _kernel.LoggerConfiguration;
exports.Metadata = _kernel.Metadata;
exports.Registration = _kernel.Registration;
exports.all = _kernel.all;
exports.bound = _kernel.bound;
exports.camelCase = _kernel.camelCase;
exports.emptyArray = _kernel.emptyArray;
exports.emptyObject = _kernel.emptyObject;
exports.inject = _kernel.inject;
exports.isArrayIndex = _kernel.isArrayIndex;
exports.kebabCase = _kernel.kebabCase;
exports.lazy = _kernel.lazy;
exports.noop = _kernel.noop;
exports.optional = _kernel.optional;
exports.pascalCase = _kernel.pascalCase;
exports.singleton = _kernel.singleton;
exports.toArray = _kernel.toArray;
exports.transient = _kernel.transient;

var _runtimeHtml = require("@aurelia/runtime-html");

exports.AppTask = _runtimeHtml.AppTask;
exports.AuSlotsInfo = _runtimeHtml.AuSlotsInfo;
exports.Bindable = _runtimeHtml.Bindable;
exports.BindingBehavior = _runtimeHtml.BindingBehavior;
exports.BindingMode = _runtimeHtml.BindingMode;
exports.ComputedObserver = _runtimeHtml.ComputedObserver;
exports.ComputedWatcher = _runtimeHtml.ComputedWatcher;
exports.Controller = _runtimeHtml.Controller;
exports.CustomAttribute = _runtimeHtml.CustomAttribute;
exports.CustomElement = _runtimeHtml.CustomElement;
exports.DefaultDialogDom = _runtimeHtml.DefaultDialogDom;
exports.DefaultDialogDomRenderer = _runtimeHtml.DefaultDialogDomRenderer;
exports.DefaultDialogGlobalSettings = _runtimeHtml.DefaultDialogGlobalSettings;
exports.DialogCloseResult = _runtimeHtml.DialogCloseResult;
exports.DialogConfiguration = _runtimeHtml.DialogConfiguration;
exports.DialogController = _runtimeHtml.DialogController;
exports.DialogDeactivationStatuses = _runtimeHtml.DialogDeactivationStatuses;
exports.DialogDefaultConfiguration = _runtimeHtml.DialogDefaultConfiguration;
exports.DialogOpenResult = _runtimeHtml.DialogOpenResult;
exports.DialogService = _runtimeHtml.DialogService;
exports.ExpressionWatcher = _runtimeHtml.ExpressionWatcher;
exports.IAppRoot = _runtimeHtml.IAppRoot;
exports.IAttrMapper = _runtimeHtml.IAttrMapper;
exports.IAttributePattern = _runtimeHtml.IAttributePattern;
exports.IAuSlotsInfo = _runtimeHtml.IAuSlotsInfo;
exports.IAurelia = _runtimeHtml.IAurelia;
exports.IDialogController = _runtimeHtml.IDialogController;
exports.IDialogDom = _runtimeHtml.IDialogDom;
exports.IDialogDomRenderer = _runtimeHtml.IDialogDomRenderer;
exports.IDialogGlobalSettings = _runtimeHtml.IDialogGlobalSettings;
exports.IDialogService = _runtimeHtml.IDialogService;
exports.IEventTarget = _runtimeHtml.IEventTarget;
exports.ILifecycleHooks = _runtimeHtml.ILifecycleHooks;
exports.INode = _runtimeHtml.INode;
exports.IObserverLocator = _runtimeHtml.IObserverLocator;
exports.IPlatform = _runtimeHtml.IPlatform;
exports.IRenderLocation = _runtimeHtml.IRenderLocation;
exports.ISignaler = _runtimeHtml.ISignaler;
exports.ITemplateCompiler = _runtimeHtml.ITemplateCompiler;
exports.ITemplateCompilerHooks = _runtimeHtml.ITemplateCompilerHooks;
exports.IWcElementRegistry = _runtimeHtml.IWcElementRegistry;
exports.IWorkTracker = _runtimeHtml.IWorkTracker;
exports.LifecycleFlags = _runtimeHtml.LifecycleFlags;
exports.LifecycleHooks = _runtimeHtml.LifecycleHooks;
exports.NodeObserverLocator = _runtimeHtml.NodeObserverLocator;
exports.ShortHandBindingSyntax = _runtimeHtml.ShortHandBindingSyntax;
exports.StyleConfiguration = _runtimeHtml.StyleConfiguration;
exports.TaskQueuePriority = _runtimeHtml.TaskQueuePriority;
exports.TemplateCompilerHooks = _runtimeHtml.TemplateCompilerHooks;
exports.ValueConverter = _runtimeHtml.ValueConverter;
exports.ViewFactory = _runtimeHtml.ViewFactory;
exports.Watch = _runtimeHtml.Watch;
exports.WcCustomElementRegistry = _runtimeHtml.WcCustomElementRegistry;
exports.alias = _runtimeHtml.alias;
exports.attributePattern = _runtimeHtml.attributePattern;
exports.bindable = _runtimeHtml.bindable;
exports.bindingBehavior = _runtimeHtml.bindingBehavior;
exports.bindingCommand = _runtimeHtml.bindingCommand;
exports.children = _runtimeHtml.children;
exports.containerless = _runtimeHtml.containerless;
exports.createElement = _runtimeHtml.createElement;
exports.cssModules = _runtimeHtml.cssModules;
exports.customAttribute = _runtimeHtml.customAttribute;
exports.customElement = _runtimeHtml.customElement;
exports.lifecycleHooks = _runtimeHtml.lifecycleHooks;
exports.registerAliases = _runtimeHtml.registerAliases;
exports.renderer = _runtimeHtml.renderer;
exports.shadowCSS = _runtimeHtml.shadowCSS;
exports.subscriberCollection = _runtimeHtml.subscriberCollection;
exports.templateCompilerHooks = _runtimeHtml.templateCompilerHooks;
exports.templateController = _runtimeHtml.templateController;
exports.useShadowDOM = _runtimeHtml.useShadowDOM;
exports.valueConverter = _runtimeHtml.valueConverter;
exports.watch = _runtimeHtml.watch;

var _platformBrowser = require("@aurelia/platform-browser");

var _fetchClient = require("@aurelia/fetch-client");

exports.HttpClient = _fetchClient.HttpClient;
exports.HttpClientConfiguration = _fetchClient.HttpClientConfiguration;
exports.IHttpClient = _fetchClient.IHttpClient;
exports.json = _fetchClient.json;

var _router = require("@aurelia/router");

exports.IRouteContext = _router.IRouteContext;
exports.IRouter = _router.IRouter;
exports.IRouterEvents = _router.IRouterEvents;
exports.Route = _router.Route;
exports.RouteConfig = _router.RouteConfig;
exports.RouteNode = _router.RouteNode;
exports.Router = _router.Router;
exports.RouterConfiguration = _router.RouterConfiguration;
exports.RouterOptions = _router.RouterOptions;
exports.RouterRegistration = _router.RouterRegistration;
exports.route = _router.route;

const l = _platformBrowser.BrowserPlatform.getOrCreate(globalThis);

exports.PLATFORM = l;

function u() {
  return _kernel.DI.createContainer().register(_kernel.Registration.instance(_runtimeHtml.IPlatform, l), _runtimeHtml.StandardConfiguration);
}

class Aurelia extends _runtimeHtml.Aurelia {
  constructor(e = u()) {
    super(e);
  }

  static start(e) {
    return new Aurelia().start(e);
  }

  static app(e) {
    return new Aurelia().app(e);
  }

  static enhance(e, t) {
    return new Aurelia().enhance(e, t);
  }

  static register(...e) {
    return new Aurelia().register(...e);
  }

  app(e) {
    if (_runtimeHtml.CustomElement.isType(e)) {
      const t = _runtimeHtml.CustomElement.getDefinition(e);

      let o = document.querySelector(t.name);
      if (null === o) o = document.body;
      return super.app({
        host: o,
        component: e
      });
    }

    return super.app(e);
  }

}

exports.default = exports.Aurelia = Aurelia;
});

;define.alias('aurelia','aurelia/dist/esm/index.js');
define('dumber/lib/inject-css.js',['require','exports','module'],function (require, exports, module) {
// Alert: this file will be used in users' app for ext:css plugin,
// use plain ES5 JavaScript Syntax.
var cssUrlMatcher = /url\s*\(\s*(?!['"]data)([^) ]+)\s*\)/gi;

// copied from aurelia-templating-resources css-resource
// This behaves differently from webpack's style-loader.
// Here we change './hello.png' to 'foo/hello.png' if base address is 'foo/bar'.
// Note 'foo/hello.png' is technically a relative path in css.
// We inject css into a style tag on html head, it means the 'foo/hello.png'
// is related to current url (not css url on link tag), or <base> tag in html
// head (which is recommended setup of aurelia-router if not using hash).
function fixupCSSUrls(address, css) {
  if (typeof css !== 'string') {
    throw new Error(`Failed loading required CSS file: ${address}`);
  }

  return css.replace(cssUrlMatcher, function(match, p1) {
    var quote = p1.charAt(0);
    if (quote === '\'' || quote === '"') {
      p1 = p1.slice(1, -1);
    }
    var absolutePath = absoluteModuleId(address, p1);
    if (absolutePath === p1) {
      return match;
    }
    return 'url(\'' + absolutePath + '\')';
  });
}

function absoluteModuleId(baseId, moduleId) {
  if (moduleId[0] !== '.') return moduleId;

  var parts = baseId.split('/');
  parts.pop();

  var mParts = moduleId.split('/');
  var p;

  for (p of mParts) {
    if (p === '.') continue;
    if (p === '..') {
      parts.pop();
      continue;
    }
    parts.push(p);
  }

  return parts.join('/');
}

// copied from aurelia-pal-browser DOM.injectStyles
function injectCSS(css, id) {
  if (typeof document === 'undefined' || !css) return;
  css = fixupCSSUrls(id, css);

  if (id) {
    var oldStyle = document.getElementById(id);
    if (oldStyle) {
      var isStyleTag = oldStyle.tagName.toLowerCase() === 'style';

      if (isStyleTag) {
        oldStyle.innerHTML = css;
        return;
      }

      throw new Error('The provided id does not indicate a style tag.');
    }
  }

  var node = document.createElement('style');
  node.innerHTML = css;
  node.type = 'text/css';

  if (id) {
    node.id = id;
  }

  document.head.appendChild(node);
}

// dumber-module-loader plugin ext:css
function load(name, req, load) {
  req(['text!' + name], function(text) {
    var result = splitCssModuleExports(text);
    injectCSS(result.css, name);
    // When css-module is in use, the module exports will be
    // a map of tokens. Otherwise, export original css string.
    load(result.exportTokens || result.css);
  });
}

function splitCssModuleExports(text) {
  if (!text) return {css: ''};
  var m = text.match(/\n\/\*\s*dumber-css-module:\s*(.+?)\s*\*\/\s*$/);
  if (!m) return {css: text};
  var css = text.slice(0, m.index);
  var exportTokens = JSON.parse(m[1]);
  return {css, exportTokens};
}

exports.fixupCSSUrls = fixupCSSUrls;
exports.injectCSS = injectCSS;
exports.splitCssModuleExports = splitCssModuleExports;
exports.load = load;

});

( function( factory ) {
	"use strict";

	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( 'jquery-ui/ui/version.js',[ "jquery" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} )( function( $ ) {
"use strict";

$.ui = $.ui || {};

return $.ui.version = "1.13.0";

} );

/*!
 * jQuery UI Widget 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/

( function( factory ) {
	"use strict";

	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( 'jquery-ui/ui/widget.js',[ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} )( function( $ ) {
"use strict";

var widgetUuid = 0;
var widgetHasOwnProperty = Array.prototype.hasOwnProperty;
var widgetSlice = Array.prototype.slice;

$.cleanData = ( function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {

			// Only trigger remove when necessary to save time
			events = $._data( elem, "events" );
			if ( events && events.remove ) {
				$( elem ).triggerHandler( "remove" );
			}
		}
		orig( elems );
	};
} )( $.cleanData );

$.widget = function( name, base, prototype ) {
	var existingConstructor, constructor, basePrototype;

	// ProxiedPrototype allows the provided prototype to remain unmodified
	// so that it can be used as a mixin for multiple widgets (#8876)
	var proxiedPrototype = {};

	var namespace = name.split( "." )[ 0 ];
	name = name.split( "." )[ 1 ];
	var fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	if ( Array.isArray( prototype ) ) {
		prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
	}

	// Create selector for plugin
	$.expr.pseudos[ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {

		// Allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// Allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};

	// Extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,

		// Copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),

		// Track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	} );

	basePrototype = new base();

	// We need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( typeof value !== "function" ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = ( function() {
			function _super() {
				return base.prototype[ prop ].apply( this, arguments );
			}

			function _superApply( args ) {
				return base.prototype[ prop ].apply( this, args );
			}

			return function() {
				var __super = this._super;
				var __superApply = this._superApply;
				var returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		} )();
	} );
	constructor.prototype = $.widget.extend( basePrototype, {

		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	} );

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// Redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
				child._proto );
		} );

		// Remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );

	return constructor;
};

$.widget.extend = function( target ) {
	var input = widgetSlice.call( arguments, 1 );
	var inputIndex = 0;
	var inputLength = input.length;
	var key;
	var value;

	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( widgetHasOwnProperty.call( input[ inputIndex ], key ) && value !== undefined ) {

				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :

						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );

				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string";
		var args = widgetSlice.call( arguments, 1 );
		var returnValue = this;

		if ( isMethodCall ) {

			// If this is an empty collection, we need to have the instance method
			// return undefined instead of the jQuery instance
			if ( !this.length && options === "instance" ) {
				returnValue = undefined;
			} else {
				this.each( function() {
					var methodValue;
					var instance = $.data( this, fullName );

					if ( options === "instance" ) {
						returnValue = instance;
						return false;
					}

					if ( !instance ) {
						return $.error( "cannot call methods on " + name +
							" prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}

					if ( typeof instance[ options ] !== "function" ||
						options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name +
							" widget instance" );
					}

					methodValue = instance[ options ].apply( instance, args );

					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				} );
			}
		} else {

			// Allow multiple hashes to be passed on init
			if ( args.length ) {
				options = $.widget.extend.apply( null, [ options ].concat( args ) );
			}

			this.each( function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			} );
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",

	options: {
		classes: {},
		disabled: false,

		// Callbacks
		create: null
	},

	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = widgetUuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();
		this.classesElementLookup = {};

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			} );
			this.document = $( element.style ?

				// Element within the document
				element.ownerDocument :

				// Element is window or document
				element.document || element );
			this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
		}

		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this._create();

		if ( this.options.disabled ) {
			this._setOptionDisabled( this.options.disabled );
		}

		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},

	_getCreateOptions: function() {
		return {};
	},

	_getCreateEventData: $.noop,

	_create: $.noop,

	_init: $.noop,

	destroy: function() {
		var that = this;

		this._destroy();
		$.each( this.classesElementLookup, function( key, value ) {
			that._removeClass( value, key );
		} );

		// We can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.off( this.eventNamespace )
			.removeData( this.widgetFullName );
		this.widget()
			.off( this.eventNamespace )
			.removeAttr( "aria-disabled" );

		// Clean up events and states
		this.bindings.off( this.eventNamespace );
	},

	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key;
		var parts;
		var curOption;
		var i;

		if ( arguments.length === 0 ) {

			// Don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {

			// Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},

	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},

	_setOption: function( key, value ) {
		if ( key === "classes" ) {
			this._setOptionClasses( value );
		}

		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this._setOptionDisabled( value );
		}

		return this;
	},

	_setOptionClasses: function( value ) {
		var classKey, elements, currentElements;

		for ( classKey in value ) {
			currentElements = this.classesElementLookup[ classKey ];
			if ( value[ classKey ] === this.options.classes[ classKey ] ||
					!currentElements ||
					!currentElements.length ) {
				continue;
			}

			// We are doing this to create a new jQuery object because the _removeClass() call
			// on the next line is going to destroy the reference to the current elements being
			// tracked. We need to save a copy of this collection so that we can add the new classes
			// below.
			elements = $( currentElements.get() );
			this._removeClass( currentElements, classKey );

			// We don't use _addClass() here, because that uses this.options.classes
			// for generating the string of classes. We want to use the value passed in from
			// _setOption(), this is the new value of the classes option which was passed to
			// _setOption(). We pass this value directly to _classes().
			elements.addClass( this._classes( {
				element: elements,
				keys: classKey,
				classes: value,
				add: true
			} ) );
		}
	},

	_setOptionDisabled: function( value ) {
		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

		// If the widget is becoming disabled, then nothing is interactive
		if ( value ) {
			this._removeClass( this.hoverable, null, "ui-state-hover" );
			this._removeClass( this.focusable, null, "ui-state-focus" );
		}
	},

	enable: function() {
		return this._setOptions( { disabled: false } );
	},

	disable: function() {
		return this._setOptions( { disabled: true } );
	},

	_classes: function( options ) {
		var full = [];
		var that = this;

		options = $.extend( {
			element: this.element,
			classes: this.options.classes || {}
		}, options );

		function bindRemoveEvent() {
			options.element.each( function( _, element ) {
				var isTracked = $.map( that.classesElementLookup, function( elements ) {
					return elements;
				} )
					.some( function( elements ) {
						return elements.is( element );
					} );

				if ( !isTracked ) {
					that._on( $( element ), {
						remove: "_untrackClassesElement"
					} );
				}
			} );
		}

		function processClassString( classes, checkOption ) {
			var current, i;
			for ( i = 0; i < classes.length; i++ ) {
				current = that.classesElementLookup[ classes[ i ] ] || $();
				if ( options.add ) {
					bindRemoveEvent();
					current = $( $.uniqueSort( current.get().concat( options.element.get() ) ) );
				} else {
					current = $( current.not( options.element ).get() );
				}
				that.classesElementLookup[ classes[ i ] ] = current;
				full.push( classes[ i ] );
				if ( checkOption && options.classes[ classes[ i ] ] ) {
					full.push( options.classes[ classes[ i ] ] );
				}
			}
		}

		if ( options.keys ) {
			processClassString( options.keys.match( /\S+/g ) || [], true );
		}
		if ( options.extra ) {
			processClassString( options.extra.match( /\S+/g ) || [] );
		}

		return full.join( " " );
	},

	_untrackClassesElement: function( event ) {
		var that = this;
		$.each( that.classesElementLookup, function( key, value ) {
			if ( $.inArray( event.target, value ) !== -1 ) {
				that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
			}
		} );

		this._off( $( event.target ) );
	},

	_removeClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, false );
	},

	_addClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, true );
	},

	_toggleClass: function( element, keys, extra, add ) {
		add = ( typeof add === "boolean" ) ? add : extra;
		var shift = ( typeof element === "string" || element === null ),
			options = {
				extra: shift ? keys : extra,
				keys: shift ? element : keys,
				element: shift ? this.element : element,
				add: add
			};
		options.element.toggleClass( this._classes( options ), add );
		return this;
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement;
		var instance = this;

		// No suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// No element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {

				// Allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
						$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// Copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ );
			var eventName = match[ 1 ] + instance.eventNamespace;
			var selector = match[ 2 ];

			if ( selector ) {
				delegateElement.on( eventName, selector, handlerProxy );
			} else {
				element.on( eventName, handlerProxy );
			}
		} );
	},

	_off: function( element, eventName ) {
		eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
			this.eventNamespace;
		element.off( eventName );

		// Clear the stack to avoid memory leaks (#10056)
		this.bindings = $( this.bindings.not( element ).get() );
		this.focusable = $( this.focusable.not( element ).get() );
		this.hoverable = $( this.hoverable.not( element ).get() );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
			},
			mouseleave: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
			}
		} );
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
			},
			focusout: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
			}
		} );
	},

	_trigger: function( type, event, data ) {
		var prop, orig;
		var callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();

		// The original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// Copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( typeof callback === "function" &&
			callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}

		var hasOptions;
		var effectName = !options ?
			method :
			options === true || typeof options === "number" ?
				defaultEffect :
				options.effect || defaultEffect;

		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		} else if ( options === true ) {
			options = {};
		}

		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;

		if ( options.delay ) {
			element.delay( options.delay );
		}

		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue( function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			} );
		}
	};
} );

return $.widget;

} );

;define.alias('jquery-ui','jquery-ui/ui/widget.js');
define('text!select2/dist/css/select2.min.css',function(){return ".select2-container{box-sizing:border-box;display:inline-block;margin:0;position:relative;vertical-align:middle}.select2-container .select2-selection--single{box-sizing:border-box;cursor:pointer;display:block;height:28px;user-select:none;-webkit-user-select:none}.select2-container .select2-selection--single .select2-selection__rendered{display:block;padding-left:8px;padding-right:20px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-selection--single .select2-selection__clear{background-color:transparent;border:none;font-size:1em}.select2-container[dir=\"rtl\"] .select2-selection--single .select2-selection__rendered{padding-right:8px;padding-left:20px}.select2-container .select2-selection--multiple{box-sizing:border-box;cursor:pointer;display:block;min-height:32px;user-select:none;-webkit-user-select:none}.select2-container .select2-selection--multiple .select2-selection__rendered{display:inline;list-style:none;padding:0}.select2-container .select2-selection--multiple .select2-selection__clear{background-color:transparent;border:none;font-size:1em}.select2-container .select2-search--inline .select2-search__field{box-sizing:border-box;border:none;font-size:100%;margin-top:5px;margin-left:5px;padding:0;max-width:100%;resize:none;height:18px;vertical-align:bottom;font-family:sans-serif;overflow:hidden;word-break:keep-all}.select2-container .select2-search--inline .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-dropdown{background-color:white;border:1px solid #aaa;border-radius:4px;box-sizing:border-box;display:block;position:absolute;left:-100000px;width:100%;z-index:1051}.select2-results{display:block}.select2-results__options{list-style:none;margin:0;padding:0}.select2-results__option{padding:6px;user-select:none;-webkit-user-select:none}.select2-results__option--selectable{cursor:pointer}.select2-container--open .select2-dropdown{left:0}.select2-container--open .select2-dropdown--above{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--open .select2-dropdown--below{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.select2-search--dropdown{display:block;padding:4px}.select2-search--dropdown .select2-search__field{padding:4px;width:100%;box-sizing:border-box}.select2-search--dropdown .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-search--dropdown.select2-search--hide{display:none}.select2-close-mask{border:0;margin:0;padding:0;display:block;position:fixed;left:0;top:0;min-height:100%;min-width:100%;height:auto;width:auto;opacity:0;z-index:99;background-color:#fff;filter:alpha(opacity=0)}.select2-hidden-accessible{border:0 !important;clip:rect(0 0 0 0) !important;-webkit-clip-path:inset(50%) !important;clip-path:inset(50%) !important;height:1px !important;overflow:hidden !important;padding:0 !important;position:absolute !important;width:1px !important;white-space:nowrap !important}.select2-container--default .select2-selection--single{background-color:#fff;border:1px solid #aaa;border-radius:4px}.select2-container--default .select2-selection--single .select2-selection__rendered{color:#444;line-height:28px}.select2-container--default .select2-selection--single .select2-selection__clear{cursor:pointer;float:right;font-weight:bold;height:26px;margin-right:20px;padding-right:0px}.select2-container--default .select2-selection--single .select2-selection__placeholder{color:#999}.select2-container--default .select2-selection--single .select2-selection__arrow{height:26px;position:absolute;top:1px;right:1px;width:20px}.select2-container--default .select2-selection--single .select2-selection__arrow b{border-color:#888 transparent transparent transparent;border-style:solid;border-width:5px 4px 0 4px;height:0;left:50%;margin-left:-4px;margin-top:-2px;position:absolute;top:50%;width:0}.select2-container--default[dir=\"rtl\"] .select2-selection--single .select2-selection__clear{float:left}.select2-container--default[dir=\"rtl\"] .select2-selection--single .select2-selection__arrow{left:1px;right:auto}.select2-container--default.select2-container--disabled .select2-selection--single{background-color:#eee;cursor:default}.select2-container--default.select2-container--disabled .select2-selection--single .select2-selection__clear{display:none}.select2-container--default.select2-container--open .select2-selection--single .select2-selection__arrow b{border-color:transparent transparent #888 transparent;border-width:0 4px 5px 4px}.select2-container--default .select2-selection--multiple{background-color:white;border:1px solid #aaa;border-radius:4px;cursor:text;padding-bottom:5px;padding-right:5px;position:relative}.select2-container--default .select2-selection--multiple.select2-selection--clearable{padding-right:25px}.select2-container--default .select2-selection--multiple .select2-selection__clear{cursor:pointer;font-weight:bold;height:20px;margin-right:10px;margin-top:5px;position:absolute;right:0;padding:1px}.select2-container--default .select2-selection--multiple .select2-selection__choice{background-color:#e4e4e4;border:1px solid #aaa;border-radius:4px;box-sizing:border-box;display:inline-block;margin-left:5px;margin-top:5px;padding:0;padding-left:20px;position:relative;max-width:100%;overflow:hidden;text-overflow:ellipsis;vertical-align:bottom;white-space:nowrap}.select2-container--default .select2-selection--multiple .select2-selection__choice__display{cursor:default;padding-left:2px;padding-right:5px}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove{background-color:transparent;border:none;border-right:1px solid #aaa;border-top-left-radius:4px;border-bottom-left-radius:4px;color:#999;cursor:pointer;font-size:1em;font-weight:bold;padding:0 4px;position:absolute;left:0;top:0}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover,.select2-container--default .select2-selection--multiple .select2-selection__choice__remove:focus{background-color:#f1f1f1;color:#333;outline:none}.select2-container--default[dir=\"rtl\"] .select2-selection--multiple .select2-selection__choice{margin-left:5px;margin-right:auto}.select2-container--default[dir=\"rtl\"] .select2-selection--multiple .select2-selection__choice__display{padding-left:5px;padding-right:2px}.select2-container--default[dir=\"rtl\"] .select2-selection--multiple .select2-selection__choice__remove{border-left:1px solid #aaa;border-right:none;border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:4px;border-bottom-right-radius:4px}.select2-container--default[dir=\"rtl\"] .select2-selection--multiple .select2-selection__clear{float:left;margin-left:10px;margin-right:auto}.select2-container--default.select2-container--focus .select2-selection--multiple{border:solid black 1px;outline:0}.select2-container--default.select2-container--disabled .select2-selection--multiple{background-color:#eee;cursor:default}.select2-container--default.select2-container--disabled .select2-selection__choice__remove{display:none}.select2-container--default.select2-container--open.select2-container--above .select2-selection--single,.select2-container--default.select2-container--open.select2-container--above .select2-selection--multiple{border-top-left-radius:0;border-top-right-radius:0}.select2-container--default.select2-container--open.select2-container--below .select2-selection--single,.select2-container--default.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--default .select2-search--dropdown .select2-search__field{border:1px solid #aaa}.select2-container--default .select2-search--inline .select2-search__field{background:transparent;border:none;outline:0;box-shadow:none;-webkit-appearance:textfield}.select2-container--default .select2-results>.select2-results__options{max-height:200px;overflow-y:auto}.select2-container--default .select2-results__option .select2-results__option{padding-left:1em}.select2-container--default .select2-results__option .select2-results__option .select2-results__group{padding-left:0}.select2-container--default .select2-results__option .select2-results__option .select2-results__option{margin-left:-1em;padding-left:2em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-2em;padding-left:3em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-3em;padding-left:4em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-4em;padding-left:5em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-5em;padding-left:6em}.select2-container--default .select2-results__option--group{padding:0}.select2-container--default .select2-results__option--disabled{color:#999}.select2-container--default .select2-results__option--selected{background-color:#ddd}.select2-container--default .select2-results__option--highlighted.select2-results__option--selectable{background-color:#5897fb;color:white}.select2-container--default .select2-results__group{cursor:default;display:block;padding:6px}.select2-container--classic .select2-selection--single{background-color:#f7f7f7;border:1px solid #aaa;border-radius:4px;outline:0;background-image:-webkit-linear-gradient(top, #fff 50%, #eee 100%);background-image:-o-linear-gradient(top, #fff 50%, #eee 100%);background-image:linear-gradient(to bottom, #fff 50%, #eee 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFFFFFFF', endColorstr='#FFEEEEEE', GradientType=0)}.select2-container--classic .select2-selection--single:focus{border:1px solid #5897fb}.select2-container--classic .select2-selection--single .select2-selection__rendered{color:#444;line-height:28px}.select2-container--classic .select2-selection--single .select2-selection__clear{cursor:pointer;float:right;font-weight:bold;height:26px;margin-right:20px}.select2-container--classic .select2-selection--single .select2-selection__placeholder{color:#999}.select2-container--classic .select2-selection--single .select2-selection__arrow{background-color:#ddd;border:none;border-left:1px solid #aaa;border-top-right-radius:4px;border-bottom-right-radius:4px;height:26px;position:absolute;top:1px;right:1px;width:20px;background-image:-webkit-linear-gradient(top, #eee 50%, #ccc 100%);background-image:-o-linear-gradient(top, #eee 50%, #ccc 100%);background-image:linear-gradient(to bottom, #eee 50%, #ccc 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFEEEEEE', endColorstr='#FFCCCCCC', GradientType=0)}.select2-container--classic .select2-selection--single .select2-selection__arrow b{border-color:#888 transparent transparent transparent;border-style:solid;border-width:5px 4px 0 4px;height:0;left:50%;margin-left:-4px;margin-top:-2px;position:absolute;top:50%;width:0}.select2-container--classic[dir=\"rtl\"] .select2-selection--single .select2-selection__clear{float:left}.select2-container--classic[dir=\"rtl\"] .select2-selection--single .select2-selection__arrow{border:none;border-right:1px solid #aaa;border-radius:0;border-top-left-radius:4px;border-bottom-left-radius:4px;left:1px;right:auto}.select2-container--classic.select2-container--open .select2-selection--single{border:1px solid #5897fb}.select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow{background:transparent;border:none}.select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow b{border-color:transparent transparent #888 transparent;border-width:0 4px 5px 4px}.select2-container--classic.select2-container--open.select2-container--above .select2-selection--single{border-top:none;border-top-left-radius:0;border-top-right-radius:0;background-image:-webkit-linear-gradient(top, #fff 0%, #eee 50%);background-image:-o-linear-gradient(top, #fff 0%, #eee 50%);background-image:linear-gradient(to bottom, #fff 0%, #eee 50%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFFFFFFF', endColorstr='#FFEEEEEE', GradientType=0)}.select2-container--classic.select2-container--open.select2-container--below .select2-selection--single{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0;background-image:-webkit-linear-gradient(top, #eee 50%, #fff 100%);background-image:-o-linear-gradient(top, #eee 50%, #fff 100%);background-image:linear-gradient(to bottom, #eee 50%, #fff 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFEEEEEE', endColorstr='#FFFFFFFF', GradientType=0)}.select2-container--classic .select2-selection--multiple{background-color:white;border:1px solid #aaa;border-radius:4px;cursor:text;outline:0;padding-bottom:5px;padding-right:5px}.select2-container--classic .select2-selection--multiple:focus{border:1px solid #5897fb}.select2-container--classic .select2-selection--multiple .select2-selection__clear{display:none}.select2-container--classic .select2-selection--multiple .select2-selection__choice{background-color:#e4e4e4;border:1px solid #aaa;border-radius:4px;display:inline-block;margin-left:5px;margin-top:5px;padding:0}.select2-container--classic .select2-selection--multiple .select2-selection__choice__display{cursor:default;padding-left:2px;padding-right:5px}.select2-container--classic .select2-selection--multiple .select2-selection__choice__remove{background-color:transparent;border:none;border-top-left-radius:4px;border-bottom-left-radius:4px;color:#888;cursor:pointer;font-size:1em;font-weight:bold;padding:0 4px}.select2-container--classic .select2-selection--multiple .select2-selection__choice__remove:hover{color:#555;outline:none}.select2-container--classic[dir=\"rtl\"] .select2-selection--multiple .select2-selection__choice{margin-left:5px;margin-right:auto}.select2-container--classic[dir=\"rtl\"] .select2-selection--multiple .select2-selection__choice__display{padding-left:5px;padding-right:2px}.select2-container--classic[dir=\"rtl\"] .select2-selection--multiple .select2-selection__choice__remove{border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:4px;border-bottom-right-radius:4px}.select2-container--classic.select2-container--open .select2-selection--multiple{border:1px solid #5897fb}.select2-container--classic.select2-container--open.select2-container--above .select2-selection--multiple{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.select2-container--classic.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--classic .select2-search--dropdown .select2-search__field{border:1px solid #aaa;outline:0}.select2-container--classic .select2-search--inline .select2-search__field{outline:0;box-shadow:none}.select2-container--classic .select2-dropdown{background-color:#fff;border:1px solid transparent}.select2-container--classic .select2-dropdown--above{border-bottom:none}.select2-container--classic .select2-dropdown--below{border-top:none}.select2-container--classic .select2-results>.select2-results__options{max-height:200px;overflow-y:auto}.select2-container--classic .select2-results__option--group{padding:0}.select2-container--classic .select2-results__option--disabled{color:grey}.select2-container--classic .select2-results__option--highlighted.select2-results__option--selectable{background-color:#3875d7;color:#fff}.select2-container--classic .select2-results__group{cursor:default;display:block;padding:6px}.select2-container--classic.select2-container--open .select2-dropdown{border-color:#5897fb}\n";});
;define.alias('text!select2/css/select2.min.css','text!select2/dist/css/select2.min.css');
;define.alias('select2/css/select2.min.css','select2/dist/css/select2.min.css');
/*!
 * Select2 4.1.0-rc.0
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
;(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define('select2/dist/js/select2.js',['jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // Node/CommonJS
    module.exports = function (root, jQuery) {
      if (jQuery === undefined) {
        // require('jQuery') returns a factory that requires window to
        // build a jQuery instance, we normalize how we use modules
        // that require this pattern but the window provided is a noop
        // if it's defined (how jquery works)
        if (typeof window !== 'undefined') {
          jQuery = require('jquery');
        }
        else {
          jQuery = require('jquery')(root);
        }
      }
      factory(jQuery);
      return jQuery;
    };
  } else {
    // Browser globals
    factory(jQuery);
  }
} (function (jQuery) {
  // This is needed so we can catch the AMD loader configuration and use it
  // The inner file should be wrapped (by `banner.start.js`) in a function that
  // returns the AMD loader references.
  var S2 =(function () {
  // Restore the Select2 AMD loader so it can be used
  // Needed mostly in the language files, where the loader is not inserted
  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
    var S2 = jQuery.fn.select2.amd;
  }
var S2;(function () { if (!S2 || !S2.requirejs) {
if (!S2) { S2 = {}; } else { require = S2; }
/**
 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name) {
            name = name.split('/');
            lastIndex = name.length - 1;

            // If wanting node ID compatibility, strip .js from end
            // of IDs. Have to do this here, and not in nameToUrl
            // because node allows either .js or non .js to map
            // to same file.
            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
            }

            // Starts with a '.' so need the baseName
            if (name[0].charAt(0) === '.' && baseParts) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that 'directory' and not name of the baseName's
                //module. For instance, baseName of 'one/two/three', maps to
                //'one/two/three.js', but we want the directory, 'one/two' for
                //this normalization.
                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                name = normalizedBaseParts.concat(name);
            }

            //start trimDots
            for (i = 0; i < name.length; i++) {
                part = name[i];
                if (part === '.') {
                    name.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        name.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
            //end trimDots

            name = name.join('/');
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    //Creates a parts array for a relName where first part is plugin ID,
    //second part is resource ID. Assumes relName has already been normalized.
    function makeRelParts(relName) {
        return relName ? splitPrefix(relName) : [];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relParts) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0],
            relResourceName = relParts[1];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relResourceName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relResourceName));
            } else {
                name = normalize(name, relResourceName);
            }
        } else {
            name = normalize(name, relResourceName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i, relParts,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;
        relParts = makeRelParts(relName);

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relParts);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, makeRelParts(callback)).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {
        if (typeof name !== 'string') {
            throw new Error('See almond README: incorrect module build, no module name');
        }

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

S2.requirejs = requirejs;S2.require = require;S2.define = define;
}
}());
S2.define("almond", function(){});

/* global jQuery:false, $:false */
S2.define('jquery',[],function () {
  var _$ = jQuery || $;

  if (_$ == null && console && console.error) {
    console.error(
      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
      'found. Make sure that you are including jQuery before Select2 on your ' +
      'web page.'
    );
  }

  return _$;
});

S2.define('select2/utils',[
  'jquery'
], function ($) {
  var Utils = {};

  Utils.Extend = function (ChildClass, SuperClass) {
    var __hasProp = {}.hasOwnProperty;

    function BaseConstructor () {
      this.constructor = ChildClass;
    }

    for (var key in SuperClass) {
      if (__hasProp.call(SuperClass, key)) {
        ChildClass[key] = SuperClass[key];
      }
    }

    BaseConstructor.prototype = SuperClass.prototype;
    ChildClass.prototype = new BaseConstructor();
    ChildClass.__super__ = SuperClass.prototype;

    return ChildClass;
  };

  function getMethods (theClass) {
    var proto = theClass.prototype;

    var methods = [];

    for (var methodName in proto) {
      var m = proto[methodName];

      if (typeof m !== 'function') {
        continue;
      }

      if (methodName === 'constructor') {
        continue;
      }

      methods.push(methodName);
    }

    return methods;
  }

  Utils.Decorate = function (SuperClass, DecoratorClass) {
    var decoratedMethods = getMethods(DecoratorClass);
    var superMethods = getMethods(SuperClass);

    function DecoratedClass () {
      var unshift = Array.prototype.unshift;

      var argCount = DecoratorClass.prototype.constructor.length;

      var calledConstructor = SuperClass.prototype.constructor;

      if (argCount > 0) {
        unshift.call(arguments, SuperClass.prototype.constructor);

        calledConstructor = DecoratorClass.prototype.constructor;
      }

      calledConstructor.apply(this, arguments);
    }

    DecoratorClass.displayName = SuperClass.displayName;

    function ctr () {
      this.constructor = DecoratedClass;
    }

    DecoratedClass.prototype = new ctr();

    for (var m = 0; m < superMethods.length; m++) {
      var superMethod = superMethods[m];

      DecoratedClass.prototype[superMethod] =
        SuperClass.prototype[superMethod];
    }

    var calledMethod = function (methodName) {
      // Stub out the original method if it's not decorating an actual method
      var originalMethod = function () {};

      if (methodName in DecoratedClass.prototype) {
        originalMethod = DecoratedClass.prototype[methodName];
      }

      var decoratedMethod = DecoratorClass.prototype[methodName];

      return function () {
        var unshift = Array.prototype.unshift;

        unshift.call(arguments, originalMethod);

        return decoratedMethod.apply(this, arguments);
      };
    };

    for (var d = 0; d < decoratedMethods.length; d++) {
      var decoratedMethod = decoratedMethods[d];

      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
    }

    return DecoratedClass;
  };

  var Observable = function () {
    this.listeners = {};
  };

  Observable.prototype.on = function (event, callback) {
    this.listeners = this.listeners || {};

    if (event in this.listeners) {
      this.listeners[event].push(callback);
    } else {
      this.listeners[event] = [callback];
    }
  };

  Observable.prototype.trigger = function (event) {
    var slice = Array.prototype.slice;
    var params = slice.call(arguments, 1);

    this.listeners = this.listeners || {};

    // Params should always come in as an array
    if (params == null) {
      params = [];
    }

    // If there are no arguments to the event, use a temporary object
    if (params.length === 0) {
      params.push({});
    }

    // Set the `_type` of the first object to the event
    params[0]._type = event;

    if (event in this.listeners) {
      this.invoke(this.listeners[event], slice.call(arguments, 1));
    }

    if ('*' in this.listeners) {
      this.invoke(this.listeners['*'], arguments);
    }
  };

  Observable.prototype.invoke = function (listeners, params) {
    for (var i = 0, len = listeners.length; i < len; i++) {
      listeners[i].apply(this, params);
    }
  };

  Utils.Observable = Observable;

  Utils.generateChars = function (length) {
    var chars = '';

    for (var i = 0; i < length; i++) {
      var randomChar = Math.floor(Math.random() * 36);
      chars += randomChar.toString(36);
    }

    return chars;
  };

  Utils.bind = function (func, context) {
    return function () {
      func.apply(context, arguments);
    };
  };

  Utils._convertData = function (data) {
    for (var originalKey in data) {
      var keys = originalKey.split('-');

      var dataLevel = data;

      if (keys.length === 1) {
        continue;
      }

      for (var k = 0; k < keys.length; k++) {
        var key = keys[k];

        // Lowercase the first letter
        // By default, dash-separated becomes camelCase
        key = key.substring(0, 1).toLowerCase() + key.substring(1);

        if (!(key in dataLevel)) {
          dataLevel[key] = {};
        }

        if (k == keys.length - 1) {
          dataLevel[key] = data[originalKey];
        }

        dataLevel = dataLevel[key];
      }

      delete data[originalKey];
    }

    return data;
  };

  Utils.hasScroll = function (index, el) {
    // Adapted from the function created by @ShadowScripter
    // and adapted by @BillBarry on the Stack Exchange Code Review website.
    // The original code can be found at
    // http://codereview.stackexchange.com/q/13338
    // and was designed to be used with the Sizzle selector engine.

    var $el = $(el);
    var overflowX = el.style.overflowX;
    var overflowY = el.style.overflowY;

    //Check both x and y declarations
    if (overflowX === overflowY &&
        (overflowY === 'hidden' || overflowY === 'visible')) {
      return false;
    }

    if (overflowX === 'scroll' || overflowY === 'scroll') {
      return true;
    }

    return ($el.innerHeight() < el.scrollHeight ||
      $el.innerWidth() < el.scrollWidth);
  };

  Utils.escapeMarkup = function (markup) {
    var replaceMap = {
      '\\': '&#92;',
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&#39;',
      '/': '&#47;'
    };

    // Do not try to escape the markup if it's not a string
    if (typeof markup !== 'string') {
      return markup;
    }

    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
      return replaceMap[match];
    });
  };

  // Cache objects in Utils.__cache instead of $.data (see #4346)
  Utils.__cache = {};

  var id = 0;
  Utils.GetUniqueElementId = function (element) {
    // Get a unique element Id. If element has no id,
    // creates a new unique number, stores it in the id
    // attribute and returns the new id with a prefix.
    // If an id already exists, it simply returns it with a prefix.

    var select2Id = element.getAttribute('data-select2-id');

    if (select2Id != null) {
      return select2Id;
    }

    // If element has id, use it.
    if (element.id) {
      select2Id = 'select2-data-' + element.id;
    } else {
      select2Id = 'select2-data-' + (++id).toString() +
        '-' + Utils.generateChars(4);
    }

    element.setAttribute('data-select2-id', select2Id);

    return select2Id;
  };

  Utils.StoreData = function (element, name, value) {
    // Stores an item in the cache for a specified element.
    // name is the cache key.
    var id = Utils.GetUniqueElementId(element);
    if (!Utils.__cache[id]) {
      Utils.__cache[id] = {};
    }

    Utils.__cache[id][name] = value;
  };

  Utils.GetData = function (element, name) {
    // Retrieves a value from the cache by its key (name)
    // name is optional. If no name specified, return
    // all cache items for the specified element.
    // and for a specified element.
    var id = Utils.GetUniqueElementId(element);
    if (name) {
      if (Utils.__cache[id]) {
        if (Utils.__cache[id][name] != null) {
          return Utils.__cache[id][name];
        }
        return $(element).data(name); // Fallback to HTML5 data attribs.
      }
      return $(element).data(name); // Fallback to HTML5 data attribs.
    } else {
      return Utils.__cache[id];
    }
  };

  Utils.RemoveData = function (element) {
    // Removes all cached items for a specified element.
    var id = Utils.GetUniqueElementId(element);
    if (Utils.__cache[id] != null) {
      delete Utils.__cache[id];
    }

    element.removeAttribute('data-select2-id');
  };

  Utils.copyNonInternalCssClasses = function (dest, src) {
    var classes;

    var destinationClasses = dest.getAttribute('class').trim().split(/\s+/);

    destinationClasses = destinationClasses.filter(function (clazz) {
      // Save all Select2 classes
      return clazz.indexOf('select2-') === 0;
    });

    var sourceClasses = src.getAttribute('class').trim().split(/\s+/);

    sourceClasses = sourceClasses.filter(function (clazz) {
      // Only copy non-Select2 classes
      return clazz.indexOf('select2-') !== 0;
    });

    var replacements = destinationClasses.concat(sourceClasses);

    dest.setAttribute('class', replacements.join(' '));
  };

  return Utils;
});

S2.define('select2/results',[
  'jquery',
  './utils'
], function ($, Utils) {
  function Results ($element, options, dataAdapter) {
    this.$element = $element;
    this.data = dataAdapter;
    this.options = options;

    Results.__super__.constructor.call(this);
  }

  Utils.Extend(Results, Utils.Observable);

  Results.prototype.render = function () {
    var $results = $(
      '<ul class="select2-results__options" role="listbox"></ul>'
    );

    if (this.options.get('multiple')) {
      $results.attr('aria-multiselectable', 'true');
    }

    this.$results = $results;

    return $results;
  };

  Results.prototype.clear = function () {
    this.$results.empty();
  };

  Results.prototype.displayMessage = function (params) {
    var escapeMarkup = this.options.get('escapeMarkup');

    this.clear();
    this.hideLoading();

    var $message = $(
      '<li role="alert" aria-live="assertive"' +
      ' class="select2-results__option"></li>'
    );

    var message = this.options.get('translations').get(params.message);

    $message.append(
      escapeMarkup(
        message(params.args)
      )
    );

    $message[0].className += ' select2-results__message';

    this.$results.append($message);
  };

  Results.prototype.hideMessages = function () {
    this.$results.find('.select2-results__message').remove();
  };

  Results.prototype.append = function (data) {
    this.hideLoading();

    var $options = [];

    if (data.results == null || data.results.length === 0) {
      if (this.$results.children().length === 0) {
        this.trigger('results:message', {
          message: 'noResults'
        });
      }

      return;
    }

    data.results = this.sort(data.results);

    for (var d = 0; d < data.results.length; d++) {
      var item = data.results[d];

      var $option = this.option(item);

      $options.push($option);
    }

    this.$results.append($options);
  };

  Results.prototype.position = function ($results, $dropdown) {
    var $resultsContainer = $dropdown.find('.select2-results');
    $resultsContainer.append($results);
  };

  Results.prototype.sort = function (data) {
    var sorter = this.options.get('sorter');

    return sorter(data);
  };

  Results.prototype.highlightFirstItem = function () {
    var $options = this.$results
      .find('.select2-results__option--selectable');

    var $selected = $options.filter('.select2-results__option--selected');

    // Check if there are any selected options
    if ($selected.length > 0) {
      // If there are selected options, highlight the first
      $selected.first().trigger('mouseenter');
    } else {
      // If there are no selected options, highlight the first option
      // in the dropdown
      $options.first().trigger('mouseenter');
    }

    this.ensureHighlightVisible();
  };

  Results.prototype.setClasses = function () {
    var self = this;

    this.data.current(function (selected) {
      var selectedIds = selected.map(function (s) {
        return s.id.toString();
      });

      var $options = self.$results
        .find('.select2-results__option--selectable');

      $options.each(function () {
        var $option = $(this);

        var item = Utils.GetData(this, 'data');

        // id needs to be converted to a string when comparing
        var id = '' + item.id;

        if ((item.element != null && item.element.selected) ||
            (item.element == null && selectedIds.indexOf(id) > -1)) {
          this.classList.add('select2-results__option--selected');
          $option.attr('aria-selected', 'true');
        } else {
          this.classList.remove('select2-results__option--selected');
          $option.attr('aria-selected', 'false');
        }
      });

    });
  };

  Results.prototype.showLoading = function (params) {
    this.hideLoading();

    var loadingMore = this.options.get('translations').get('searching');

    var loading = {
      disabled: true,
      loading: true,
      text: loadingMore(params)
    };
    var $loading = this.option(loading);
    $loading.className += ' loading-results';

    this.$results.prepend($loading);
  };

  Results.prototype.hideLoading = function () {
    this.$results.find('.loading-results').remove();
  };

  Results.prototype.option = function (data) {
    var option = document.createElement('li');
    option.classList.add('select2-results__option');
    option.classList.add('select2-results__option--selectable');

    var attrs = {
      'role': 'option'
    };

    var matches = window.Element.prototype.matches ||
      window.Element.prototype.msMatchesSelector ||
      window.Element.prototype.webkitMatchesSelector;

    if ((data.element != null && matches.call(data.element, ':disabled')) ||
        (data.element == null && data.disabled)) {
      attrs['aria-disabled'] = 'true';

      option.classList.remove('select2-results__option--selectable');
      option.classList.add('select2-results__option--disabled');
    }

    if (data.id == null) {
      option.classList.remove('select2-results__option--selectable');
    }

    if (data._resultId != null) {
      option.id = data._resultId;
    }

    if (data.title) {
      option.title = data.title;
    }

    if (data.children) {
      attrs.role = 'group';
      attrs['aria-label'] = data.text;

      option.classList.remove('select2-results__option--selectable');
      option.classList.add('select2-results__option--group');
    }

    for (var attr in attrs) {
      var val = attrs[attr];

      option.setAttribute(attr, val);
    }

    if (data.children) {
      var $option = $(option);

      var label = document.createElement('strong');
      label.className = 'select2-results__group';

      this.template(data, label);

      var $children = [];

      for (var c = 0; c < data.children.length; c++) {
        var child = data.children[c];

        var $child = this.option(child);

        $children.push($child);
      }

      var $childrenContainer = $('<ul></ul>', {
        'class': 'select2-results__options select2-results__options--nested',
        'role': 'none'
      });

      $childrenContainer.append($children);

      $option.append(label);
      $option.append($childrenContainer);
    } else {
      this.template(data, option);
    }

    Utils.StoreData(option, 'data', data);

    return option;
  };

  Results.prototype.bind = function (container, $container) {
    var self = this;

    var id = container.id + '-results';

    this.$results.attr('id', id);

    container.on('results:all', function (params) {
      self.clear();
      self.append(params.data);

      if (container.isOpen()) {
        self.setClasses();
        self.highlightFirstItem();
      }
    });

    container.on('results:append', function (params) {
      self.append(params.data);

      if (container.isOpen()) {
        self.setClasses();
      }
    });

    container.on('query', function (params) {
      self.hideMessages();
      self.showLoading(params);
    });

    container.on('select', function () {
      if (!container.isOpen()) {
        return;
      }

      self.setClasses();

      if (self.options.get('scrollAfterSelect')) {
        self.highlightFirstItem();
      }
    });

    container.on('unselect', function () {
      if (!container.isOpen()) {
        return;
      }

      self.setClasses();

      if (self.options.get('scrollAfterSelect')) {
        self.highlightFirstItem();
      }
    });

    container.on('open', function () {
      // When the dropdown is open, aria-expended="true"
      self.$results.attr('aria-expanded', 'true');
      self.$results.attr('aria-hidden', 'false');

      self.setClasses();
      self.ensureHighlightVisible();
    });

    container.on('close', function () {
      // When the dropdown is closed, aria-expended="false"
      self.$results.attr('aria-expanded', 'false');
      self.$results.attr('aria-hidden', 'true');
      self.$results.removeAttr('aria-activedescendant');
    });

    container.on('results:toggle', function () {
      var $highlighted = self.getHighlightedResults();

      if ($highlighted.length === 0) {
        return;
      }

      $highlighted.trigger('mouseup');
    });

    container.on('results:select', function () {
      var $highlighted = self.getHighlightedResults();

      if ($highlighted.length === 0) {
        return;
      }

      var data = Utils.GetData($highlighted[0], 'data');

      if ($highlighted.hasClass('select2-results__option--selected')) {
        self.trigger('close', {});
      } else {
        self.trigger('select', {
          data: data
        });
      }
    });

    container.on('results:previous', function () {
      var $highlighted = self.getHighlightedResults();

      var $options = self.$results.find('.select2-results__option--selectable');

      var currentIndex = $options.index($highlighted);

      // If we are already at the top, don't move further
      // If no options, currentIndex will be -1
      if (currentIndex <= 0) {
        return;
      }

      var nextIndex = currentIndex - 1;

      // If none are highlighted, highlight the first
      if ($highlighted.length === 0) {
        nextIndex = 0;
      }

      var $next = $options.eq(nextIndex);

      $next.trigger('mouseenter');

      var currentOffset = self.$results.offset().top;
      var nextTop = $next.offset().top;
      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

      if (nextIndex === 0) {
        self.$results.scrollTop(0);
      } else if (nextTop - currentOffset < 0) {
        self.$results.scrollTop(nextOffset);
      }
    });

    container.on('results:next', function () {
      var $highlighted = self.getHighlightedResults();

      var $options = self.$results.find('.select2-results__option--selectable');

      var currentIndex = $options.index($highlighted);

      var nextIndex = currentIndex + 1;

      // If we are at the last option, stay there
      if (nextIndex >= $options.length) {
        return;
      }

      var $next = $options.eq(nextIndex);

      $next.trigger('mouseenter');

      var currentOffset = self.$results.offset().top +
        self.$results.outerHeight(false);
      var nextBottom = $next.offset().top + $next.outerHeight(false);
      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

      if (nextIndex === 0) {
        self.$results.scrollTop(0);
      } else if (nextBottom > currentOffset) {
        self.$results.scrollTop(nextOffset);
      }
    });

    container.on('results:focus', function (params) {
      params.element[0].classList.add('select2-results__option--highlighted');
      params.element[0].setAttribute('aria-selected', 'true');
    });

    container.on('results:message', function (params) {
      self.displayMessage(params);
    });

    if ($.fn.mousewheel) {
      this.$results.on('mousewheel', function (e) {
        var top = self.$results.scrollTop();

        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

        if (isAtTop) {
          self.$results.scrollTop(0);

          e.preventDefault();
          e.stopPropagation();
        } else if (isAtBottom) {
          self.$results.scrollTop(
            self.$results.get(0).scrollHeight - self.$results.height()
          );

          e.preventDefault();
          e.stopPropagation();
        }
      });
    }

    this.$results.on('mouseup', '.select2-results__option--selectable',
      function (evt) {
      var $this = $(this);

      var data = Utils.GetData(this, 'data');

      if ($this.hasClass('select2-results__option--selected')) {
        if (self.options.get('multiple')) {
          self.trigger('unselect', {
            originalEvent: evt,
            data: data
          });
        } else {
          self.trigger('close', {});
        }

        return;
      }

      self.trigger('select', {
        originalEvent: evt,
        data: data
      });
    });

    this.$results.on('mouseenter', '.select2-results__option--selectable',
      function (evt) {
      var data = Utils.GetData(this, 'data');

      self.getHighlightedResults()
          .removeClass('select2-results__option--highlighted')
          .attr('aria-selected', 'false');

      self.trigger('results:focus', {
        data: data,
        element: $(this)
      });
    });
  };

  Results.prototype.getHighlightedResults = function () {
    var $highlighted = this.$results
    .find('.select2-results__option--highlighted');

    return $highlighted;
  };

  Results.prototype.destroy = function () {
    this.$results.remove();
  };

  Results.prototype.ensureHighlightVisible = function () {
    var $highlighted = this.getHighlightedResults();

    if ($highlighted.length === 0) {
      return;
    }

    var $options = this.$results.find('.select2-results__option--selectable');

    var currentIndex = $options.index($highlighted);

    var currentOffset = this.$results.offset().top;
    var nextTop = $highlighted.offset().top;
    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

    var offsetDelta = nextTop - currentOffset;
    nextOffset -= $highlighted.outerHeight(false) * 2;

    if (currentIndex <= 2) {
      this.$results.scrollTop(0);
    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
      this.$results.scrollTop(nextOffset);
    }
  };

  Results.prototype.template = function (result, container) {
    var template = this.options.get('templateResult');
    var escapeMarkup = this.options.get('escapeMarkup');

    var content = template(result, container);

    if (content == null) {
      container.style.display = 'none';
    } else if (typeof content === 'string') {
      container.innerHTML = escapeMarkup(content);
    } else {
      $(container).append(content);
    }
  };

  return Results;
});

S2.define('select2/keys',[

], function () {
  var KEYS = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    DELETE: 46
  };

  return KEYS;
});

S2.define('select2/selection/base',[
  'jquery',
  '../utils',
  '../keys'
], function ($, Utils, KEYS) {
  function BaseSelection ($element, options) {
    this.$element = $element;
    this.options = options;

    BaseSelection.__super__.constructor.call(this);
  }

  Utils.Extend(BaseSelection, Utils.Observable);

  BaseSelection.prototype.render = function () {
    var $selection = $(
      '<span class="select2-selection" role="combobox" ' +
      ' aria-haspopup="true" aria-expanded="false">' +
      '</span>'
    );

    this._tabindex = 0;

    if (Utils.GetData(this.$element[0], 'old-tabindex') != null) {
      this._tabindex = Utils.GetData(this.$element[0], 'old-tabindex');
    } else if (this.$element.attr('tabindex') != null) {
      this._tabindex = this.$element.attr('tabindex');
    }

    $selection.attr('title', this.$element.attr('title'));
    $selection.attr('tabindex', this._tabindex);
    $selection.attr('aria-disabled', 'false');

    this.$selection = $selection;

    return $selection;
  };

  BaseSelection.prototype.bind = function (container, $container) {
    var self = this;

    var resultsId = container.id + '-results';

    this.container = container;

    this.$selection.on('focus', function (evt) {
      self.trigger('focus', evt);
    });

    this.$selection.on('blur', function (evt) {
      self._handleBlur(evt);
    });

    this.$selection.on('keydown', function (evt) {
      self.trigger('keypress', evt);

      if (evt.which === KEYS.SPACE) {
        evt.preventDefault();
      }
    });

    container.on('results:focus', function (params) {
      self.$selection.attr('aria-activedescendant', params.data._resultId);
    });

    container.on('selection:update', function (params) {
      self.update(params.data);
    });

    container.on('open', function () {
      // When the dropdown is open, aria-expanded="true"
      self.$selection.attr('aria-expanded', 'true');
      self.$selection.attr('aria-owns', resultsId);

      self._attachCloseHandler(container);
    });

    container.on('close', function () {
      // When the dropdown is closed, aria-expanded="false"
      self.$selection.attr('aria-expanded', 'false');
      self.$selection.removeAttr('aria-activedescendant');
      self.$selection.removeAttr('aria-owns');

      self.$selection.trigger('focus');

      self._detachCloseHandler(container);
    });

    container.on('enable', function () {
      self.$selection.attr('tabindex', self._tabindex);
      self.$selection.attr('aria-disabled', 'false');
    });

    container.on('disable', function () {
      self.$selection.attr('tabindex', '-1');
      self.$selection.attr('aria-disabled', 'true');
    });
  };

  BaseSelection.prototype._handleBlur = function (evt) {
    var self = this;

    // This needs to be delayed as the active element is the body when the tab
    // key is pressed, possibly along with others.
    window.setTimeout(function () {
      // Don't trigger `blur` if the focus is still in the selection
      if (
        (document.activeElement == self.$selection[0]) ||
        ($.contains(self.$selection[0], document.activeElement))
      ) {
        return;
      }

      self.trigger('blur', evt);
    }, 1);
  };

  BaseSelection.prototype._attachCloseHandler = function (container) {

    $(document.body).on('mousedown.select2.' + container.id, function (e) {
      var $target = $(e.target);

      var $select = $target.closest('.select2');

      var $all = $('.select2.select2-container--open');

      $all.each(function () {
        if (this == $select[0]) {
          return;
        }

        var $element = Utils.GetData(this, 'element');

        $element.select2('close');
      });
    });
  };

  BaseSelection.prototype._detachCloseHandler = function (container) {
    $(document.body).off('mousedown.select2.' + container.id);
  };

  BaseSelection.prototype.position = function ($selection, $container) {
    var $selectionContainer = $container.find('.selection');
    $selectionContainer.append($selection);
  };

  BaseSelection.prototype.destroy = function () {
    this._detachCloseHandler(this.container);
  };

  BaseSelection.prototype.update = function (data) {
    throw new Error('The `update` method must be defined in child classes.');
  };

  /**
   * Helper method to abstract the "enabled" (not "disabled") state of this
   * object.
   *
   * @return {true} if the instance is not disabled.
   * @return {false} if the instance is disabled.
   */
  BaseSelection.prototype.isEnabled = function () {
    return !this.isDisabled();
  };

  /**
   * Helper method to abstract the "disabled" state of this object.
   *
   * @return {true} if the disabled option is true.
   * @return {false} if the disabled option is false.
   */
  BaseSelection.prototype.isDisabled = function () {
    return this.options.get('disabled');
  };

  return BaseSelection;
});

S2.define('select2/selection/single',[
  'jquery',
  './base',
  '../utils',
  '../keys'
], function ($, BaseSelection, Utils, KEYS) {
  function SingleSelection () {
    SingleSelection.__super__.constructor.apply(this, arguments);
  }

  Utils.Extend(SingleSelection, BaseSelection);

  SingleSelection.prototype.render = function () {
    var $selection = SingleSelection.__super__.render.call(this);

    $selection[0].classList.add('select2-selection--single');

    $selection.html(
      '<span class="select2-selection__rendered"></span>' +
      '<span class="select2-selection__arrow" role="presentation">' +
        '<b role="presentation"></b>' +
      '</span>'
    );

    return $selection;
  };

  SingleSelection.prototype.bind = function (container, $container) {
    var self = this;

    SingleSelection.__super__.bind.apply(this, arguments);

    var id = container.id + '-container';

    this.$selection.find('.select2-selection__rendered')
      .attr('id', id)
      .attr('role', 'textbox')
      .attr('aria-readonly', 'true');
    this.$selection.attr('aria-labelledby', id);
    this.$selection.attr('aria-controls', id);

    this.$selection.on('mousedown', function (evt) {
      // Only respond to left clicks
      if (evt.which !== 1) {
        return;
      }

      self.trigger('toggle', {
        originalEvent: evt
      });
    });

    this.$selection.on('focus', function (evt) {
      // User focuses on the container
    });

    this.$selection.on('blur', function (evt) {
      // User exits the container
    });

    container.on('focus', function (evt) {
      if (!container.isOpen()) {
        self.$selection.trigger('focus');
      }
    });
  };

  SingleSelection.prototype.clear = function () {
    var $rendered = this.$selection.find('.select2-selection__rendered');
    $rendered.empty();
    $rendered.removeAttr('title'); // clear tooltip on empty
  };

  SingleSelection.prototype.display = function (data, container) {
    var template = this.options.get('templateSelection');
    var escapeMarkup = this.options.get('escapeMarkup');

    return escapeMarkup(template(data, container));
  };

  SingleSelection.prototype.selectionContainer = function () {
    return $('<span></span>');
  };

  SingleSelection.prototype.update = function (data) {
    if (data.length === 0) {
      this.clear();
      return;
    }

    var selection = data[0];

    var $rendered = this.$selection.find('.select2-selection__rendered');
    var formatted = this.display(selection, $rendered);

    $rendered.empty().append(formatted);

    var title = selection.title || selection.text;

    if (title) {
      $rendered.attr('title', title);
    } else {
      $rendered.removeAttr('title');
    }
  };

  return SingleSelection;
});

S2.define('select2/selection/multiple',[
  'jquery',
  './base',
  '../utils'
], function ($, BaseSelection, Utils) {
  function MultipleSelection ($element, options) {
    MultipleSelection.__super__.constructor.apply(this, arguments);
  }

  Utils.Extend(MultipleSelection, BaseSelection);

  MultipleSelection.prototype.render = function () {
    var $selection = MultipleSelection.__super__.render.call(this);

    $selection[0].classList.add('select2-selection--multiple');

    $selection.html(
      '<ul class="select2-selection__rendered"></ul>'
    );

    return $selection;
  };

  MultipleSelection.prototype.bind = function (container, $container) {
    var self = this;

    MultipleSelection.__super__.bind.apply(this, arguments);

    var id = container.id + '-container';
    this.$selection.find('.select2-selection__rendered').attr('id', id);

    this.$selection.on('click', function (evt) {
      self.trigger('toggle', {
        originalEvent: evt
      });
    });

    this.$selection.on(
      'click',
      '.select2-selection__choice__remove',
      function (evt) {
        // Ignore the event if it is disabled
        if (self.isDisabled()) {
          return;
        }

        var $remove = $(this);
        var $selection = $remove.parent();

        var data = Utils.GetData($selection[0], 'data');

        self.trigger('unselect', {
          originalEvent: evt,
          data: data
        });
      }
    );

    this.$selection.on(
      'keydown',
      '.select2-selection__choice__remove',
      function (evt) {
        // Ignore the event if it is disabled
        if (self.isDisabled()) {
          return;
        }

        evt.stopPropagation();
      }
    );
  };

  MultipleSelection.prototype.clear = function () {
    var $rendered = this.$selection.find('.select2-selection__rendered');
    $rendered.empty();
    $rendered.removeAttr('title');
  };

  MultipleSelection.prototype.display = function (data, container) {
    var template = this.options.get('templateSelection');
    var escapeMarkup = this.options.get('escapeMarkup');

    return escapeMarkup(template(data, container));
  };

  MultipleSelection.prototype.selectionContainer = function () {
    var $container = $(
      '<li class="select2-selection__choice">' +
        '<button type="button" class="select2-selection__choice__remove" ' +
        'tabindex="-1">' +
          '<span aria-hidden="true">&times;</span>' +
        '</button>' +
        '<span class="select2-selection__choice__display"></span>' +
      '</li>'
    );

    return $container;
  };

  MultipleSelection.prototype.update = function (data) {
    this.clear();

    if (data.length === 0) {
      return;
    }

    var $selections = [];

    var selectionIdPrefix = this.$selection.find('.select2-selection__rendered')
      .attr('id') + '-choice-';

    for (var d = 0; d < data.length; d++) {
      var selection = data[d];

      var $selection = this.selectionContainer();
      var formatted = this.display(selection, $selection);

      var selectionId = selectionIdPrefix + Utils.generateChars(4) + '-';

      if (selection.id) {
        selectionId += selection.id;
      } else {
        selectionId += Utils.generateChars(4);
      }

      $selection.find('.select2-selection__choice__display')
        .append(formatted)
        .attr('id', selectionId);

      var title = selection.title || selection.text;

      if (title) {
        $selection.attr('title', title);
      }

      var removeItem = this.options.get('translations').get('removeItem');

      var $remove = $selection.find('.select2-selection__choice__remove');

      $remove.attr('title', removeItem());
      $remove.attr('aria-label', removeItem());
      $remove.attr('aria-describedby', selectionId);

      Utils.StoreData($selection[0], 'data', selection);

      $selections.push($selection);
    }

    var $rendered = this.$selection.find('.select2-selection__rendered');

    $rendered.append($selections);
  };

  return MultipleSelection;
});

S2.define('select2/selection/placeholder',[

], function () {
  function Placeholder (decorated, $element, options) {
    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

    decorated.call(this, $element, options);
  }

  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
    if (typeof placeholder === 'string') {
      placeholder = {
        id: '',
        text: placeholder
      };
    }

    return placeholder;
  };

  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
    var $placeholder = this.selectionContainer();

    $placeholder.html(this.display(placeholder));
    $placeholder[0].classList.add('select2-selection__placeholder');
    $placeholder[0].classList.remove('select2-selection__choice');

    var placeholderTitle = placeholder.title ||
      placeholder.text ||
      $placeholder.text();

    this.$selection.find('.select2-selection__rendered').attr(
      'title',
      placeholderTitle
    );

    return $placeholder;
  };

  Placeholder.prototype.update = function (decorated, data) {
    var singlePlaceholder = (
      data.length == 1 && data[0].id != this.placeholder.id
    );
    var multipleSelections = data.length > 1;

    if (multipleSelections || singlePlaceholder) {
      return decorated.call(this, data);
    }

    this.clear();

    var $placeholder = this.createPlaceholder(this.placeholder);

    this.$selection.find('.select2-selection__rendered').append($placeholder);
  };

  return Placeholder;
});

S2.define('select2/selection/allowClear',[
  'jquery',
  '../keys',
  '../utils'
], function ($, KEYS, Utils) {
  function AllowClear () { }

  AllowClear.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    if (this.placeholder == null) {
      if (this.options.get('debug') && window.console && console.error) {
        console.error(
          'Select2: The `allowClear` option should be used in combination ' +
          'with the `placeholder` option.'
        );
      }
    }

    this.$selection.on('mousedown', '.select2-selection__clear',
      function (evt) {
        self._handleClear(evt);
    });

    container.on('keypress', function (evt) {
      self._handleKeyboardClear(evt, container);
    });
  };

  AllowClear.prototype._handleClear = function (_, evt) {
    // Ignore the event if it is disabled
    if (this.isDisabled()) {
      return;
    }

    var $clear = this.$selection.find('.select2-selection__clear');

    // Ignore the event if nothing has been selected
    if ($clear.length === 0) {
      return;
    }

    evt.stopPropagation();

    var data = Utils.GetData($clear[0], 'data');

    var previousVal = this.$element.val();
    this.$element.val(this.placeholder.id);

    var unselectData = {
      data: data
    };
    this.trigger('clear', unselectData);
    if (unselectData.prevented) {
      this.$element.val(previousVal);
      return;
    }

    for (var d = 0; d < data.length; d++) {
      unselectData = {
        data: data[d]
      };

      // Trigger the `unselect` event, so people can prevent it from being
      // cleared.
      this.trigger('unselect', unselectData);

      // If the event was prevented, don't clear it out.
      if (unselectData.prevented) {
        this.$element.val(previousVal);
        return;
      }
    }

    this.$element.trigger('input').trigger('change');

    this.trigger('toggle', {});
  };

  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
    if (container.isOpen()) {
      return;
    }

    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
      this._handleClear(evt);
    }
  };

  AllowClear.prototype.update = function (decorated, data) {
    decorated.call(this, data);

    this.$selection.find('.select2-selection__clear').remove();
    this.$selection[0].classList.remove('select2-selection--clearable');

    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
        data.length === 0) {
      return;
    }

    var selectionId = this.$selection.find('.select2-selection__rendered')
      .attr('id');

    var removeAll = this.options.get('translations').get('removeAllItems');

    var $remove = $(
      '<button type="button" class="select2-selection__clear" tabindex="-1">' +
        '<span aria-hidden="true">&times;</span>' +
      '</button>'
    );
    $remove.attr('title', removeAll());
    $remove.attr('aria-label', removeAll());
    $remove.attr('aria-describedby', selectionId);
    Utils.StoreData($remove[0], 'data', data);

    this.$selection.prepend($remove);
    this.$selection[0].classList.add('select2-selection--clearable');
  };

  return AllowClear;
});

S2.define('select2/selection/search',[
  'jquery',
  '../utils',
  '../keys'
], function ($, Utils, KEYS) {
  function Search (decorated, $element, options) {
    decorated.call(this, $element, options);
  }

  Search.prototype.render = function (decorated) {
    var searchLabel = this.options.get('translations').get('search');
    var $search = $(
      '<span class="select2-search select2-search--inline">' +
        '<textarea class="select2-search__field"'+
        ' type="search" tabindex="-1"' +
        ' autocorrect="off" autocapitalize="none"' +
        ' spellcheck="false" role="searchbox" aria-autocomplete="list" >' +
        '</textarea>' +
      '</span>'
    );

    this.$searchContainer = $search;
    this.$search = $search.find('textarea');

    this.$search.prop('autocomplete', this.options.get('autocomplete'));
    this.$search.attr('aria-label', searchLabel());

    var $rendered = decorated.call(this);

    this._transferTabIndex();
    $rendered.append(this.$searchContainer);

    return $rendered;
  };

  Search.prototype.bind = function (decorated, container, $container) {
    var self = this;

    var resultsId = container.id + '-results';
    var selectionId = container.id + '-container';

    decorated.call(this, container, $container);

    self.$search.attr('aria-describedby', selectionId);

    container.on('open', function () {
      self.$search.attr('aria-controls', resultsId);
      self.$search.trigger('focus');
    });

    container.on('close', function () {
      self.$search.val('');
      self.resizeSearch();
      self.$search.removeAttr('aria-controls');
      self.$search.removeAttr('aria-activedescendant');
      self.$search.trigger('focus');
    });

    container.on('enable', function () {
      self.$search.prop('disabled', false);

      self._transferTabIndex();
    });

    container.on('disable', function () {
      self.$search.prop('disabled', true);
    });

    container.on('focus', function (evt) {
      self.$search.trigger('focus');
    });

    container.on('results:focus', function (params) {
      if (params.data._resultId) {
        self.$search.attr('aria-activedescendant', params.data._resultId);
      } else {
        self.$search.removeAttr('aria-activedescendant');
      }
    });

    this.$selection.on('focusin', '.select2-search--inline', function (evt) {
      self.trigger('focus', evt);
    });

    this.$selection.on('focusout', '.select2-search--inline', function (evt) {
      self._handleBlur(evt);
    });

    this.$selection.on('keydown', '.select2-search--inline', function (evt) {
      evt.stopPropagation();

      self.trigger('keypress', evt);

      self._keyUpPrevented = evt.isDefaultPrevented();

      var key = evt.which;

      if (key === KEYS.BACKSPACE && self.$search.val() === '') {
        var $previousChoice = self.$selection
          .find('.select2-selection__choice').last();

        if ($previousChoice.length > 0) {
          var item = Utils.GetData($previousChoice[0], 'data');

          self.searchRemoveChoice(item);

          evt.preventDefault();
        }
      }
    });

    this.$selection.on('click', '.select2-search--inline', function (evt) {
      if (self.$search.val()) {
        evt.stopPropagation();
      }
    });

    // Try to detect the IE version should the `documentMode` property that
    // is stored on the document. This is only implemented in IE and is
    // slightly cleaner than doing a user agent check.
    // This property is not available in Edge, but Edge also doesn't have
    // this bug.
    var msie = document.documentMode;
    var disableInputEvents = msie && msie <= 11;

    // Workaround for browsers which do not support the `input` event
    // This will prevent double-triggering of events for browsers which support
    // both the `keyup` and `input` events.
    this.$selection.on(
      'input.searchcheck',
      '.select2-search--inline',
      function (evt) {
        // IE will trigger the `input` event when a placeholder is used on a
        // search box. To get around this issue, we are forced to ignore all
        // `input` events in IE and keep using `keyup`.
        if (disableInputEvents) {
          self.$selection.off('input.search input.searchcheck');
          return;
        }

        // Unbind the duplicated `keyup` event
        self.$selection.off('keyup.search');
      }
    );

    this.$selection.on(
      'keyup.search input.search',
      '.select2-search--inline',
      function (evt) {
        // IE will trigger the `input` event when a placeholder is used on a
        // search box. To get around this issue, we are forced to ignore all
        // `input` events in IE and keep using `keyup`.
        if (disableInputEvents && evt.type === 'input') {
          self.$selection.off('input.search input.searchcheck');
          return;
        }

        var key = evt.which;

        // We can freely ignore events from modifier keys
        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
          return;
        }

        // Tabbing will be handled during the `keydown` phase
        if (key == KEYS.TAB) {
          return;
        }

        self.handleSearch(evt);
      }
    );
  };

  /**
   * This method will transfer the tabindex attribute from the rendered
   * selection to the search box. This allows for the search box to be used as
   * the primary focus instead of the selection container.
   *
   * @private
   */
  Search.prototype._transferTabIndex = function (decorated) {
    this.$search.attr('tabindex', this.$selection.attr('tabindex'));
    this.$selection.attr('tabindex', '-1');
  };

  Search.prototype.createPlaceholder = function (decorated, placeholder) {
    this.$search.attr('placeholder', placeholder.text);
  };

  Search.prototype.update = function (decorated, data) {
    var searchHadFocus = this.$search[0] == document.activeElement;

    this.$search.attr('placeholder', '');

    decorated.call(this, data);

    this.resizeSearch();
    if (searchHadFocus) {
      this.$search.trigger('focus');
    }
  };

  Search.prototype.handleSearch = function () {
    this.resizeSearch();

    if (!this._keyUpPrevented) {
      var input = this.$search.val();

      this.trigger('query', {
        term: input
      });
    }

    this._keyUpPrevented = false;
  };

  Search.prototype.searchRemoveChoice = function (decorated, item) {
    this.trigger('unselect', {
      data: item
    });

    this.$search.val(item.text);
    this.handleSearch();
  };

  Search.prototype.resizeSearch = function () {
    this.$search.css('width', '25px');

    var width = '100%';

    if (this.$search.attr('placeholder') === '') {
      var minimumWidth = this.$search.val().length + 1;

      width = (minimumWidth * 0.75) + 'em';
    }

    this.$search.css('width', width);
  };

  return Search;
});

S2.define('select2/selection/selectionCss',[
  '../utils'
], function (Utils) {
  function SelectionCSS () { }

  SelectionCSS.prototype.render = function (decorated) {
    var $selection = decorated.call(this);

    var selectionCssClass = this.options.get('selectionCssClass') || '';

    if (selectionCssClass.indexOf(':all:') !== -1) {
      selectionCssClass = selectionCssClass.replace(':all:', '');

      Utils.copyNonInternalCssClasses($selection[0], this.$element[0]);
    }

    $selection.addClass(selectionCssClass);

    return $selection;
  };

  return SelectionCSS;
});

S2.define('select2/selection/eventRelay',[
  'jquery'
], function ($) {
  function EventRelay () { }

  EventRelay.prototype.bind = function (decorated, container, $container) {
    var self = this;
    var relayEvents = [
      'open', 'opening',
      'close', 'closing',
      'select', 'selecting',
      'unselect', 'unselecting',
      'clear', 'clearing'
    ];

    var preventableEvents = [
      'opening', 'closing', 'selecting', 'unselecting', 'clearing'
    ];

    decorated.call(this, container, $container);

    container.on('*', function (name, params) {
      // Ignore events that should not be relayed
      if (relayEvents.indexOf(name) === -1) {
        return;
      }

      // The parameters should always be an object
      params = params || {};

      // Generate the jQuery event for the Select2 event
      var evt = $.Event('select2:' + name, {
        params: params
      });

      self.$element.trigger(evt);

      // Only handle preventable events if it was one
      if (preventableEvents.indexOf(name) === -1) {
        return;
      }

      params.prevented = evt.isDefaultPrevented();
    });
  };

  return EventRelay;
});

S2.define('select2/translation',[
  'jquery',
  'require'
], function ($, require) {
  function Translation (dict) {
    this.dict = dict || {};
  }

  Translation.prototype.all = function () {
    return this.dict;
  };

  Translation.prototype.get = function (key) {
    return this.dict[key];
  };

  Translation.prototype.extend = function (translation) {
    this.dict = $.extend({}, translation.all(), this.dict);
  };

  // Static functions

  Translation._cache = {};

  Translation.loadPath = function (path) {
    if (!(path in Translation._cache)) {
      var translations = require(path);

      Translation._cache[path] = translations;
    }

    return new Translation(Translation._cache[path]);
  };

  return Translation;
});

S2.define('select2/diacritics',[

], function () {
  var diacritics = {
    '\u24B6': 'A',
    '\uFF21': 'A',
    '\u00C0': 'A',
    '\u00C1': 'A',
    '\u00C2': 'A',
    '\u1EA6': 'A',
    '\u1EA4': 'A',
    '\u1EAA': 'A',
    '\u1EA8': 'A',
    '\u00C3': 'A',
    '\u0100': 'A',
    '\u0102': 'A',
    '\u1EB0': 'A',
    '\u1EAE': 'A',
    '\u1EB4': 'A',
    '\u1EB2': 'A',
    '\u0226': 'A',
    '\u01E0': 'A',
    '\u00C4': 'A',
    '\u01DE': 'A',
    '\u1EA2': 'A',
    '\u00C5': 'A',
    '\u01FA': 'A',
    '\u01CD': 'A',
    '\u0200': 'A',
    '\u0202': 'A',
    '\u1EA0': 'A',
    '\u1EAC': 'A',
    '\u1EB6': 'A',
    '\u1E00': 'A',
    '\u0104': 'A',
    '\u023A': 'A',
    '\u2C6F': 'A',
    '\uA732': 'AA',
    '\u00C6': 'AE',
    '\u01FC': 'AE',
    '\u01E2': 'AE',
    '\uA734': 'AO',
    '\uA736': 'AU',
    '\uA738': 'AV',
    '\uA73A': 'AV',
    '\uA73C': 'AY',
    '\u24B7': 'B',
    '\uFF22': 'B',
    '\u1E02': 'B',
    '\u1E04': 'B',
    '\u1E06': 'B',
    '\u0243': 'B',
    '\u0182': 'B',
    '\u0181': 'B',
    '\u24B8': 'C',
    '\uFF23': 'C',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010A': 'C',
    '\u010C': 'C',
    '\u00C7': 'C',
    '\u1E08': 'C',
    '\u0187': 'C',
    '\u023B': 'C',
    '\uA73E': 'C',
    '\u24B9': 'D',
    '\uFF24': 'D',
    '\u1E0A': 'D',
    '\u010E': 'D',
    '\u1E0C': 'D',
    '\u1E10': 'D',
    '\u1E12': 'D',
    '\u1E0E': 'D',
    '\u0110': 'D',
    '\u018B': 'D',
    '\u018A': 'D',
    '\u0189': 'D',
    '\uA779': 'D',
    '\u01F1': 'DZ',
    '\u01C4': 'DZ',
    '\u01F2': 'Dz',
    '\u01C5': 'Dz',
    '\u24BA': 'E',
    '\uFF25': 'E',
    '\u00C8': 'E',
    '\u00C9': 'E',
    '\u00CA': 'E',
    '\u1EC0': 'E',
    '\u1EBE': 'E',
    '\u1EC4': 'E',
    '\u1EC2': 'E',
    '\u1EBC': 'E',
    '\u0112': 'E',
    '\u1E14': 'E',
    '\u1E16': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u00CB': 'E',
    '\u1EBA': 'E',
    '\u011A': 'E',
    '\u0204': 'E',
    '\u0206': 'E',
    '\u1EB8': 'E',
    '\u1EC6': 'E',
    '\u0228': 'E',
    '\u1E1C': 'E',
    '\u0118': 'E',
    '\u1E18': 'E',
    '\u1E1A': 'E',
    '\u0190': 'E',
    '\u018E': 'E',
    '\u24BB': 'F',
    '\uFF26': 'F',
    '\u1E1E': 'F',
    '\u0191': 'F',
    '\uA77B': 'F',
    '\u24BC': 'G',
    '\uFF27': 'G',
    '\u01F4': 'G',
    '\u011C': 'G',
    '\u1E20': 'G',
    '\u011E': 'G',
    '\u0120': 'G',
    '\u01E6': 'G',
    '\u0122': 'G',
    '\u01E4': 'G',
    '\u0193': 'G',
    '\uA7A0': 'G',
    '\uA77D': 'G',
    '\uA77E': 'G',
    '\u24BD': 'H',
    '\uFF28': 'H',
    '\u0124': 'H',
    '\u1E22': 'H',
    '\u1E26': 'H',
    '\u021E': 'H',
    '\u1E24': 'H',
    '\u1E28': 'H',
    '\u1E2A': 'H',
    '\u0126': 'H',
    '\u2C67': 'H',
    '\u2C75': 'H',
    '\uA78D': 'H',
    '\u24BE': 'I',
    '\uFF29': 'I',
    '\u00CC': 'I',
    '\u00CD': 'I',
    '\u00CE': 'I',
    '\u0128': 'I',
    '\u012A': 'I',
    '\u012C': 'I',
    '\u0130': 'I',
    '\u00CF': 'I',
    '\u1E2E': 'I',
    '\u1EC8': 'I',
    '\u01CF': 'I',
    '\u0208': 'I',
    '\u020A': 'I',
    '\u1ECA': 'I',
    '\u012E': 'I',
    '\u1E2C': 'I',
    '\u0197': 'I',
    '\u24BF': 'J',
    '\uFF2A': 'J',
    '\u0134': 'J',
    '\u0248': 'J',
    '\u24C0': 'K',
    '\uFF2B': 'K',
    '\u1E30': 'K',
    '\u01E8': 'K',
    '\u1E32': 'K',
    '\u0136': 'K',
    '\u1E34': 'K',
    '\u0198': 'K',
    '\u2C69': 'K',
    '\uA740': 'K',
    '\uA742': 'K',
    '\uA744': 'K',
    '\uA7A2': 'K',
    '\u24C1': 'L',
    '\uFF2C': 'L',
    '\u013F': 'L',
    '\u0139': 'L',
    '\u013D': 'L',
    '\u1E36': 'L',
    '\u1E38': 'L',
    '\u013B': 'L',
    '\u1E3C': 'L',
    '\u1E3A': 'L',
    '\u0141': 'L',
    '\u023D': 'L',
    '\u2C62': 'L',
    '\u2C60': 'L',
    '\uA748': 'L',
    '\uA746': 'L',
    '\uA780': 'L',
    '\u01C7': 'LJ',
    '\u01C8': 'Lj',
    '\u24C2': 'M',
    '\uFF2D': 'M',
    '\u1E3E': 'M',
    '\u1E40': 'M',
    '\u1E42': 'M',
    '\u2C6E': 'M',
    '\u019C': 'M',
    '\u24C3': 'N',
    '\uFF2E': 'N',
    '\u01F8': 'N',
    '\u0143': 'N',
    '\u00D1': 'N',
    '\u1E44': 'N',
    '\u0147': 'N',
    '\u1E46': 'N',
    '\u0145': 'N',
    '\u1E4A': 'N',
    '\u1E48': 'N',
    '\u0220': 'N',
    '\u019D': 'N',
    '\uA790': 'N',
    '\uA7A4': 'N',
    '\u01CA': 'NJ',
    '\u01CB': 'Nj',
    '\u24C4': 'O',
    '\uFF2F': 'O',
    '\u00D2': 'O',
    '\u00D3': 'O',
    '\u00D4': 'O',
    '\u1ED2': 'O',
    '\u1ED0': 'O',
    '\u1ED6': 'O',
    '\u1ED4': 'O',
    '\u00D5': 'O',
    '\u1E4C': 'O',
    '\u022C': 'O',
    '\u1E4E': 'O',
    '\u014C': 'O',
    '\u1E50': 'O',
    '\u1E52': 'O',
    '\u014E': 'O',
    '\u022E': 'O',
    '\u0230': 'O',
    '\u00D6': 'O',
    '\u022A': 'O',
    '\u1ECE': 'O',
    '\u0150': 'O',
    '\u01D1': 'O',
    '\u020C': 'O',
    '\u020E': 'O',
    '\u01A0': 'O',
    '\u1EDC': 'O',
    '\u1EDA': 'O',
    '\u1EE0': 'O',
    '\u1EDE': 'O',
    '\u1EE2': 'O',
    '\u1ECC': 'O',
    '\u1ED8': 'O',
    '\u01EA': 'O',
    '\u01EC': 'O',
    '\u00D8': 'O',
    '\u01FE': 'O',
    '\u0186': 'O',
    '\u019F': 'O',
    '\uA74A': 'O',
    '\uA74C': 'O',
    '\u0152': 'OE',
    '\u01A2': 'OI',
    '\uA74E': 'OO',
    '\u0222': 'OU',
    '\u24C5': 'P',
    '\uFF30': 'P',
    '\u1E54': 'P',
    '\u1E56': 'P',
    '\u01A4': 'P',
    '\u2C63': 'P',
    '\uA750': 'P',
    '\uA752': 'P',
    '\uA754': 'P',
    '\u24C6': 'Q',
    '\uFF31': 'Q',
    '\uA756': 'Q',
    '\uA758': 'Q',
    '\u024A': 'Q',
    '\u24C7': 'R',
    '\uFF32': 'R',
    '\u0154': 'R',
    '\u1E58': 'R',
    '\u0158': 'R',
    '\u0210': 'R',
    '\u0212': 'R',
    '\u1E5A': 'R',
    '\u1E5C': 'R',
    '\u0156': 'R',
    '\u1E5E': 'R',
    '\u024C': 'R',
    '\u2C64': 'R',
    '\uA75A': 'R',
    '\uA7A6': 'R',
    '\uA782': 'R',
    '\u24C8': 'S',
    '\uFF33': 'S',
    '\u1E9E': 'S',
    '\u015A': 'S',
    '\u1E64': 'S',
    '\u015C': 'S',
    '\u1E60': 'S',
    '\u0160': 'S',
    '\u1E66': 'S',
    '\u1E62': 'S',
    '\u1E68': 'S',
    '\u0218': 'S',
    '\u015E': 'S',
    '\u2C7E': 'S',
    '\uA7A8': 'S',
    '\uA784': 'S',
    '\u24C9': 'T',
    '\uFF34': 'T',
    '\u1E6A': 'T',
    '\u0164': 'T',
    '\u1E6C': 'T',
    '\u021A': 'T',
    '\u0162': 'T',
    '\u1E70': 'T',
    '\u1E6E': 'T',
    '\u0166': 'T',
    '\u01AC': 'T',
    '\u01AE': 'T',
    '\u023E': 'T',
    '\uA786': 'T',
    '\uA728': 'TZ',
    '\u24CA': 'U',
    '\uFF35': 'U',
    '\u00D9': 'U',
    '\u00DA': 'U',
    '\u00DB': 'U',
    '\u0168': 'U',
    '\u1E78': 'U',
    '\u016A': 'U',
    '\u1E7A': 'U',
    '\u016C': 'U',
    '\u00DC': 'U',
    '\u01DB': 'U',
    '\u01D7': 'U',
    '\u01D5': 'U',
    '\u01D9': 'U',
    '\u1EE6': 'U',
    '\u016E': 'U',
    '\u0170': 'U',
    '\u01D3': 'U',
    '\u0214': 'U',
    '\u0216': 'U',
    '\u01AF': 'U',
    '\u1EEA': 'U',
    '\u1EE8': 'U',
    '\u1EEE': 'U',
    '\u1EEC': 'U',
    '\u1EF0': 'U',
    '\u1EE4': 'U',
    '\u1E72': 'U',
    '\u0172': 'U',
    '\u1E76': 'U',
    '\u1E74': 'U',
    '\u0244': 'U',
    '\u24CB': 'V',
    '\uFF36': 'V',
    '\u1E7C': 'V',
    '\u1E7E': 'V',
    '\u01B2': 'V',
    '\uA75E': 'V',
    '\u0245': 'V',
    '\uA760': 'VY',
    '\u24CC': 'W',
    '\uFF37': 'W',
    '\u1E80': 'W',
    '\u1E82': 'W',
    '\u0174': 'W',
    '\u1E86': 'W',
    '\u1E84': 'W',
    '\u1E88': 'W',
    '\u2C72': 'W',
    '\u24CD': 'X',
    '\uFF38': 'X',
    '\u1E8A': 'X',
    '\u1E8C': 'X',
    '\u24CE': 'Y',
    '\uFF39': 'Y',
    '\u1EF2': 'Y',
    '\u00DD': 'Y',
    '\u0176': 'Y',
    '\u1EF8': 'Y',
    '\u0232': 'Y',
    '\u1E8E': 'Y',
    '\u0178': 'Y',
    '\u1EF6': 'Y',
    '\u1EF4': 'Y',
    '\u01B3': 'Y',
    '\u024E': 'Y',
    '\u1EFE': 'Y',
    '\u24CF': 'Z',
    '\uFF3A': 'Z',
    '\u0179': 'Z',
    '\u1E90': 'Z',
    '\u017B': 'Z',
    '\u017D': 'Z',
    '\u1E92': 'Z',
    '\u1E94': 'Z',
    '\u01B5': 'Z',
    '\u0224': 'Z',
    '\u2C7F': 'Z',
    '\u2C6B': 'Z',
    '\uA762': 'Z',
    '\u24D0': 'a',
    '\uFF41': 'a',
    '\u1E9A': 'a',
    '\u00E0': 'a',
    '\u00E1': 'a',
    '\u00E2': 'a',
    '\u1EA7': 'a',
    '\u1EA5': 'a',
    '\u1EAB': 'a',
    '\u1EA9': 'a',
    '\u00E3': 'a',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u1EB1': 'a',
    '\u1EAF': 'a',
    '\u1EB5': 'a',
    '\u1EB3': 'a',
    '\u0227': 'a',
    '\u01E1': 'a',
    '\u00E4': 'a',
    '\u01DF': 'a',
    '\u1EA3': 'a',
    '\u00E5': 'a',
    '\u01FB': 'a',
    '\u01CE': 'a',
    '\u0201': 'a',
    '\u0203': 'a',
    '\u1EA1': 'a',
    '\u1EAD': 'a',
    '\u1EB7': 'a',
    '\u1E01': 'a',
    '\u0105': 'a',
    '\u2C65': 'a',
    '\u0250': 'a',
    '\uA733': 'aa',
    '\u00E6': 'ae',
    '\u01FD': 'ae',
    '\u01E3': 'ae',
    '\uA735': 'ao',
    '\uA737': 'au',
    '\uA739': 'av',
    '\uA73B': 'av',
    '\uA73D': 'ay',
    '\u24D1': 'b',
    '\uFF42': 'b',
    '\u1E03': 'b',
    '\u1E05': 'b',
    '\u1E07': 'b',
    '\u0180': 'b',
    '\u0183': 'b',
    '\u0253': 'b',
    '\u24D2': 'c',
    '\uFF43': 'c',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010B': 'c',
    '\u010D': 'c',
    '\u00E7': 'c',
    '\u1E09': 'c',
    '\u0188': 'c',
    '\u023C': 'c',
    '\uA73F': 'c',
    '\u2184': 'c',
    '\u24D3': 'd',
    '\uFF44': 'd',
    '\u1E0B': 'd',
    '\u010F': 'd',
    '\u1E0D': 'd',
    '\u1E11': 'd',
    '\u1E13': 'd',
    '\u1E0F': 'd',
    '\u0111': 'd',
    '\u018C': 'd',
    '\u0256': 'd',
    '\u0257': 'd',
    '\uA77A': 'd',
    '\u01F3': 'dz',
    '\u01C6': 'dz',
    '\u24D4': 'e',
    '\uFF45': 'e',
    '\u00E8': 'e',
    '\u00E9': 'e',
    '\u00EA': 'e',
    '\u1EC1': 'e',
    '\u1EBF': 'e',
    '\u1EC5': 'e',
    '\u1EC3': 'e',
    '\u1EBD': 'e',
    '\u0113': 'e',
    '\u1E15': 'e',
    '\u1E17': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u00EB': 'e',
    '\u1EBB': 'e',
    '\u011B': 'e',
    '\u0205': 'e',
    '\u0207': 'e',
    '\u1EB9': 'e',
    '\u1EC7': 'e',
    '\u0229': 'e',
    '\u1E1D': 'e',
    '\u0119': 'e',
    '\u1E19': 'e',
    '\u1E1B': 'e',
    '\u0247': 'e',
    '\u025B': 'e',
    '\u01DD': 'e',
    '\u24D5': 'f',
    '\uFF46': 'f',
    '\u1E1F': 'f',
    '\u0192': 'f',
    '\uA77C': 'f',
    '\u24D6': 'g',
    '\uFF47': 'g',
    '\u01F5': 'g',
    '\u011D': 'g',
    '\u1E21': 'g',
    '\u011F': 'g',
    '\u0121': 'g',
    '\u01E7': 'g',
    '\u0123': 'g',
    '\u01E5': 'g',
    '\u0260': 'g',
    '\uA7A1': 'g',
    '\u1D79': 'g',
    '\uA77F': 'g',
    '\u24D7': 'h',
    '\uFF48': 'h',
    '\u0125': 'h',
    '\u1E23': 'h',
    '\u1E27': 'h',
    '\u021F': 'h',
    '\u1E25': 'h',
    '\u1E29': 'h',
    '\u1E2B': 'h',
    '\u1E96': 'h',
    '\u0127': 'h',
    '\u2C68': 'h',
    '\u2C76': 'h',
    '\u0265': 'h',
    '\u0195': 'hv',
    '\u24D8': 'i',
    '\uFF49': 'i',
    '\u00EC': 'i',
    '\u00ED': 'i',
    '\u00EE': 'i',
    '\u0129': 'i',
    '\u012B': 'i',
    '\u012D': 'i',
    '\u00EF': 'i',
    '\u1E2F': 'i',
    '\u1EC9': 'i',
    '\u01D0': 'i',
    '\u0209': 'i',
    '\u020B': 'i',
    '\u1ECB': 'i',
    '\u012F': 'i',
    '\u1E2D': 'i',
    '\u0268': 'i',
    '\u0131': 'i',
    '\u24D9': 'j',
    '\uFF4A': 'j',
    '\u0135': 'j',
    '\u01F0': 'j',
    '\u0249': 'j',
    '\u24DA': 'k',
    '\uFF4B': 'k',
    '\u1E31': 'k',
    '\u01E9': 'k',
    '\u1E33': 'k',
    '\u0137': 'k',
    '\u1E35': 'k',
    '\u0199': 'k',
    '\u2C6A': 'k',
    '\uA741': 'k',
    '\uA743': 'k',
    '\uA745': 'k',
    '\uA7A3': 'k',
    '\u24DB': 'l',
    '\uFF4C': 'l',
    '\u0140': 'l',
    '\u013A': 'l',
    '\u013E': 'l',
    '\u1E37': 'l',
    '\u1E39': 'l',
    '\u013C': 'l',
    '\u1E3D': 'l',
    '\u1E3B': 'l',
    '\u017F': 'l',
    '\u0142': 'l',
    '\u019A': 'l',
    '\u026B': 'l',
    '\u2C61': 'l',
    '\uA749': 'l',
    '\uA781': 'l',
    '\uA747': 'l',
    '\u01C9': 'lj',
    '\u24DC': 'm',
    '\uFF4D': 'm',
    '\u1E3F': 'm',
    '\u1E41': 'm',
    '\u1E43': 'm',
    '\u0271': 'm',
    '\u026F': 'm',
    '\u24DD': 'n',
    '\uFF4E': 'n',
    '\u01F9': 'n',
    '\u0144': 'n',
    '\u00F1': 'n',
    '\u1E45': 'n',
    '\u0148': 'n',
    '\u1E47': 'n',
    '\u0146': 'n',
    '\u1E4B': 'n',
    '\u1E49': 'n',
    '\u019E': 'n',
    '\u0272': 'n',
    '\u0149': 'n',
    '\uA791': 'n',
    '\uA7A5': 'n',
    '\u01CC': 'nj',
    '\u24DE': 'o',
    '\uFF4F': 'o',
    '\u00F2': 'o',
    '\u00F3': 'o',
    '\u00F4': 'o',
    '\u1ED3': 'o',
    '\u1ED1': 'o',
    '\u1ED7': 'o',
    '\u1ED5': 'o',
    '\u00F5': 'o',
    '\u1E4D': 'o',
    '\u022D': 'o',
    '\u1E4F': 'o',
    '\u014D': 'o',
    '\u1E51': 'o',
    '\u1E53': 'o',
    '\u014F': 'o',
    '\u022F': 'o',
    '\u0231': 'o',
    '\u00F6': 'o',
    '\u022B': 'o',
    '\u1ECF': 'o',
    '\u0151': 'o',
    '\u01D2': 'o',
    '\u020D': 'o',
    '\u020F': 'o',
    '\u01A1': 'o',
    '\u1EDD': 'o',
    '\u1EDB': 'o',
    '\u1EE1': 'o',
    '\u1EDF': 'o',
    '\u1EE3': 'o',
    '\u1ECD': 'o',
    '\u1ED9': 'o',
    '\u01EB': 'o',
    '\u01ED': 'o',
    '\u00F8': 'o',
    '\u01FF': 'o',
    '\u0254': 'o',
    '\uA74B': 'o',
    '\uA74D': 'o',
    '\u0275': 'o',
    '\u0153': 'oe',
    '\u01A3': 'oi',
    '\u0223': 'ou',
    '\uA74F': 'oo',
    '\u24DF': 'p',
    '\uFF50': 'p',
    '\u1E55': 'p',
    '\u1E57': 'p',
    '\u01A5': 'p',
    '\u1D7D': 'p',
    '\uA751': 'p',
    '\uA753': 'p',
    '\uA755': 'p',
    '\u24E0': 'q',
    '\uFF51': 'q',
    '\u024B': 'q',
    '\uA757': 'q',
    '\uA759': 'q',
    '\u24E1': 'r',
    '\uFF52': 'r',
    '\u0155': 'r',
    '\u1E59': 'r',
    '\u0159': 'r',
    '\u0211': 'r',
    '\u0213': 'r',
    '\u1E5B': 'r',
    '\u1E5D': 'r',
    '\u0157': 'r',
    '\u1E5F': 'r',
    '\u024D': 'r',
    '\u027D': 'r',
    '\uA75B': 'r',
    '\uA7A7': 'r',
    '\uA783': 'r',
    '\u24E2': 's',
    '\uFF53': 's',
    '\u00DF': 's',
    '\u015B': 's',
    '\u1E65': 's',
    '\u015D': 's',
    '\u1E61': 's',
    '\u0161': 's',
    '\u1E67': 's',
    '\u1E63': 's',
    '\u1E69': 's',
    '\u0219': 's',
    '\u015F': 's',
    '\u023F': 's',
    '\uA7A9': 's',
    '\uA785': 's',
    '\u1E9B': 's',
    '\u24E3': 't',
    '\uFF54': 't',
    '\u1E6B': 't',
    '\u1E97': 't',
    '\u0165': 't',
    '\u1E6D': 't',
    '\u021B': 't',
    '\u0163': 't',
    '\u1E71': 't',
    '\u1E6F': 't',
    '\u0167': 't',
    '\u01AD': 't',
    '\u0288': 't',
    '\u2C66': 't',
    '\uA787': 't',
    '\uA729': 'tz',
    '\u24E4': 'u',
    '\uFF55': 'u',
    '\u00F9': 'u',
    '\u00FA': 'u',
    '\u00FB': 'u',
    '\u0169': 'u',
    '\u1E79': 'u',
    '\u016B': 'u',
    '\u1E7B': 'u',
    '\u016D': 'u',
    '\u00FC': 'u',
    '\u01DC': 'u',
    '\u01D8': 'u',
    '\u01D6': 'u',
    '\u01DA': 'u',
    '\u1EE7': 'u',
    '\u016F': 'u',
    '\u0171': 'u',
    '\u01D4': 'u',
    '\u0215': 'u',
    '\u0217': 'u',
    '\u01B0': 'u',
    '\u1EEB': 'u',
    '\u1EE9': 'u',
    '\u1EEF': 'u',
    '\u1EED': 'u',
    '\u1EF1': 'u',
    '\u1EE5': 'u',
    '\u1E73': 'u',
    '\u0173': 'u',
    '\u1E77': 'u',
    '\u1E75': 'u',
    '\u0289': 'u',
    '\u24E5': 'v',
    '\uFF56': 'v',
    '\u1E7D': 'v',
    '\u1E7F': 'v',
    '\u028B': 'v',
    '\uA75F': 'v',
    '\u028C': 'v',
    '\uA761': 'vy',
    '\u24E6': 'w',
    '\uFF57': 'w',
    '\u1E81': 'w',
    '\u1E83': 'w',
    '\u0175': 'w',
    '\u1E87': 'w',
    '\u1E85': 'w',
    '\u1E98': 'w',
    '\u1E89': 'w',
    '\u2C73': 'w',
    '\u24E7': 'x',
    '\uFF58': 'x',
    '\u1E8B': 'x',
    '\u1E8D': 'x',
    '\u24E8': 'y',
    '\uFF59': 'y',
    '\u1EF3': 'y',
    '\u00FD': 'y',
    '\u0177': 'y',
    '\u1EF9': 'y',
    '\u0233': 'y',
    '\u1E8F': 'y',
    '\u00FF': 'y',
    '\u1EF7': 'y',
    '\u1E99': 'y',
    '\u1EF5': 'y',
    '\u01B4': 'y',
    '\u024F': 'y',
    '\u1EFF': 'y',
    '\u24E9': 'z',
    '\uFF5A': 'z',
    '\u017A': 'z',
    '\u1E91': 'z',
    '\u017C': 'z',
    '\u017E': 'z',
    '\u1E93': 'z',
    '\u1E95': 'z',
    '\u01B6': 'z',
    '\u0225': 'z',
    '\u0240': 'z',
    '\u2C6C': 'z',
    '\uA763': 'z',
    '\u0386': '\u0391',
    '\u0388': '\u0395',
    '\u0389': '\u0397',
    '\u038A': '\u0399',
    '\u03AA': '\u0399',
    '\u038C': '\u039F',
    '\u038E': '\u03A5',
    '\u03AB': '\u03A5',
    '\u038F': '\u03A9',
    '\u03AC': '\u03B1',
    '\u03AD': '\u03B5',
    '\u03AE': '\u03B7',
    '\u03AF': '\u03B9',
    '\u03CA': '\u03B9',
    '\u0390': '\u03B9',
    '\u03CC': '\u03BF',
    '\u03CD': '\u03C5',
    '\u03CB': '\u03C5',
    '\u03B0': '\u03C5',
    '\u03CE': '\u03C9',
    '\u03C2': '\u03C3',
    '\u2019': '\''
  };

  return diacritics;
});

S2.define('select2/data/base',[
  '../utils'
], function (Utils) {
  function BaseAdapter ($element, options) {
    BaseAdapter.__super__.constructor.call(this);
  }

  Utils.Extend(BaseAdapter, Utils.Observable);

  BaseAdapter.prototype.current = function (callback) {
    throw new Error('The `current` method must be defined in child classes.');
  };

  BaseAdapter.prototype.query = function (params, callback) {
    throw new Error('The `query` method must be defined in child classes.');
  };

  BaseAdapter.prototype.bind = function (container, $container) {
    // Can be implemented in subclasses
  };

  BaseAdapter.prototype.destroy = function () {
    // Can be implemented in subclasses
  };

  BaseAdapter.prototype.generateResultId = function (container, data) {
    var id = container.id + '-result-';

    id += Utils.generateChars(4);

    if (data.id != null) {
      id += '-' + data.id.toString();
    } else {
      id += '-' + Utils.generateChars(4);
    }
    return id;
  };

  return BaseAdapter;
});

S2.define('select2/data/select',[
  './base',
  '../utils',
  'jquery'
], function (BaseAdapter, Utils, $) {
  function SelectAdapter ($element, options) {
    this.$element = $element;
    this.options = options;

    SelectAdapter.__super__.constructor.call(this);
  }

  Utils.Extend(SelectAdapter, BaseAdapter);

  SelectAdapter.prototype.current = function (callback) {
    var self = this;

    var data = Array.prototype.map.call(
      this.$element[0].querySelectorAll(':checked'),
      function (selectedElement) {
        return self.item($(selectedElement));
      }
    );

    callback(data);
  };

  SelectAdapter.prototype.select = function (data) {
    var self = this;

    data.selected = true;

    // If data.element is a DOM node, use it instead
    if (
      data.element != null && data.element.tagName.toLowerCase() === 'option'
    ) {
      data.element.selected = true;

      this.$element.trigger('input').trigger('change');

      return;
    }

    if (this.$element.prop('multiple')) {
      this.current(function (currentData) {
        var val = [];

        data = [data];
        data.push.apply(data, currentData);

        for (var d = 0; d < data.length; d++) {
          var id = data[d].id;

          if (val.indexOf(id) === -1) {
            val.push(id);
          }
        }

        self.$element.val(val);
        self.$element.trigger('input').trigger('change');
      });
    } else {
      var val = data.id;

      this.$element.val(val);
      this.$element.trigger('input').trigger('change');
    }
  };

  SelectAdapter.prototype.unselect = function (data) {
    var self = this;

    if (!this.$element.prop('multiple')) {
      return;
    }

    data.selected = false;

    if (
      data.element != null &&
      data.element.tagName.toLowerCase() === 'option'
    ) {
      data.element.selected = false;

      this.$element.trigger('input').trigger('change');

      return;
    }

    this.current(function (currentData) {
      var val = [];

      for (var d = 0; d < currentData.length; d++) {
        var id = currentData[d].id;

        if (id !== data.id && val.indexOf(id) === -1) {
          val.push(id);
        }
      }

      self.$element.val(val);

      self.$element.trigger('input').trigger('change');
    });
  };

  SelectAdapter.prototype.bind = function (container, $container) {
    var self = this;

    this.container = container;

    container.on('select', function (params) {
      self.select(params.data);
    });

    container.on('unselect', function (params) {
      self.unselect(params.data);
    });
  };

  SelectAdapter.prototype.destroy = function () {
    // Remove anything added to child elements
    this.$element.find('*').each(function () {
      // Remove any custom data set by Select2
      Utils.RemoveData(this);
    });
  };

  SelectAdapter.prototype.query = function (params, callback) {
    var data = [];
    var self = this;

    var $options = this.$element.children();

    $options.each(function () {
      if (
        this.tagName.toLowerCase() !== 'option' &&
        this.tagName.toLowerCase() !== 'optgroup'
      ) {
        return;
      }

      var $option = $(this);

      var option = self.item($option);

      var matches = self.matches(params, option);

      if (matches !== null) {
        data.push(matches);
      }
    });

    callback({
      results: data
    });
  };

  SelectAdapter.prototype.addOptions = function ($options) {
    this.$element.append($options);
  };

  SelectAdapter.prototype.option = function (data) {
    var option;

    if (data.children) {
      option = document.createElement('optgroup');
      option.label = data.text;
    } else {
      option = document.createElement('option');

      if (option.textContent !== undefined) {
        option.textContent = data.text;
      } else {
        option.innerText = data.text;
      }
    }

    if (data.id !== undefined) {
      option.value = data.id;
    }

    if (data.disabled) {
      option.disabled = true;
    }

    if (data.selected) {
      option.selected = true;
    }

    if (data.title) {
      option.title = data.title;
    }

    var normalizedData = this._normalizeItem(data);
    normalizedData.element = option;

    // Override the option's data with the combined data
    Utils.StoreData(option, 'data', normalizedData);

    return $(option);
  };

  SelectAdapter.prototype.item = function ($option) {
    var data = {};

    data = Utils.GetData($option[0], 'data');

    if (data != null) {
      return data;
    }

    var option = $option[0];

    if (option.tagName.toLowerCase() === 'option') {
      data = {
        id: $option.val(),
        text: $option.text(),
        disabled: $option.prop('disabled'),
        selected: $option.prop('selected'),
        title: $option.prop('title')
      };
    } else if (option.tagName.toLowerCase() === 'optgroup') {
      data = {
        text: $option.prop('label'),
        children: [],
        title: $option.prop('title')
      };

      var $children = $option.children('option');
      var children = [];

      for (var c = 0; c < $children.length; c++) {
        var $child = $($children[c]);

        var child = this.item($child);

        children.push(child);
      }

      data.children = children;
    }

    data = this._normalizeItem(data);
    data.element = $option[0];

    Utils.StoreData($option[0], 'data', data);

    return data;
  };

  SelectAdapter.prototype._normalizeItem = function (item) {
    if (item !== Object(item)) {
      item = {
        id: item,
        text: item
      };
    }

    item = $.extend({}, {
      text: ''
    }, item);

    var defaults = {
      selected: false,
      disabled: false
    };

    if (item.id != null) {
      item.id = item.id.toString();
    }

    if (item.text != null) {
      item.text = item.text.toString();
    }

    if (item._resultId == null && item.id && this.container != null) {
      item._resultId = this.generateResultId(this.container, item);
    }

    return $.extend({}, defaults, item);
  };

  SelectAdapter.prototype.matches = function (params, data) {
    var matcher = this.options.get('matcher');

    return matcher(params, data);
  };

  return SelectAdapter;
});

S2.define('select2/data/array',[
  './select',
  '../utils',
  'jquery'
], function (SelectAdapter, Utils, $) {
  function ArrayAdapter ($element, options) {
    this._dataToConvert = options.get('data') || [];

    ArrayAdapter.__super__.constructor.call(this, $element, options);
  }

  Utils.Extend(ArrayAdapter, SelectAdapter);

  ArrayAdapter.prototype.bind = function (container, $container) {
    ArrayAdapter.__super__.bind.call(this, container, $container);

    this.addOptions(this.convertToOptions(this._dataToConvert));
  };

  ArrayAdapter.prototype.select = function (data) {
    var $option = this.$element.find('option').filter(function (i, elm) {
      return elm.value == data.id.toString();
    });

    if ($option.length === 0) {
      $option = this.option(data);

      this.addOptions($option);
    }

    ArrayAdapter.__super__.select.call(this, data);
  };

  ArrayAdapter.prototype.convertToOptions = function (data) {
    var self = this;

    var $existing = this.$element.find('option');
    var existingIds = $existing.map(function () {
      return self.item($(this)).id;
    }).get();

    var $options = [];

    // Filter out all items except for the one passed in the argument
    function onlyItem (item) {
      return function () {
        return $(this).val() == item.id;
      };
    }

    for (var d = 0; d < data.length; d++) {
      var item = this._normalizeItem(data[d]);

      // Skip items which were pre-loaded, only merge the data
      if (existingIds.indexOf(item.id) >= 0) {
        var $existingOption = $existing.filter(onlyItem(item));

        var existingData = this.item($existingOption);
        var newData = $.extend(true, {}, item, existingData);

        var $newOption = this.option(newData);

        $existingOption.replaceWith($newOption);

        continue;
      }

      var $option = this.option(item);

      if (item.children) {
        var $children = this.convertToOptions(item.children);

        $option.append($children);
      }

      $options.push($option);
    }

    return $options;
  };

  return ArrayAdapter;
});

S2.define('select2/data/ajax',[
  './array',
  '../utils',
  'jquery'
], function (ArrayAdapter, Utils, $) {
  function AjaxAdapter ($element, options) {
    this.ajaxOptions = this._applyDefaults(options.get('ajax'));

    if (this.ajaxOptions.processResults != null) {
      this.processResults = this.ajaxOptions.processResults;
    }

    AjaxAdapter.__super__.constructor.call(this, $element, options);
  }

  Utils.Extend(AjaxAdapter, ArrayAdapter);

  AjaxAdapter.prototype._applyDefaults = function (options) {
    var defaults = {
      data: function (params) {
        return $.extend({}, params, {
          q: params.term
        });
      },
      transport: function (params, success, failure) {
        var $request = $.ajax(params);

        $request.then(success);
        $request.fail(failure);

        return $request;
      }
    };

    return $.extend({}, defaults, options, true);
  };

  AjaxAdapter.prototype.processResults = function (results) {
    return results;
  };

  AjaxAdapter.prototype.query = function (params, callback) {
    var matches = [];
    var self = this;

    if (this._request != null) {
      // JSONP requests cannot always be aborted
      if (typeof this._request.abort === 'function') {
        this._request.abort();
      }

      this._request = null;
    }

    var options = $.extend({
      type: 'GET'
    }, this.ajaxOptions);

    if (typeof options.url === 'function') {
      options.url = options.url.call(this.$element, params);
    }

    if (typeof options.data === 'function') {
      options.data = options.data.call(this.$element, params);
    }

    function request () {
      var $request = options.transport(options, function (data) {
        var results = self.processResults(data, params);

        if (self.options.get('debug') && window.console && console.error) {
          // Check to make sure that the response included a `results` key.
          if (!results || !results.results || !Array.isArray(results.results)) {
            console.error(
              'Select2: The AJAX results did not return an array in the ' +
              '`results` key of the response.'
            );
          }
        }

        callback(results);
      }, function () {
        // Attempt to detect if a request was aborted
        // Only works if the transport exposes a status property
        if ('status' in $request &&
            ($request.status === 0 || $request.status === '0')) {
          return;
        }

        self.trigger('results:message', {
          message: 'errorLoading'
        });
      });

      self._request = $request;
    }

    if (this.ajaxOptions.delay && params.term != null) {
      if (this._queryTimeout) {
        window.clearTimeout(this._queryTimeout);
      }

      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
    } else {
      request();
    }
  };

  return AjaxAdapter;
});

S2.define('select2/data/tags',[
  'jquery'
], function ($) {
  function Tags (decorated, $element, options) {
    var tags = options.get('tags');

    var createTag = options.get('createTag');

    if (createTag !== undefined) {
      this.createTag = createTag;
    }

    var insertTag = options.get('insertTag');

    if (insertTag !== undefined) {
        this.insertTag = insertTag;
    }

    decorated.call(this, $element, options);

    if (Array.isArray(tags)) {
      for (var t = 0; t < tags.length; t++) {
        var tag = tags[t];
        var item = this._normalizeItem(tag);

        var $option = this.option(item);

        this.$element.append($option);
      }
    }
  }

  Tags.prototype.query = function (decorated, params, callback) {
    var self = this;

    this._removeOldTags();

    if (params.term == null || params.page != null) {
      decorated.call(this, params, callback);
      return;
    }

    function wrapper (obj, child) {
      var data = obj.results;

      for (var i = 0; i < data.length; i++) {
        var option = data[i];

        var checkChildren = (
          option.children != null &&
          !wrapper({
            results: option.children
          }, true)
        );

        var optionText = (option.text || '').toUpperCase();
        var paramsTerm = (params.term || '').toUpperCase();

        var checkText = optionText === paramsTerm;

        if (checkText || checkChildren) {
          if (child) {
            return false;
          }

          obj.data = data;
          callback(obj);

          return;
        }
      }

      if (child) {
        return true;
      }

      var tag = self.createTag(params);

      if (tag != null) {
        var $option = self.option(tag);
        $option.attr('data-select2-tag', 'true');

        self.addOptions([$option]);

        self.insertTag(data, tag);
      }

      obj.results = data;

      callback(obj);
    }

    decorated.call(this, params, wrapper);
  };

  Tags.prototype.createTag = function (decorated, params) {
    if (params.term == null) {
      return null;
    }

    var term = params.term.trim();

    if (term === '') {
      return null;
    }

    return {
      id: term,
      text: term
    };
  };

  Tags.prototype.insertTag = function (_, data, tag) {
    data.unshift(tag);
  };

  Tags.prototype._removeOldTags = function (_) {
    var $options = this.$element.find('option[data-select2-tag]');

    $options.each(function () {
      if (this.selected) {
        return;
      }

      $(this).remove();
    });
  };

  return Tags;
});

S2.define('select2/data/tokenizer',[
  'jquery'
], function ($) {
  function Tokenizer (decorated, $element, options) {
    var tokenizer = options.get('tokenizer');

    if (tokenizer !== undefined) {
      this.tokenizer = tokenizer;
    }

    decorated.call(this, $element, options);
  }

  Tokenizer.prototype.bind = function (decorated, container, $container) {
    decorated.call(this, container, $container);

    this.$search =  container.dropdown.$search || container.selection.$search ||
      $container.find('.select2-search__field');
  };

  Tokenizer.prototype.query = function (decorated, params, callback) {
    var self = this;

    function createAndSelect (data) {
      // Normalize the data object so we can use it for checks
      var item = self._normalizeItem(data);

      // Check if the data object already exists as a tag
      // Select it if it doesn't
      var $existingOptions = self.$element.find('option').filter(function () {
        return $(this).val() === item.id;
      });

      // If an existing option wasn't found for it, create the option
      if (!$existingOptions.length) {
        var $option = self.option(item);
        $option.attr('data-select2-tag', true);

        self._removeOldTags();
        self.addOptions([$option]);
      }

      // Select the item, now that we know there is an option for it
      select(item);
    }

    function select (data) {
      self.trigger('select', {
        data: data
      });
    }

    params.term = params.term || '';

    var tokenData = this.tokenizer(params, this.options, createAndSelect);

    if (tokenData.term !== params.term) {
      // Replace the search term if we have the search box
      if (this.$search.length) {
        this.$search.val(tokenData.term);
        this.$search.trigger('focus');
      }

      params.term = tokenData.term;
    }

    decorated.call(this, params, callback);
  };

  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
    var separators = options.get('tokenSeparators') || [];
    var term = params.term;
    var i = 0;

    var createTag = this.createTag || function (params) {
      return {
        id: params.term,
        text: params.term
      };
    };

    while (i < term.length) {
      var termChar = term[i];

      if (separators.indexOf(termChar) === -1) {
        i++;

        continue;
      }

      var part = term.substr(0, i);
      var partParams = $.extend({}, params, {
        term: part
      });

      var data = createTag(partParams);

      if (data == null) {
        i++;
        continue;
      }

      callback(data);

      // Reset the term to not include the tokenized portion
      term = term.substr(i + 1) || '';
      i = 0;
    }

    return {
      term: term
    };
  };

  return Tokenizer;
});

S2.define('select2/data/minimumInputLength',[

], function () {
  function MinimumInputLength (decorated, $e, options) {
    this.minimumInputLength = options.get('minimumInputLength');

    decorated.call(this, $e, options);
  }

  MinimumInputLength.prototype.query = function (decorated, params, callback) {
    params.term = params.term || '';

    if (params.term.length < this.minimumInputLength) {
      this.trigger('results:message', {
        message: 'inputTooShort',
        args: {
          minimum: this.minimumInputLength,
          input: params.term,
          params: params
        }
      });

      return;
    }

    decorated.call(this, params, callback);
  };

  return MinimumInputLength;
});

S2.define('select2/data/maximumInputLength',[

], function () {
  function MaximumInputLength (decorated, $e, options) {
    this.maximumInputLength = options.get('maximumInputLength');

    decorated.call(this, $e, options);
  }

  MaximumInputLength.prototype.query = function (decorated, params, callback) {
    params.term = params.term || '';

    if (this.maximumInputLength > 0 &&
        params.term.length > this.maximumInputLength) {
      this.trigger('results:message', {
        message: 'inputTooLong',
        args: {
          maximum: this.maximumInputLength,
          input: params.term,
          params: params
        }
      });

      return;
    }

    decorated.call(this, params, callback);
  };

  return MaximumInputLength;
});

S2.define('select2/data/maximumSelectionLength',[

], function (){
  function MaximumSelectionLength (decorated, $e, options) {
    this.maximumSelectionLength = options.get('maximumSelectionLength');

    decorated.call(this, $e, options);
  }

  MaximumSelectionLength.prototype.bind =
    function (decorated, container, $container) {
      var self = this;

      decorated.call(this, container, $container);

      container.on('select', function () {
        self._checkIfMaximumSelected();
      });
  };

  MaximumSelectionLength.prototype.query =
    function (decorated, params, callback) {
      var self = this;

      this._checkIfMaximumSelected(function () {
        decorated.call(self, params, callback);
      });
  };

  MaximumSelectionLength.prototype._checkIfMaximumSelected =
    function (_, successCallback) {
      var self = this;

      this.current(function (currentData) {
        var count = currentData != null ? currentData.length : 0;
        if (self.maximumSelectionLength > 0 &&
          count >= self.maximumSelectionLength) {
          self.trigger('results:message', {
            message: 'maximumSelected',
            args: {
              maximum: self.maximumSelectionLength
            }
          });
          return;
        }

        if (successCallback) {
          successCallback();
        }
      });
  };

  return MaximumSelectionLength;
});

S2.define('select2/dropdown',[
  'jquery',
  './utils'
], function ($, Utils) {
  function Dropdown ($element, options) {
    this.$element = $element;
    this.options = options;

    Dropdown.__super__.constructor.call(this);
  }

  Utils.Extend(Dropdown, Utils.Observable);

  Dropdown.prototype.render = function () {
    var $dropdown = $(
      '<span class="select2-dropdown">' +
        '<span class="select2-results"></span>' +
      '</span>'
    );

    $dropdown.attr('dir', this.options.get('dir'));

    this.$dropdown = $dropdown;

    return $dropdown;
  };

  Dropdown.prototype.bind = function () {
    // Should be implemented in subclasses
  };

  Dropdown.prototype.position = function ($dropdown, $container) {
    // Should be implemented in subclasses
  };

  Dropdown.prototype.destroy = function () {
    // Remove the dropdown from the DOM
    this.$dropdown.remove();
  };

  return Dropdown;
});

S2.define('select2/dropdown/search',[
  'jquery'
], function ($) {
  function Search () { }

  Search.prototype.render = function (decorated) {
    var $rendered = decorated.call(this);
    var searchLabel = this.options.get('translations').get('search');

    var $search = $(
      '<span class="select2-search select2-search--dropdown">' +
        '<input class="select2-search__field" type="search" tabindex="-1"' +
        ' autocorrect="off" autocapitalize="none"' +
        ' spellcheck="false" role="searchbox" aria-autocomplete="list" />' +
      '</span>'
    );

    this.$searchContainer = $search;
    this.$search = $search.find('input');

    this.$search.prop('autocomplete', this.options.get('autocomplete'));
    this.$search.attr('aria-label', searchLabel());

    $rendered.prepend($search);

    return $rendered;
  };

  Search.prototype.bind = function (decorated, container, $container) {
    var self = this;

    var resultsId = container.id + '-results';

    decorated.call(this, container, $container);

    this.$search.on('keydown', function (evt) {
      self.trigger('keypress', evt);

      self._keyUpPrevented = evt.isDefaultPrevented();
    });

    // Workaround for browsers which do not support the `input` event
    // This will prevent double-triggering of events for browsers which support
    // both the `keyup` and `input` events.
    this.$search.on('input', function (evt) {
      // Unbind the duplicated `keyup` event
      $(this).off('keyup');
    });

    this.$search.on('keyup input', function (evt) {
      self.handleSearch(evt);
    });

    container.on('open', function () {
      self.$search.attr('tabindex', 0);
      self.$search.attr('aria-controls', resultsId);

      self.$search.trigger('focus');

      window.setTimeout(function () {
        self.$search.trigger('focus');
      }, 0);
    });

    container.on('close', function () {
      self.$search.attr('tabindex', -1);
      self.$search.removeAttr('aria-controls');
      self.$search.removeAttr('aria-activedescendant');

      self.$search.val('');
      self.$search.trigger('blur');
    });

    container.on('focus', function () {
      if (!container.isOpen()) {
        self.$search.trigger('focus');
      }
    });

    container.on('results:all', function (params) {
      if (params.query.term == null || params.query.term === '') {
        var showSearch = self.showSearch(params);

        if (showSearch) {
          self.$searchContainer[0].classList.remove('select2-search--hide');
        } else {
          self.$searchContainer[0].classList.add('select2-search--hide');
        }
      }
    });

    container.on('results:focus', function (params) {
      if (params.data._resultId) {
        self.$search.attr('aria-activedescendant', params.data._resultId);
      } else {
        self.$search.removeAttr('aria-activedescendant');
      }
    });
  };

  Search.prototype.handleSearch = function (evt) {
    if (!this._keyUpPrevented) {
      var input = this.$search.val();

      this.trigger('query', {
        term: input
      });
    }

    this._keyUpPrevented = false;
  };

  Search.prototype.showSearch = function (_, params) {
    return true;
  };

  return Search;
});

S2.define('select2/dropdown/hidePlaceholder',[

], function () {
  function HidePlaceholder (decorated, $element, options, dataAdapter) {
    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

    decorated.call(this, $element, options, dataAdapter);
  }

  HidePlaceholder.prototype.append = function (decorated, data) {
    data.results = this.removePlaceholder(data.results);

    decorated.call(this, data);
  };

  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
    if (typeof placeholder === 'string') {
      placeholder = {
        id: '',
        text: placeholder
      };
    }

    return placeholder;
  };

  HidePlaceholder.prototype.removePlaceholder = function (_, data) {
    var modifiedData = data.slice(0);

    for (var d = data.length - 1; d >= 0; d--) {
      var item = data[d];

      if (this.placeholder.id === item.id) {
        modifiedData.splice(d, 1);
      }
    }

    return modifiedData;
  };

  return HidePlaceholder;
});

S2.define('select2/dropdown/infiniteScroll',[
  'jquery'
], function ($) {
  function InfiniteScroll (decorated, $element, options, dataAdapter) {
    this.lastParams = {};

    decorated.call(this, $element, options, dataAdapter);

    this.$loadingMore = this.createLoadingMore();
    this.loading = false;
  }

  InfiniteScroll.prototype.append = function (decorated, data) {
    this.$loadingMore.remove();
    this.loading = false;

    decorated.call(this, data);

    if (this.showLoadingMore(data)) {
      this.$results.append(this.$loadingMore);
      this.loadMoreIfNeeded();
    }
  };

  InfiniteScroll.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('query', function (params) {
      self.lastParams = params;
      self.loading = true;
    });

    container.on('query:append', function (params) {
      self.lastParams = params;
      self.loading = true;
    });

    this.$results.on('scroll', this.loadMoreIfNeeded.bind(this));
  };

  InfiniteScroll.prototype.loadMoreIfNeeded = function () {
    var isLoadMoreVisible = $.contains(
      document.documentElement,
      this.$loadingMore[0]
    );

    if (this.loading || !isLoadMoreVisible) {
      return;
    }

    var currentOffset = this.$results.offset().top +
      this.$results.outerHeight(false);
    var loadingMoreOffset = this.$loadingMore.offset().top +
      this.$loadingMore.outerHeight(false);

    if (currentOffset + 50 >= loadingMoreOffset) {
      this.loadMore();
    }
  };

  InfiniteScroll.prototype.loadMore = function () {
    this.loading = true;

    var params = $.extend({}, {page: 1}, this.lastParams);

    params.page++;

    this.trigger('query:append', params);
  };

  InfiniteScroll.prototype.showLoadingMore = function (_, data) {
    return data.pagination && data.pagination.more;
  };

  InfiniteScroll.prototype.createLoadingMore = function () {
    var $option = $(
      '<li ' +
      'class="select2-results__option select2-results__option--load-more"' +
      'role="option" aria-disabled="true"></li>'
    );

    var message = this.options.get('translations').get('loadingMore');

    $option.html(message(this.lastParams));

    return $option;
  };

  return InfiniteScroll;
});

S2.define('select2/dropdown/attachBody',[
  'jquery',
  '../utils'
], function ($, Utils) {
  function AttachBody (decorated, $element, options) {
    this.$dropdownParent = $(options.get('dropdownParent') || document.body);

    decorated.call(this, $element, options);
  }

  AttachBody.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('open', function () {
      self._showDropdown();
      self._attachPositioningHandler(container);

      // Must bind after the results handlers to ensure correct sizing
      self._bindContainerResultHandlers(container);
    });

    container.on('close', function () {
      self._hideDropdown();
      self._detachPositioningHandler(container);
    });

    this.$dropdownContainer.on('mousedown', function (evt) {
      evt.stopPropagation();
    });
  };

  AttachBody.prototype.destroy = function (decorated) {
    decorated.call(this);

    this.$dropdownContainer.remove();
  };

  AttachBody.prototype.position = function (decorated, $dropdown, $container) {
    // Clone all of the container classes
    $dropdown.attr('class', $container.attr('class'));

    $dropdown[0].classList.remove('select2');
    $dropdown[0].classList.add('select2-container--open');

    $dropdown.css({
      position: 'absolute',
      top: -999999
    });

    this.$container = $container;
  };

  AttachBody.prototype.render = function (decorated) {
    var $container = $('<span></span>');

    var $dropdown = decorated.call(this);
    $container.append($dropdown);

    this.$dropdownContainer = $container;

    return $container;
  };

  AttachBody.prototype._hideDropdown = function (decorated) {
    this.$dropdownContainer.detach();
  };

  AttachBody.prototype._bindContainerResultHandlers =
      function (decorated, container) {

    // These should only be bound once
    if (this._containerResultsHandlersBound) {
      return;
    }

    var self = this;

    container.on('results:all', function () {
      self._positionDropdown();
      self._resizeDropdown();
    });

    container.on('results:append', function () {
      self._positionDropdown();
      self._resizeDropdown();
    });

    container.on('results:message', function () {
      self._positionDropdown();
      self._resizeDropdown();
    });

    container.on('select', function () {
      self._positionDropdown();
      self._resizeDropdown();
    });

    container.on('unselect', function () {
      self._positionDropdown();
      self._resizeDropdown();
    });

    this._containerResultsHandlersBound = true;
  };

  AttachBody.prototype._attachPositioningHandler =
      function (decorated, container) {
    var self = this;

    var scrollEvent = 'scroll.select2.' + container.id;
    var resizeEvent = 'resize.select2.' + container.id;
    var orientationEvent = 'orientationchange.select2.' + container.id;

    var $watchers = this.$container.parents().filter(Utils.hasScroll);
    $watchers.each(function () {
      Utils.StoreData(this, 'select2-scroll-position', {
        x: $(this).scrollLeft(),
        y: $(this).scrollTop()
      });
    });

    $watchers.on(scrollEvent, function (ev) {
      var position = Utils.GetData(this, 'select2-scroll-position');
      $(this).scrollTop(position.y);
    });

    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
      function (e) {
      self._positionDropdown();
      self._resizeDropdown();
    });
  };

  AttachBody.prototype._detachPositioningHandler =
      function (decorated, container) {
    var scrollEvent = 'scroll.select2.' + container.id;
    var resizeEvent = 'resize.select2.' + container.id;
    var orientationEvent = 'orientationchange.select2.' + container.id;

    var $watchers = this.$container.parents().filter(Utils.hasScroll);
    $watchers.off(scrollEvent);

    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
  };

  AttachBody.prototype._positionDropdown = function () {
    var $window = $(window);

    var isCurrentlyAbove = this.$dropdown[0].classList
      .contains('select2-dropdown--above');
    var isCurrentlyBelow = this.$dropdown[0].classList
      .contains('select2-dropdown--below');

    var newDirection = null;

    var offset = this.$container.offset();

    offset.bottom = offset.top + this.$container.outerHeight(false);

    var container = {
      height: this.$container.outerHeight(false)
    };

    container.top = offset.top;
    container.bottom = offset.top + container.height;

    var dropdown = {
      height: this.$dropdown.outerHeight(false)
    };

    var viewport = {
      top: $window.scrollTop(),
      bottom: $window.scrollTop() + $window.height()
    };

    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

    var css = {
      left: offset.left,
      top: container.bottom
    };

    // Determine what the parent element is to use for calculating the offset
    var $offsetParent = this.$dropdownParent;

    // For statically positioned elements, we need to get the element
    // that is determining the offset
    if ($offsetParent.css('position') === 'static') {
      $offsetParent = $offsetParent.offsetParent();
    }

    var parentOffset = {
      top: 0,
      left: 0
    };

    if (
      $.contains(document.body, $offsetParent[0]) ||
      $offsetParent[0].isConnected
      ) {
      parentOffset = $offsetParent.offset();
    }

    css.top -= parentOffset.top;
    css.left -= parentOffset.left;

    if (!isCurrentlyAbove && !isCurrentlyBelow) {
      newDirection = 'below';
    }

    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
      newDirection = 'above';
    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
      newDirection = 'below';
    }

    if (newDirection == 'above' ||
      (isCurrentlyAbove && newDirection !== 'below')) {
      css.top = container.top - parentOffset.top - dropdown.height;
    }

    if (newDirection != null) {
      this.$dropdown[0].classList.remove('select2-dropdown--below');
      this.$dropdown[0].classList.remove('select2-dropdown--above');
      this.$dropdown[0].classList.add('select2-dropdown--' + newDirection);

      this.$container[0].classList.remove('select2-container--below');
      this.$container[0].classList.remove('select2-container--above');
      this.$container[0].classList.add('select2-container--' + newDirection);
    }

    this.$dropdownContainer.css(css);
  };

  AttachBody.prototype._resizeDropdown = function () {
    var css = {
      width: this.$container.outerWidth(false) + 'px'
    };

    if (this.options.get('dropdownAutoWidth')) {
      css.minWidth = css.width;
      css.position = 'relative';
      css.width = 'auto';
    }

    this.$dropdown.css(css);
  };

  AttachBody.prototype._showDropdown = function (decorated) {
    this.$dropdownContainer.appendTo(this.$dropdownParent);

    this._positionDropdown();
    this._resizeDropdown();
  };

  return AttachBody;
});

S2.define('select2/dropdown/minimumResultsForSearch',[

], function () {
  function countResults (data) {
    var count = 0;

    for (var d = 0; d < data.length; d++) {
      var item = data[d];

      if (item.children) {
        count += countResults(item.children);
      } else {
        count++;
      }
    }

    return count;
  }

  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {
    this.minimumResultsForSearch = options.get('minimumResultsForSearch');

    if (this.minimumResultsForSearch < 0) {
      this.minimumResultsForSearch = Infinity;
    }

    decorated.call(this, $element, options, dataAdapter);
  }

  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
    if (countResults(params.data.results) < this.minimumResultsForSearch) {
      return false;
    }

    return decorated.call(this, params);
  };

  return MinimumResultsForSearch;
});

S2.define('select2/dropdown/selectOnClose',[
  '../utils'
], function (Utils) {
  function SelectOnClose () { }

  SelectOnClose.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('close', function (params) {
      self._handleSelectOnClose(params);
    });
  };

  SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
    if (params && params.originalSelect2Event != null) {
      var event = params.originalSelect2Event;

      // Don't select an item if the close event was triggered from a select or
      // unselect event
      if (event._type === 'select' || event._type === 'unselect') {
        return;
      }
    }

    var $highlightedResults = this.getHighlightedResults();

    // Only select highlighted results
    if ($highlightedResults.length < 1) {
      return;
    }

    var data = Utils.GetData($highlightedResults[0], 'data');

    // Don't re-select already selected resulte
    if (
      (data.element != null && data.element.selected) ||
      (data.element == null && data.selected)
    ) {
      return;
    }

    this.trigger('select', {
        data: data
    });
  };

  return SelectOnClose;
});

S2.define('select2/dropdown/closeOnSelect',[

], function () {
  function CloseOnSelect () { }

  CloseOnSelect.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('select', function (evt) {
      self._selectTriggered(evt);
    });

    container.on('unselect', function (evt) {
      self._selectTriggered(evt);
    });
  };

  CloseOnSelect.prototype._selectTriggered = function (_, evt) {
    var originalEvent = evt.originalEvent;

    // Don't close if the control key is being held
    if (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey)) {
      return;
    }

    this.trigger('close', {
      originalEvent: originalEvent,
      originalSelect2Event: evt
    });
  };

  return CloseOnSelect;
});

S2.define('select2/dropdown/dropdownCss',[
  '../utils'
], function (Utils) {
  function DropdownCSS () { }

  DropdownCSS.prototype.render = function (decorated) {
    var $dropdown = decorated.call(this);

    var dropdownCssClass = this.options.get('dropdownCssClass') || '';

    if (dropdownCssClass.indexOf(':all:') !== -1) {
      dropdownCssClass = dropdownCssClass.replace(':all:', '');

      Utils.copyNonInternalCssClasses($dropdown[0], this.$element[0]);
    }

    $dropdown.addClass(dropdownCssClass);

    return $dropdown;
  };

  return DropdownCSS;
});

S2.define('select2/dropdown/tagsSearchHighlight',[
  '../utils'
], function (Utils) {
  function TagsSearchHighlight () { }

  TagsSearchHighlight.prototype.highlightFirstItem = function (decorated) {
    var $options = this.$results
    .find(
      '.select2-results__option--selectable' +
      ':not(.select2-results__option--selected)'
    );

    if ($options.length > 0) {
      var $firstOption = $options.first();
      var data = Utils.GetData($firstOption[0], 'data');
      var firstElement = data.element;

      if (firstElement && firstElement.getAttribute) {
        if (firstElement.getAttribute('data-select2-tag') === 'true') {
          $firstOption.trigger('mouseenter');

          return;
        }
      }
    }

    decorated.call(this);
  };

  return TagsSearchHighlight;
});

S2.define('select2/i18n/en',[],function () {
  // English
  return {
    errorLoading: function () {
      return 'The results could not be loaded.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Please delete ' + overChars + ' character';

      if (overChars != 1) {
        message += 's';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Please enter ' + remainingChars + ' or more characters';

      return message;
    },
    loadingMore: function () {
      return 'Loading more results…';
    },
    maximumSelected: function (args) {
      var message = 'You can only select ' + args.maximum + ' item';

      if (args.maximum != 1) {
        message += 's';
      }

      return message;
    },
    noResults: function () {
      return 'No results found';
    },
    searching: function () {
      return 'Searching…';
    },
    removeAllItems: function () {
      return 'Remove all items';
    },
    removeItem: function () {
      return 'Remove item';
    },
    search: function() {
      return 'Search';
    }
  };
});

S2.define('select2/defaults',[
  'jquery',

  './results',

  './selection/single',
  './selection/multiple',
  './selection/placeholder',
  './selection/allowClear',
  './selection/search',
  './selection/selectionCss',
  './selection/eventRelay',

  './utils',
  './translation',
  './diacritics',

  './data/select',
  './data/array',
  './data/ajax',
  './data/tags',
  './data/tokenizer',
  './data/minimumInputLength',
  './data/maximumInputLength',
  './data/maximumSelectionLength',

  './dropdown',
  './dropdown/search',
  './dropdown/hidePlaceholder',
  './dropdown/infiniteScroll',
  './dropdown/attachBody',
  './dropdown/minimumResultsForSearch',
  './dropdown/selectOnClose',
  './dropdown/closeOnSelect',
  './dropdown/dropdownCss',
  './dropdown/tagsSearchHighlight',

  './i18n/en'
], function ($,

             ResultsList,

             SingleSelection, MultipleSelection, Placeholder, AllowClear,
             SelectionSearch, SelectionCSS, EventRelay,

             Utils, Translation, DIACRITICS,

             SelectData, ArrayData, AjaxData, Tags, Tokenizer,
             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,
             DropdownCSS, TagsSearchHighlight,

             EnglishTranslation) {
  function Defaults () {
    this.reset();
  }

  Defaults.prototype.apply = function (options) {
    options = $.extend(true, {}, this.defaults, options);

    if (options.dataAdapter == null) {
      if (options.ajax != null) {
        options.dataAdapter = AjaxData;
      } else if (options.data != null) {
        options.dataAdapter = ArrayData;
      } else {
        options.dataAdapter = SelectData;
      }

      if (options.minimumInputLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MinimumInputLength
        );
      }

      if (options.maximumInputLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MaximumInputLength
        );
      }

      if (options.maximumSelectionLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MaximumSelectionLength
        );
      }

      if (options.tags) {
        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
      }

      if (options.tokenSeparators != null || options.tokenizer != null) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          Tokenizer
        );
      }
    }

    if (options.resultsAdapter == null) {
      options.resultsAdapter = ResultsList;

      if (options.ajax != null) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          InfiniteScroll
        );
      }

      if (options.placeholder != null) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          HidePlaceholder
        );
      }

      if (options.selectOnClose) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          SelectOnClose
        );
      }

      if (options.tags) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          TagsSearchHighlight
        );
      }
    }

    if (options.dropdownAdapter == null) {
      if (options.multiple) {
        options.dropdownAdapter = Dropdown;
      } else {
        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

        options.dropdownAdapter = SearchableDropdown;
      }

      if (options.minimumResultsForSearch !== 0) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          MinimumResultsForSearch
        );
      }

      if (options.closeOnSelect) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          CloseOnSelect
        );
      }

      if (options.dropdownCssClass != null) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          DropdownCSS
        );
      }

      options.dropdownAdapter = Utils.Decorate(
        options.dropdownAdapter,
        AttachBody
      );
    }

    if (options.selectionAdapter == null) {
      if (options.multiple) {
        options.selectionAdapter = MultipleSelection;
      } else {
        options.selectionAdapter = SingleSelection;
      }

      // Add the placeholder mixin if a placeholder was specified
      if (options.placeholder != null) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          Placeholder
        );
      }

      if (options.allowClear) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          AllowClear
        );
      }

      if (options.multiple) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          SelectionSearch
        );
      }

      if (options.selectionCssClass != null) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          SelectionCSS
        );
      }

      options.selectionAdapter = Utils.Decorate(
        options.selectionAdapter,
        EventRelay
      );
    }

    // If the defaults were not previously applied from an element, it is
    // possible for the language option to have not been resolved
    options.language = this._resolveLanguage(options.language);

    // Always fall back to English since it will always be complete
    options.language.push('en');

    var uniqueLanguages = [];

    for (var l = 0; l < options.language.length; l++) {
      var language = options.language[l];

      if (uniqueLanguages.indexOf(language) === -1) {
        uniqueLanguages.push(language);
      }
    }

    options.language = uniqueLanguages;

    options.translations = this._processTranslations(
      options.language,
      options.debug
    );

    return options;
  };

  Defaults.prototype.reset = function () {
    function stripDiacritics (text) {
      // Used 'uni range + named function' from http://jsperf.com/diacritics/18
      function match(a) {
        return DIACRITICS[a] || a;
      }

      return text.replace(/[^\u0000-\u007E]/g, match);
    }

    function matcher (params, data) {
      // Always return the object if there is nothing to compare
      if (params.term == null || params.term.trim() === '') {
        return data;
      }

      // Do a recursive check for options with children
      if (data.children && data.children.length > 0) {
        // Clone the data object if there are children
        // This is required as we modify the object to remove any non-matches
        var match = $.extend(true, {}, data);

        // Check each child of the option
        for (var c = data.children.length - 1; c >= 0; c--) {
          var child = data.children[c];

          var matches = matcher(params, child);

          // If there wasn't a match, remove the object in the array
          if (matches == null) {
            match.children.splice(c, 1);
          }
        }

        // If any children matched, return the new object
        if (match.children.length > 0) {
          return match;
        }

        // If there were no matching children, check just the plain object
        return matcher(params, match);
      }

      var original = stripDiacritics(data.text).toUpperCase();
      var term = stripDiacritics(params.term).toUpperCase();

      // Check if the text contains the term
      if (original.indexOf(term) > -1) {
        return data;
      }

      // If it doesn't contain the term, don't return anything
      return null;
    }

    this.defaults = {
      amdLanguageBase: './i18n/',
      autocomplete: 'off',
      closeOnSelect: true,
      debug: false,
      dropdownAutoWidth: false,
      escapeMarkup: Utils.escapeMarkup,
      language: {},
      matcher: matcher,
      minimumInputLength: 0,
      maximumInputLength: 0,
      maximumSelectionLength: 0,
      minimumResultsForSearch: 0,
      selectOnClose: false,
      scrollAfterSelect: false,
      sorter: function (data) {
        return data;
      },
      templateResult: function (result) {
        return result.text;
      },
      templateSelection: function (selection) {
        return selection.text;
      },
      theme: 'default',
      width: 'resolve'
    };
  };

  Defaults.prototype.applyFromElement = function (options, $element) {
    var optionLanguage = options.language;
    var defaultLanguage = this.defaults.language;
    var elementLanguage = $element.prop('lang');
    var parentLanguage = $element.closest('[lang]').prop('lang');

    var languages = Array.prototype.concat.call(
      this._resolveLanguage(elementLanguage),
      this._resolveLanguage(optionLanguage),
      this._resolveLanguage(defaultLanguage),
      this._resolveLanguage(parentLanguage)
    );

    options.language = languages;

    return options;
  };

  Defaults.prototype._resolveLanguage = function (language) {
    if (!language) {
      return [];
    }

    if ($.isEmptyObject(language)) {
      return [];
    }

    if ($.isPlainObject(language)) {
      return [language];
    }

    var languages;

    if (!Array.isArray(language)) {
      languages = [language];
    } else {
      languages = language;
    }

    var resolvedLanguages = [];

    for (var l = 0; l < languages.length; l++) {
      resolvedLanguages.push(languages[l]);

      if (typeof languages[l] === 'string' && languages[l].indexOf('-') > 0) {
        // Extract the region information if it is included
        var languageParts = languages[l].split('-');
        var baseLanguage = languageParts[0];

        resolvedLanguages.push(baseLanguage);
      }
    }

    return resolvedLanguages;
  };

  Defaults.prototype._processTranslations = function (languages, debug) {
    var translations = new Translation();

    for (var l = 0; l < languages.length; l++) {
      var languageData = new Translation();

      var language = languages[l];

      if (typeof language === 'string') {
        try {
          // Try to load it with the original name
          languageData = Translation.loadPath(language);
        } catch (e) {
          try {
            // If we couldn't load it, check if it wasn't the full path
            language = this.defaults.amdLanguageBase + language;
            languageData = Translation.loadPath(language);
          } catch (ex) {
            // The translation could not be loaded at all. Sometimes this is
            // because of a configuration problem, other times this can be
            // because of how Select2 helps load all possible translation files
            if (debug && window.console && console.warn) {
              console.warn(
                'Select2: The language file for "' + language + '" could ' +
                'not be automatically loaded. A fallback will be used instead.'
              );
            }
          }
        }
      } else if ($.isPlainObject(language)) {
        languageData = new Translation(language);
      } else {
        languageData = language;
      }

      translations.extend(languageData);
    }

    return translations;
  };

  Defaults.prototype.set = function (key, value) {
    var camelKey = $.camelCase(key);

    var data = {};
    data[camelKey] = value;

    var convertedData = Utils._convertData(data);

    $.extend(true, this.defaults, convertedData);
  };

  var defaults = new Defaults();

  return defaults;
});

S2.define('select2/options',[
  'jquery',
  './defaults',
  './utils'
], function ($, Defaults, Utils) {
  function Options (options, $element) {
    this.options = options;

    if ($element != null) {
      this.fromElement($element);
    }

    if ($element != null) {
      this.options = Defaults.applyFromElement(this.options, $element);
    }

    this.options = Defaults.apply(this.options);
  }

  Options.prototype.fromElement = function ($e) {
    var excludedData = ['select2'];

    if (this.options.multiple == null) {
      this.options.multiple = $e.prop('multiple');
    }

    if (this.options.disabled == null) {
      this.options.disabled = $e.prop('disabled');
    }

    if (this.options.autocomplete == null && $e.prop('autocomplete')) {
      this.options.autocomplete = $e.prop('autocomplete');
    }

    if (this.options.dir == null) {
      if ($e.prop('dir')) {
        this.options.dir = $e.prop('dir');
      } else if ($e.closest('[dir]').prop('dir')) {
        this.options.dir = $e.closest('[dir]').prop('dir');
      } else {
        this.options.dir = 'ltr';
      }
    }

    $e.prop('disabled', this.options.disabled);
    $e.prop('multiple', this.options.multiple);

    if (Utils.GetData($e[0], 'select2Tags')) {
      if (this.options.debug && window.console && console.warn) {
        console.warn(
          'Select2: The `data-select2-tags` attribute has been changed to ' +
          'use the `data-data` and `data-tags="true"` attributes and will be ' +
          'removed in future versions of Select2.'
        );
      }

      Utils.StoreData($e[0], 'data', Utils.GetData($e[0], 'select2Tags'));
      Utils.StoreData($e[0], 'tags', true);
    }

    if (Utils.GetData($e[0], 'ajaxUrl')) {
      if (this.options.debug && window.console && console.warn) {
        console.warn(
          'Select2: The `data-ajax-url` attribute has been changed to ' +
          '`data-ajax--url` and support for the old attribute will be removed' +
          ' in future versions of Select2.'
        );
      }

      $e.attr('ajax--url', Utils.GetData($e[0], 'ajaxUrl'));
      Utils.StoreData($e[0], 'ajax-Url', Utils.GetData($e[0], 'ajaxUrl'));
    }

    var dataset = {};

    function upperCaseLetter(_, letter) {
      return letter.toUpperCase();
    }

    // Pre-load all of the attributes which are prefixed with `data-`
    for (var attr = 0; attr < $e[0].attributes.length; attr++) {
      var attributeName = $e[0].attributes[attr].name;
      var prefix = 'data-';

      if (attributeName.substr(0, prefix.length) == prefix) {
        // Get the contents of the attribute after `data-`
        var dataName = attributeName.substring(prefix.length);

        // Get the data contents from the consistent source
        // This is more than likely the jQuery data helper
        var dataValue = Utils.GetData($e[0], dataName);

        // camelCase the attribute name to match the spec
        var camelDataName = dataName.replace(/-([a-z])/g, upperCaseLetter);

        // Store the data attribute contents into the dataset since
        dataset[camelDataName] = dataValue;
      }
    }

    // Prefer the element's `dataset` attribute if it exists
    // jQuery 1.x does not correctly handle data attributes with multiple dashes
    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
      dataset = $.extend(true, {}, $e[0].dataset, dataset);
    }

    // Prefer our internal data cache if it exists
    var data = $.extend(true, {}, Utils.GetData($e[0]), dataset);

    data = Utils._convertData(data);

    for (var key in data) {
      if (excludedData.indexOf(key) > -1) {
        continue;
      }

      if ($.isPlainObject(this.options[key])) {
        $.extend(this.options[key], data[key]);
      } else {
        this.options[key] = data[key];
      }
    }

    return this;
  };

  Options.prototype.get = function (key) {
    return this.options[key];
  };

  Options.prototype.set = function (key, val) {
    this.options[key] = val;
  };

  return Options;
});

S2.define('select2/core',[
  'jquery',
  './options',
  './utils',
  './keys'
], function ($, Options, Utils, KEYS) {
  var Select2 = function ($element, options) {
    if (Utils.GetData($element[0], 'select2') != null) {
      Utils.GetData($element[0], 'select2').destroy();
    }

    this.$element = $element;

    this.id = this._generateId($element);

    options = options || {};

    this.options = new Options(options, $element);

    Select2.__super__.constructor.call(this);

    // Set up the tabindex

    var tabindex = $element.attr('tabindex') || 0;
    Utils.StoreData($element[0], 'old-tabindex', tabindex);
    $element.attr('tabindex', '-1');

    // Set up containers and adapters

    var DataAdapter = this.options.get('dataAdapter');
    this.dataAdapter = new DataAdapter($element, this.options);

    var $container = this.render();

    this._placeContainer($container);

    var SelectionAdapter = this.options.get('selectionAdapter');
    this.selection = new SelectionAdapter($element, this.options);
    this.$selection = this.selection.render();

    this.selection.position(this.$selection, $container);

    var DropdownAdapter = this.options.get('dropdownAdapter');
    this.dropdown = new DropdownAdapter($element, this.options);
    this.$dropdown = this.dropdown.render();

    this.dropdown.position(this.$dropdown, $container);

    var ResultsAdapter = this.options.get('resultsAdapter');
    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
    this.$results = this.results.render();

    this.results.position(this.$results, this.$dropdown);

    // Bind events

    var self = this;

    // Bind the container to all of the adapters
    this._bindAdapters();

    // Register any DOM event handlers
    this._registerDomEvents();

    // Register any internal event handlers
    this._registerDataEvents();
    this._registerSelectionEvents();
    this._registerDropdownEvents();
    this._registerResultsEvents();
    this._registerEvents();

    // Set the initial state
    this.dataAdapter.current(function (initialData) {
      self.trigger('selection:update', {
        data: initialData
      });
    });

    // Hide the original select
    $element[0].classList.add('select2-hidden-accessible');
    $element.attr('aria-hidden', 'true');

    // Synchronize any monitored attributes
    this._syncAttributes();

    Utils.StoreData($element[0], 'select2', this);

    // Ensure backwards compatibility with $element.data('select2').
    $element.data('select2', this);
  };

  Utils.Extend(Select2, Utils.Observable);

  Select2.prototype._generateId = function ($element) {
    var id = '';

    if ($element.attr('id') != null) {
      id = $element.attr('id');
    } else if ($element.attr('name') != null) {
      id = $element.attr('name') + '-' + Utils.generateChars(2);
    } else {
      id = Utils.generateChars(4);
    }

    id = id.replace(/(:|\.|\[|\]|,)/g, '');
    id = 'select2-' + id;

    return id;
  };

  Select2.prototype._placeContainer = function ($container) {
    $container.insertAfter(this.$element);

    var width = this._resolveWidth(this.$element, this.options.get('width'));

    if (width != null) {
      $container.css('width', width);
    }
  };

  Select2.prototype._resolveWidth = function ($element, method) {
    var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

    if (method == 'resolve') {
      var styleWidth = this._resolveWidth($element, 'style');

      if (styleWidth != null) {
        return styleWidth;
      }

      return this._resolveWidth($element, 'element');
    }

    if (method == 'element') {
      var elementWidth = $element.outerWidth(false);

      if (elementWidth <= 0) {
        return 'auto';
      }

      return elementWidth + 'px';
    }

    if (method == 'style') {
      var style = $element.attr('style');

      if (typeof(style) !== 'string') {
        return null;
      }

      var attrs = style.split(';');

      for (var i = 0, l = attrs.length; i < l; i = i + 1) {
        var attr = attrs[i].replace(/\s/g, '');
        var matches = attr.match(WIDTH);

        if (matches !== null && matches.length >= 1) {
          return matches[1];
        }
      }

      return null;
    }

    if (method == 'computedstyle') {
      var computedStyle = window.getComputedStyle($element[0]);

      return computedStyle.width;
    }

    return method;
  };

  Select2.prototype._bindAdapters = function () {
    this.dataAdapter.bind(this, this.$container);
    this.selection.bind(this, this.$container);

    this.dropdown.bind(this, this.$container);
    this.results.bind(this, this.$container);
  };

  Select2.prototype._registerDomEvents = function () {
    var self = this;

    this.$element.on('change.select2', function () {
      self.dataAdapter.current(function (data) {
        self.trigger('selection:update', {
          data: data
        });
      });
    });

    this.$element.on('focus.select2', function (evt) {
      self.trigger('focus', evt);
    });

    this._syncA = Utils.bind(this._syncAttributes, this);
    this._syncS = Utils.bind(this._syncSubtree, this);

    this._observer = new window.MutationObserver(function (mutations) {
      self._syncA();
      self._syncS(mutations);
    });
    this._observer.observe(this.$element[0], {
      attributes: true,
      childList: true,
      subtree: false
    });
  };

  Select2.prototype._registerDataEvents = function () {
    var self = this;

    this.dataAdapter.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerSelectionEvents = function () {
    var self = this;
    var nonRelayEvents = ['toggle', 'focus'];

    this.selection.on('toggle', function () {
      self.toggleDropdown();
    });

    this.selection.on('focus', function (params) {
      self.focus(params);
    });

    this.selection.on('*', function (name, params) {
      if (nonRelayEvents.indexOf(name) !== -1) {
        return;
      }

      self.trigger(name, params);
    });
  };

  Select2.prototype._registerDropdownEvents = function () {
    var self = this;

    this.dropdown.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerResultsEvents = function () {
    var self = this;

    this.results.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerEvents = function () {
    var self = this;

    this.on('open', function () {
      self.$container[0].classList.add('select2-container--open');
    });

    this.on('close', function () {
      self.$container[0].classList.remove('select2-container--open');
    });

    this.on('enable', function () {
      self.$container[0].classList.remove('select2-container--disabled');
    });

    this.on('disable', function () {
      self.$container[0].classList.add('select2-container--disabled');
    });

    this.on('blur', function () {
      self.$container[0].classList.remove('select2-container--focus');
    });

    this.on('query', function (params) {
      if (!self.isOpen()) {
        self.trigger('open', {});
      }

      this.dataAdapter.query(params, function (data) {
        self.trigger('results:all', {
          data: data,
          query: params
        });
      });
    });

    this.on('query:append', function (params) {
      this.dataAdapter.query(params, function (data) {
        self.trigger('results:append', {
          data: data,
          query: params
        });
      });
    });

    this.on('keypress', function (evt) {
      var key = evt.which;

      if (self.isOpen()) {
        if (key === KEYS.ESC || (key === KEYS.UP && evt.altKey)) {
          self.close(evt);

          evt.preventDefault();
        } else if (key === KEYS.ENTER || key === KEYS.TAB) {
          self.trigger('results:select', {});

          evt.preventDefault();
        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
          self.trigger('results:toggle', {});

          evt.preventDefault();
        } else if (key === KEYS.UP) {
          self.trigger('results:previous', {});

          evt.preventDefault();
        } else if (key === KEYS.DOWN) {
          self.trigger('results:next', {});

          evt.preventDefault();
        }
      } else {
        if (key === KEYS.ENTER || key === KEYS.SPACE ||
            (key === KEYS.DOWN && evt.altKey)) {
          self.open();

          evt.preventDefault();
        }
      }
    });
  };

  Select2.prototype._syncAttributes = function () {
    this.options.set('disabled', this.$element.prop('disabled'));

    if (this.isDisabled()) {
      if (this.isOpen()) {
        this.close();
      }

      this.trigger('disable', {});
    } else {
      this.trigger('enable', {});
    }
  };

  Select2.prototype._isChangeMutation = function (mutations) {
    var self = this;

    if (mutations.addedNodes && mutations.addedNodes.length > 0) {
      for (var n = 0; n < mutations.addedNodes.length; n++) {
        var node = mutations.addedNodes[n];

        if (node.selected) {
          return true;
        }
      }
    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
      return true;
    } else if (Array.isArray(mutations)) {
      return mutations.some(function (mutation) {
        return self._isChangeMutation(mutation);
      });
    }

    return false;
  };

  Select2.prototype._syncSubtree = function (mutations) {
    var changed = this._isChangeMutation(mutations);
    var self = this;

    // Only re-pull the data if we think there is a change
    if (changed) {
      this.dataAdapter.current(function (currentData) {
        self.trigger('selection:update', {
          data: currentData
        });
      });
    }
  };

  /**
   * Override the trigger method to automatically trigger pre-events when
   * there are events that can be prevented.
   */
  Select2.prototype.trigger = function (name, args) {
    var actualTrigger = Select2.__super__.trigger;
    var preTriggerMap = {
      'open': 'opening',
      'close': 'closing',
      'select': 'selecting',
      'unselect': 'unselecting',
      'clear': 'clearing'
    };

    if (args === undefined) {
      args = {};
    }

    if (name in preTriggerMap) {
      var preTriggerName = preTriggerMap[name];
      var preTriggerArgs = {
        prevented: false,
        name: name,
        args: args
      };

      actualTrigger.call(this, preTriggerName, preTriggerArgs);

      if (preTriggerArgs.prevented) {
        args.prevented = true;

        return;
      }
    }

    actualTrigger.call(this, name, args);
  };

  Select2.prototype.toggleDropdown = function () {
    if (this.isDisabled()) {
      return;
    }

    if (this.isOpen()) {
      this.close();
    } else {
      this.open();
    }
  };

  Select2.prototype.open = function () {
    if (this.isOpen()) {
      return;
    }

    if (this.isDisabled()) {
      return;
    }

    this.trigger('query', {});
  };

  Select2.prototype.close = function (evt) {
    if (!this.isOpen()) {
      return;
    }

    this.trigger('close', { originalEvent : evt });
  };

  /**
   * Helper method to abstract the "enabled" (not "disabled") state of this
   * object.
   *
   * @return {true} if the instance is not disabled.
   * @return {false} if the instance is disabled.
   */
  Select2.prototype.isEnabled = function () {
    return !this.isDisabled();
  };

  /**
   * Helper method to abstract the "disabled" state of this object.
   *
   * @return {true} if the disabled option is true.
   * @return {false} if the disabled option is false.
   */
  Select2.prototype.isDisabled = function () {
    return this.options.get('disabled');
  };

  Select2.prototype.isOpen = function () {
    return this.$container[0].classList.contains('select2-container--open');
  };

  Select2.prototype.hasFocus = function () {
    return this.$container[0].classList.contains('select2-container--focus');
  };

  Select2.prototype.focus = function (data) {
    // No need to re-trigger focus events if we are already focused
    if (this.hasFocus()) {
      return;
    }

    this.$container[0].classList.add('select2-container--focus');
    this.trigger('focus', {});
  };

  Select2.prototype.enable = function (args) {
    if (this.options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `select2("enable")` method has been deprecated and will' +
        ' be removed in later Select2 versions. Use $element.prop("disabled")' +
        ' instead.'
      );
    }

    if (args == null || args.length === 0) {
      args = [true];
    }

    var disabled = !args[0];

    this.$element.prop('disabled', disabled);
  };

  Select2.prototype.data = function () {
    if (this.options.get('debug') &&
        arguments.length > 0 && window.console && console.warn) {
      console.warn(
        'Select2: Data can no longer be set using `select2("data")`. You ' +
        'should consider setting the value instead using `$element.val()`.'
      );
    }

    var data = [];

    this.dataAdapter.current(function (currentData) {
      data = currentData;
    });

    return data;
  };

  Select2.prototype.val = function (args) {
    if (this.options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `select2("val")` method has been deprecated and will be' +
        ' removed in later Select2 versions. Use $element.val() instead.'
      );
    }

    if (args == null || args.length === 0) {
      return this.$element.val();
    }

    var newVal = args[0];

    if (Array.isArray(newVal)) {
      newVal = newVal.map(function (obj) {
        return obj.toString();
      });
    }

    this.$element.val(newVal).trigger('input').trigger('change');
  };

  Select2.prototype.destroy = function () {
    Utils.RemoveData(this.$container[0]);
    this.$container.remove();

    this._observer.disconnect();
    this._observer = null;

    this._syncA = null;
    this._syncS = null;

    this.$element.off('.select2');
    this.$element.attr('tabindex',
    Utils.GetData(this.$element[0], 'old-tabindex'));

    this.$element[0].classList.remove('select2-hidden-accessible');
    this.$element.attr('aria-hidden', 'false');
    Utils.RemoveData(this.$element[0]);
    this.$element.removeData('select2');

    this.dataAdapter.destroy();
    this.selection.destroy();
    this.dropdown.destroy();
    this.results.destroy();

    this.dataAdapter = null;
    this.selection = null;
    this.dropdown = null;
    this.results = null;
  };

  Select2.prototype.render = function () {
    var $container = $(
      '<span class="select2 select2-container">' +
        '<span class="selection"></span>' +
        '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
      '</span>'
    );

    $container.attr('dir', this.options.get('dir'));

    this.$container = $container;

    this.$container[0].classList
      .add('select2-container--' + this.options.get('theme'));

    Utils.StoreData($container[0], 'element', this.$element);

    return $container;
  };

  return Select2;
});

S2.define('jquery-mousewheel',[
  'jquery'
], function ($) {
  // Used to shim jQuery.mousewheel for non-full builds.
  return $;
});

S2.define('jquery.select2',[
  'jquery',
  'jquery-mousewheel',

  './select2/core',
  './select2/defaults',
  './select2/utils'
], function ($, _, Select2, Defaults, Utils) {
  if ($.fn.select2 == null) {
    // All methods that should return the element
    var thisMethods = ['open', 'close', 'destroy'];

    $.fn.select2 = function (options) {
      options = options || {};

      if (typeof options === 'object') {
        this.each(function () {
          var instanceOptions = $.extend(true, {}, options);

          var instance = new Select2($(this), instanceOptions);
        });

        return this;
      } else if (typeof options === 'string') {
        var ret;
        var args = Array.prototype.slice.call(arguments, 1);

        this.each(function () {
          var instance = Utils.GetData(this, 'select2');

          if (instance == null && window.console && console.error) {
            console.error(
              'The select2(\'' + options + '\') method was called on an ' +
              'element that is not using Select2.'
            );
          }

          ret = instance[options].apply(instance, args);
        });

        // Check if we should be returning `this`
        if (thisMethods.indexOf(options) > -1) {
          return this;
        }

        return ret;
      } else {
        throw new Error('Invalid arguments for Select2: ' + options);
      }
    };
  }

  if ($.fn.select2.defaults == null) {
    $.fn.select2.defaults = Defaults;
  }

  return Select2;
});

  // Return the AMD loader configuration so it can be used outside of this file
  return {
    define: S2.define,
    require: S2.require
  };
}());

  // Autoload the jQuery bindings
  // We know that all of the modules exist above this, so we're safe
  var select2 = S2.require('jquery.select2');

  // Hold the AMD module references on the jQuery function that was just loaded
  // This allows Select2 to use the internal loader outside of this file, such
  // as in the language files.
  jQuery.fn.select2.amd = S2;

  // Return the Select2 instance for anyone who is importing it.
  return select2;
}));

;define.alias('select2','select2/dist/js/select2.js');
define.switchToUserSpace();
requirejs.config({
  "baseUrl": (typeof REQUIREJS_BASE_URL === "string") ? REQUIREJS_BASE_URL : "/resources/js",
  "paths": {
    "../src": ""
  },
  "bundles": {
    "app-bundle": {
      "user": [
        "app.css",
        "app.html.js",
        "app.js",
        "ext:css",
        "ext:less",
        "ext:sass",
        "ext:scss",
        "ext:styl",
        "main.js",
        "text!app.css"
      ],
      "package": []
    }
  }
});
//# sourceMappingURL=entry.bundle.js.map